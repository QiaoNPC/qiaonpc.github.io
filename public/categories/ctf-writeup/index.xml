<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>CTF Writeup on Sum Ting Wong&#39;s Blog</title>
        <link>https://qiaonpc.github.io/categories/ctf-writeup/</link>
        <description>Recent content in CTF Writeup on Sum Ting Wong&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 09 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://qiaonpc.github.io/categories/ctf-writeup/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Anti-Brute</title>
        <link>https://qiaonpc.github.io/post/anti-brute/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/anti-brute/</guid>
        <description>&lt;h1 id=&#34;anti-brute-ctf-challenge-writeup&#34;&gt;Anti-Brute CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Anti-Brute&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 340&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Web&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The challenge involves bypassing anti-brute force measures to retrieve the flag without brute-forcing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a detailed solution for the Anti-Brute CTF challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Assessment&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Received a wordlist and instructions not to brute force the password.&lt;/li&gt;
&lt;li&gt;But I brute-forced anyways&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Attempted Brute Force&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tried using Burp Suite&amp;rsquo;s Intruder tool for brute forcing, but it was unsuccessful for unknown reasons.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Python Script&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Created a Python script to automate the process of retrieving the flag without brute-forcing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://no-brute.ctf.rawsec.com/login.php&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;possible_password.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;s1&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;s1&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Invalid username or password&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Password found: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Trying password: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Extraction&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Successfully extracted the flag using the Python script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/anti-brute/flag.png&#34;
	width=&#34;1421&#34;
	height=&#34;125&#34;
	srcset=&#34;https://qiaonpc.github.io/post/anti-brute/flag_hu70177659de8d29f46dbc14130d435627_24112_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/anti-brute/flag_hu70177659de8d29f46dbc14130d435627_24112_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1136&#34;
		data-flex-basis=&#34;2728px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Assemble</title>
        <link>https://qiaonpc.github.io/post/assemble/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/assemble/</guid>
        <description>&lt;h1 id=&#34;assemble-ctf-challenge-writeup&#34;&gt;Assemble CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Assemble&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 500&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Hardware&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;Assemble&amp;rdquo; challenge is to correctly configure the hardware components and troubleshoot any technical issues to display the flag on the LCD.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To solve the &amp;ldquo;Assemble&amp;rdquo; CTF challenge, the following configurations were made:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Wiring Matrix Module to Arduino&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C4 -&amp;gt; 13&lt;/li&gt;
&lt;li&gt;C3 -&amp;gt; 12&lt;/li&gt;
&lt;li&gt;C2 -&amp;gt; ~11&lt;/li&gt;
&lt;li&gt;C1 -&amp;gt; ~10&lt;/li&gt;
&lt;li&gt;R1 -&amp;gt; ~9&lt;/li&gt;
&lt;li&gt;R2 -&amp;gt; 8&lt;/li&gt;
&lt;li&gt;R3 -&amp;gt; 7&lt;/li&gt;
&lt;li&gt;R4 -&amp;gt; 6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Attach Potentiometer and LCD to Breadboard&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Potentiometer wiring:
&lt;ul&gt;
&lt;li&gt;GND to Blue rail&lt;/li&gt;
&lt;li&gt;5V to Red rail&lt;/li&gt;
&lt;li&gt;I/O - LCD &amp;lsquo;VEE&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LCD Wiring:
&lt;ul&gt;
&lt;li&gt;VSS to Blue rail&lt;/li&gt;
&lt;li&gt;VDD to Red rail&lt;/li&gt;
&lt;li&gt;RS to A0&lt;/li&gt;
&lt;li&gt;RW to A1&lt;/li&gt;
&lt;li&gt;E to A2&lt;/li&gt;
&lt;li&gt;D7 to Blue rail&lt;/li&gt;
&lt;li&gt;D6 to Red rail&lt;/li&gt;
&lt;li&gt;D5 to A5&lt;/li&gt;
&lt;li&gt;D4 to A4&lt;/li&gt;
&lt;li&gt;D3 to A3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Technical Issues&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Encountered technical issues where the flag would not display on the LCD.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Despite the issues, the excons provided the flag as a gesture of completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can view it on the video in this directory&lt;/p&gt;
&lt;p&gt;&lt;video controls src=&#34;technical issues.mp4&#34; title=&#34;Technical Issue&#34;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;RWSC{XXXXXXXXXX}&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BlackHole</title>
        <link>https://qiaonpc.github.io/post/blackhole/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/blackhole/</guid>
        <description>&lt;h1 id=&#34;blackhole-ctf-challenge-writeup&#34;&gt;BlackHole CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: BlackHole&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 380&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Web&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the BlackHole challenge is to find the flag hidden within the URL or the web page&amp;rsquo;s content.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To solve the BlackHole CTF challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Assessment&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identified that the challenge seemed the same as the preliminary one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Script Adaptation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Utilized a script from a writeup from that day.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adapted the script to suit my needs for the challenge.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;bs4&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BeautifulSoup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;urllib.parse&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urljoin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urlparse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unquote&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;visited_links&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;links&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urljoin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RequestException&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Error retrieving links from &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;No directories found.&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;directory-link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;visit_links_recursive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited_links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;parsed_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urlparse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;base_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;blackhole.ctf.rawsec.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parsed_url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;netloc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base_domain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Visiting: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unquote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Directory found: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;visited_links&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;links&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;visit_links_recursive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RequestException&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Error visiting &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;starting_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://blackhole.ctf.rawsec.com/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;visit_links_recursive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;starting_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag.txt Extraction&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Used the adapted script to find a flag.txt file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, the flag was not directly found in the flag.txt file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/blackhole/found%20flag%20txt.png&#34;
	width=&#34;1716&#34;
	height=&#34;196&#34;
	srcset=&#34;https://qiaonpc.github.io/post/blackhole/found%20flag%20txt_hu616649496a87b75ff98fd1cb788aac22_68500_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/blackhole/found%20flag%20txt_hu616649496a87b75ff98fd1cb788aac22_68500_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Found Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;875&#34;
		data-flex-basis=&#34;2101px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rereading the URL&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Revisited the challenge&amp;rsquo;s instructions to reread the URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/blackhole/not%20flag.png&#34;
	width=&#34;1509&#34;
	height=&#34;425&#34;
	srcset=&#34;https://qiaonpc.github.io/post/blackhole/not%20flag_hu5efd3358d11090c77692e3be0786ca1e_40675_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/blackhole/not%20flag_hu5efd3358d11090c77692e3be0786ca1e_40675_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Not Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;355&#34;
		data-flex-basis=&#34;852px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CyberChef Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Analyzed the URL using CyberChef.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discovered the flag hidden within the URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/blackhole/flag.png&#34;
	width=&#34;1382&#34;
	height=&#34;606&#34;
	srcset=&#34;https://qiaonpc.github.io/post/blackhole/flag_huac342a464fe486df40127de1c266f154_90327_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/blackhole/flag_huac342a464fe486df40127de1c266f154_90327_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;547px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>ButterCup</title>
        <link>https://qiaonpc.github.io/post/buttercup/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/buttercup/</guid>
        <description>&lt;h1 id=&#34;buttercup-ctf-challenge-writeup&#34;&gt;ButterCup CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: ButterCup&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 490&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Misc&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The challenge involves extracting three parts of the flag from a video, with two parts embedded in the video itself and one part hidden in the audio spectrum.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a detailed solution for the ButterCup CTF challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Assessment&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Without hints, we definitely cannot solve this challenge.&lt;/li&gt;
&lt;li&gt;We were told that there were three parts to the flag, with two parts embedded in the video and one part hidden in the audio spectrum.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Video Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Went through the video multiple times, including adjusting playback speed and brightness to catch any hidden elements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discovered the words &lt;code&gt;3XP3RT_&lt;/code&gt; at around 14 seconds and &lt;code&gt;1N_&lt;/code&gt; at around 2:52 in the video.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/buttercup/part%201.png&#34;
	width=&#34;912&#34;
	height=&#34;684&#34;
	srcset=&#34;https://qiaonpc.github.io/post/buttercup/part%201_hub431cfd944627e2ef5e441bda231df95_266331_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/buttercup/part%201_hub431cfd944627e2ef5e441bda231df95_266331_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Part 1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/buttercup/part%202.png&#34;
	width=&#34;1287&#34;
	height=&#34;776&#34;
	srcset=&#34;https://qiaonpc.github.io/post/buttercup/part%202_hufd87c6a477897d892f628531ef0882a8_417044_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/buttercup/part%202_hufd87c6a477897d892f628531ef0882a8_417044_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Part 2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;398px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Audio Spectrum Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Used audacity on the audio of the video to reveal hidden patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configured the spectrogram to enhance visibility of subtle details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Found a hint for the last part of the flag in the spectrogram.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not the clearest picture of the last part, but we were able to deducde its &lt;code&gt;4UD1O&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/buttercup/configuration.jpg&#34;
	width=&#34;528&#34;
	height=&#34;388&#34;
	srcset=&#34;https://qiaonpc.github.io/post/buttercup/configuration_hu8f1f483e703576a18ac9d0dd90fdb63a_39450_480x0_resize_q75_box.jpg 480w, https://qiaonpc.github.io/post/buttercup/configuration_hu8f1f483e703576a18ac9d0dd90fdb63a_39450_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Configuration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;326px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/buttercup/last%20part.jpg&#34;
	width=&#34;338&#34;
	height=&#34;344&#34;
	srcset=&#34;https://qiaonpc.github.io/post/buttercup/last%20part_hu5dc99631b381617f725944851c108dea_59094_480x0_resize_q75_box.jpg 480w, https://qiaonpc.github.io/post/buttercup/last%20part_hu5dc99631b381617f725944851c108dea_59094_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Last Part&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;235px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Reconstruction&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Combined the three parts of the flag obtained from the video and audio spectrum to reconstruct the complete flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ButterCup CTF challenge required a thorough analysis of both the video and audio spectrum to extract all parts of the flag. It demonstrated the importance of attention to detail and the use of specialized tools for multimedia analysis in CTF challenges.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Cali Cartel</title>
        <link>https://qiaonpc.github.io/post/cali-cartel/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/cali-cartel/</guid>
        <description>&lt;h1 id=&#34;cali-cartel-ctf-challenge-writeup&#34;&gt;Cali Cartel CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Cali Cartel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 50&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: OSINT (Open-Source Intelligence)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The challenge requires finding a flag using OSINT techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a brief overview of the solution for the Cali Cartel CTF challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Approach&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initially attempted to solve the challenge using traditional OSINT techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Alternative Solution&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;But when we saw many players are solving it and we aren&amp;rsquo;t, we resorted to the most retarded way of solving CTF ever, Google Dorking.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Google Dorking&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Applied Google dorking techniques to search for information related to the challenge.&lt;/li&gt;
&lt;li&gt;Discovered relevant information that led to the flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Acquisition&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Obtained the flag using the information found through Google dorking.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/cali-cartel/flag.png&#34;
	width=&#34;1057&#34;
	height=&#34;551&#34;
	srcset=&#34;https://qiaonpc.github.io/post/cali-cartel/flag_hud5eef15462f665d9ca3ffc9aea9cebe1_100272_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/cali-cartel/flag_hud5eef15462f665d9ca3ffc9aea9cebe1_100272_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;460px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The Cali Cartel challenge was solved using an alternative approach of Google dorking after traditional OSINT techniques did not yield the desired results. Google dorking helped discover information that ultimately led to finding the flag.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>I Hope You Have The Software</title>
        <link>https://qiaonpc.github.io/post/i-hope-you-have-the-software/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/i-hope-you-have-the-software/</guid>
        <description>&lt;h1 id=&#34;i-hope-you-have-the-software-ctf-challenge-writeup&#34;&gt;I Hope You Have The Software CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: I Hope You Have The Software&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 230&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Network&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of this challenge is to find the flag hidden in the HTML files served by the servers in the packet capture.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To solve the &amp;ldquo;I Hope You Have The Software&amp;rdquo; CTF challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Assessment&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Analyzed the packet capture and identified 12 servers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Noticed two servers stacked on top of each other, suggesting a hidden layer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/i-hope-you-have-the-software/stacked.png&#34;
	width=&#34;585&#34;
	height=&#34;609&#34;
	srcset=&#34;https://qiaonpc.github.io/post/i-hope-you-have-the-software/stacked_hub568cec8611f1348c13b776bcfc236c4_38127_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/i-hope-you-have-the-software/stacked_hub568cec8611f1348c13b776bcfc236c4_38127_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Stacked&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;96&#34;
		data-flex-basis=&#34;230px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTML File Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inspected the HTML files served by the servers.&lt;/li&gt;
&lt;li&gt;Found the flag hidden within one of the HTML files.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Extraction&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extracted the flag from the HTML file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/i-hope-you-have-the-software/flag.png&#34;
	width=&#34;595&#34;
	height=&#34;321&#34;
	srcset=&#34;https://qiaonpc.github.io/post/i-hope-you-have-the-software/flag_hu9015d6a736d499f390c99650f0eb6eef_46035_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/i-hope-you-have-the-software/flag_hu9015d6a736d499f390c99650f0eb6eef_46035_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;444px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>LastHope</title>
        <link>https://qiaonpc.github.io/post/lasthope/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/lasthope/</guid>
        <description>&lt;h1 id=&#34;lasthope-ctf-challenge-writeup&#34;&gt;LastHope CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: LastHope&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 50&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Network&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The challenge involves cracking a WiFi password using captured WiFi packets.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a step-by-step solution for the LastHope CTF challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Capturing WiFi Packets&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Loaded the provided file in Wireshark to analyze the network traffic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Observed a large number of 802.11 packets, indicating WiFi traffic.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/lasthope/protocol%20hierachy.png&#34;
	width=&#34;1395&#34;
	height=&#34;255&#34;
	srcset=&#34;https://qiaonpc.github.io/post/lasthope/protocol%20hierachy_hu82ad58b3f730d6069585f2b3db44868f_51407_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lasthope/protocol%20hierachy_hu82ad58b3f730d6069585f2b3db44868f_51407_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Protocol Hierachy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;547&#34;
		data-flex-basis=&#34;1312px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identifying Access Point MAC Address&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Identified the MAC address of the access point, which can be used to crack the WiFi password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identified the SSID of the WiFi network as &amp;ldquo;Rawsec Command Centre.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/lasthope/mac%20address.png&#34;
	width=&#34;1617&#34;
	height=&#34;147&#34;
	srcset=&#34;https://qiaonpc.github.io/post/lasthope/mac%20address_hu51b309c2d8624f944de44d225e546455_98599_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lasthope/mac%20address_hu51b309c2d8624f944de44d225e546455_98599_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Mac Address &amp; SSID&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1100&#34;
		data-flex-basis=&#34;2640px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cracking WiFi Password&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Used a tool like Aircrack-ng with the rockyou.txt wordlist to crack the WiFi password associated with the captured packets.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/lasthope/aircrack.png&#34;
	width=&#34;1333&#34;
	height=&#34;706&#34;
	srcset=&#34;https://qiaonpc.github.io/post/lasthope/aircrack_hu253836f781200c0690abd60451664c9c_105195_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lasthope/aircrack_hu253836f781200c0690abd60451664c9c_105195_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Aircrack&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;453px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Obtaining the Flag&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The cracked WiFi password is the flag for this challenge.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/lasthope/flag.png&#34;
	width=&#34;1345&#34;
	height=&#34;704&#34;
	srcset=&#34;https://qiaonpc.github.io/post/lasthope/flag_hu07f59e773c7e8a57ac3de7e578ee5b9a_123782_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lasthope/flag_hu07f59e773c7e8a57ac3de7e578ee5b9a_123782_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;458px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The LastHope challenge required participants to crack a WiFi password using captured network packets. By analyzing the packets in Wireshark and using tools like Aircrack-ng with wordlists, participants could obtain the flag associated with the cracked WiFi password.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Medellín Cartel</title>
        <link>https://qiaonpc.github.io/post/medell%C3%ADn-cartel/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/medell%C3%ADn-cartel/</guid>
        <description>&lt;h1 id=&#34;medellín-cartel-ctf-challenge-writeup&#34;&gt;Medellín Cartel CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Medellín Cartel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 190&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: OSINT (Open-Source Intelligence)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The challenge involves finding a flag related to a person named Blacky on a specific Instagram page.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a step-by-step solution for the Medellín Cartel CTF challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hint Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We definitely used the hints in this challenge which directed us to find information about Blacky on a specific Instagram page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Investigating Blacky&amp;rsquo;s Instagram Page&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Visited the Instagram page mentioned in the hint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Found that Blacky&amp;rsquo;s page has only 1 follower and 1 post.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/medell%C3%ADn-cartel/uniten.png&#34;
	width=&#34;1277&#34;
	height=&#34;659&#34;
	srcset=&#34;https://qiaonpc.github.io/post/medell%C3%ADn-cartel/uniten_hue4dc42a48013d540b17510cbbd418b45_118030_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/medell%C3%ADn-cartel/uniten_hue4dc42a48013d540b17510cbbd418b45_118030_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;UNITEN&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;193&#34;
		data-flex-basis=&#34;465px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Inspecting the Post&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inspected the single post on Blacky&amp;rsquo;s page.&lt;/li&gt;
&lt;li&gt;Discovered the flag hidden within the post&amp;rsquo;s content.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Obtaining the Flag&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extracted the flag from the post&amp;rsquo;s content.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/medell%C3%ADn-cartel/flag.png&#34;
	width=&#34;380&#34;
	height=&#34;160&#34;
	srcset=&#34;https://qiaonpc.github.io/post/medell%C3%ADn-cartel/flag_hu3e64b00a570c3829ebcefe7bb7c620d4_10490_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/medell%C3%ADn-cartel/flag_hu3e64b00a570c3829ebcefe7bb7c620d4_10490_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;237&#34;
		data-flex-basis=&#34;570px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The Medellín Cartel challenge required participants to investigate a specific Instagram page to find information about a person named Blacky. By inspecting Blacky&amp;rsquo;s post on the page, participants could discover the flag hidden within the post&amp;rsquo;s content.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Mobile</title>
        <link>https://qiaonpc.github.io/post/mobile/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/mobile/</guid>
        <description>&lt;h1 id=&#34;mobile-ctf-challenge-writeup&#34;&gt;Mobile CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Mobile&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 290&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: DFIR (Digital Forensics and Incident Response)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The challenge involves extracting information from a PDF document related to mobile forensics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a brief overview of the solution for the Mobile CTF challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Approach&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Started by examining the 3000-page PDF document provided for any visible clues or patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Noticed that certain pages were scribbled over, indicating potential hidden information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/mobile/scribble.png&#34;
	width=&#34;747&#34;
	height=&#34;557&#34;
	srcset=&#34;https://qiaonpc.github.io/post/mobile/scribble_hubf6dd8a4bb6ed3cf7bd45a784343ae80_46714_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/scribble_hubf6dd8a4bb6ed3cf7bd45a784343ae80_46714_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Scribble&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;321px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extraction Attempt&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Used &lt;code&gt;pdfimages&lt;/code&gt; tool to extract images from the PDF, hoping to find hidden messages or flags.&lt;/li&gt;
&lt;li&gt;However, this approach did not yield any relevant information.&lt;/li&gt;
&lt;li&gt;If you are curious, they are confidential information such as IC, BankRakyat Account Information, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identification of Suspicious Content&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Continued to carefully review the PDF document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Noticed a suspicious SHA-1 hash that was out of place and bolded, hinting at its significance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/mobile/sus%20hash.png&#34;
	width=&#34;404&#34;
	height=&#34;211&#34;
	srcset=&#34;https://qiaonpc.github.io/post/mobile/sus%20hash_huf3d4bb54bcefe2188729b582753f105a_17118_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/sus%20hash_huf3d4bb54bcefe2188729b582753f105a_17118_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Sus Hash&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;459px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hint from Social Media&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recalled a hint from Twitter related to Android hacking and cracking gesture passwords.&lt;/li&gt;
&lt;li&gt;Realized that the SHA-1 hash resembled the format of the hash mentioned in the hint.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decryption Attempt&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Researched tools and methods for decrypting SHA-1 hashes associated with Android gesture passwords.&lt;/li&gt;
&lt;li&gt;Found a Python script on GitHub that seemed promising for this purpose.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Successful Decryption&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Applied the Python script to decrypt the SHA-1 hash found in the PDF.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The decrypted value revealed the flag, solving the challenge.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/mobile/flag.png&#34;
	width=&#34;1338&#34;
	height=&#34;700&#34;
	srcset=&#34;https://qiaonpc.github.io/post/mobile/flag_hu7a4bbcc04279aa17a4f78640b4e975b2_95747_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/flag_hu7a4bbcc04279aa17a4f78640b4e975b2_95747_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;458px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The Mobile CTF challenge involved extracting a hidden flag from a large PDF document related to mobile forensics. Despite initial attempts to extract information from the PDF images, the solution was found in a suspicious SHA-1 hash within the document. By decrypting this hash using a Python script, the flag was successfully obtained, completing the challenge.&lt;/p&gt;
&lt;h2 id=&#34;notes-for-this-challenge&#34;&gt;Notes for this challenge
&lt;/h2&gt;&lt;p&gt;Despite the gruesome challenge, there were highlights that are worth mentioning. Attached below are my favourite parts of this challenge.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/mobile/cat%201.png&#34;
	width=&#34;744&#34;
	height=&#34;762&#34;
	srcset=&#34;https://qiaonpc.github.io/post/mobile/cat%201_hu4424d80b1e7b5cb8fe05420076543371_378686_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/cat%201_hu4424d80b1e7b5cb8fe05420076543371_378686_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Cat&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;97&#34;
		data-flex-basis=&#34;234px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/mobile/cat%202.png&#34;
	width=&#34;665&#34;
	height=&#34;655&#34;
	srcset=&#34;https://qiaonpc.github.io/post/mobile/cat%202_hue5be9727b7f35c3664110edad699b0e8_386304_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/cat%202_hue5be9727b7f35c3664110edad699b0e8_386304_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Cat&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/mobile/cat%203.png&#34;
	width=&#34;740&#34;
	height=&#34;718&#34;
	srcset=&#34;https://qiaonpc.github.io/post/mobile/cat%203_hu600fba7d4f61738c07d5067323a6cf99_325035_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/cat%203_hu600fba7d4f61738c07d5067323a6cf99_325035_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Cat&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;247px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/mobile/cat.png&#34;
	width=&#34;759&#34;
	height=&#34;682&#34;
	srcset=&#34;https://qiaonpc.github.io/post/mobile/cat_hu47f1642a0d2e87e9f950e276360a8f27_506505_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/cat_hu47f1642a0d2e87e9f950e276360a8f27_506505_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Cat&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;111&#34;
		data-flex-basis=&#34;267px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Resign Letter</title>
        <link>https://qiaonpc.github.io/post/resign-letter/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/resign-letter/</guid>
        <description>&lt;h1 id=&#34;resign-letter-ctf-challenge-writeup&#34;&gt;Resign Letter CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Resign Letter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 50&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Reverse Engineering&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The challenge involves analyzing a Word document to extract and analyze a suspicious executable file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a detailed solution for the Resign Letter CTF challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Assessment&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Analyzed the provided Word document for any embedded macros using olevba.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identified a suspicious link within the document.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/resign-letter/olevba.png&#34;
	width=&#34;1362&#34;
	height=&#34;722&#34;
	srcset=&#34;https://qiaonpc.github.io/post/resign-letter/olevba_huc8352854c34ce250dad912c7912122a2_175437_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/resign-letter/olevba_huc8352854c34ce250dad912c7912122a2_175437_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Olevba&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;452px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analysis of the Executable&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Downloaded and extracted the executable, named &lt;code&gt;lenovo.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ran the executable in a Windows virtual machine for analysis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initially used Procmon for monitoring file system activity but found it challenging due to the hidden modifications.&lt;/li&gt;
&lt;li&gt;Switched to API Monitor for more detailed monitoring.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identifying the Flag&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Analyzed the API calls made by the executable using API Monitor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discovered the flag being accessed or manipulated by the executable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/resign-letter/apimon.png&#34;
	width=&#34;1223&#34;
	height=&#34;540&#34;
	srcset=&#34;https://qiaonpc.github.io/post/resign-letter/apimon_huf863cc1d3372a70d01521b70eb61f157_83834_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/resign-letter/apimon_huf863cc1d3372a70d01521b70eb61f157_83834_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;API Monitor&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;543px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/resign-letter/flag.png&#34;
	width=&#34;607&#34;
	height=&#34;447&#34;
	srcset=&#34;https://qiaonpc.github.io/post/resign-letter/flag_hu9c58b289f09ccda0fa3747ea98d5109d_10751_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/resign-letter/flag_hu9c58b289f09ccda0fa3747ea98d5109d_10751_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The Resign Letter CTF challenge required reverse engineering skills to analyze a Word document and a Windows executable. By using tools like olevba for macro analysis and API Monitor for dynamic analysis of the executable, the flag was successfully extracted. This challenge highlighted the importance of understanding malware analysis techniques for identifying malicious behavior.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Round and Round</title>
        <link>https://qiaonpc.github.io/post/round-and-round/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/round-and-round/</guid>
        <description>&lt;h1 id=&#34;round-and-round-ctf-challenge-writeup&#34;&gt;Round and Round CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Round and Round&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 50&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Cryptography&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The challenge involves decrypting a given ciphertext to obtain the flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a detailed solution for the Round and Round CTF challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Assessment&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examined the given ciphertext but was unsure of the encryption method used.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Observations and Strategy&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It took me long to notice that the ciphertext seemed to resemble ASCII values or character mappings.&lt;/li&gt;
&lt;li&gt;Attempted to place the flag format, &lt;code&gt;RWSC{&lt;/code&gt;, under the ciphertext to see if any patterns emerged.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decryption Process&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For example, 21 corresponds to &amp;lsquo;R&amp;rsquo;, 26 corresponds to &amp;lsquo;W&amp;rsquo;, and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used this pattern to decode each number in the ciphertext to its corresponding character.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But there is a gimmick, I eventually found out that if numbers were less than 30 were being wrapped around.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is a very stupid gimmick to be honest, since the flag cannot be constructed without knowing this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/round-and-round/workings.png&#34;
	width=&#34;1467&#34;
	height=&#34;2164&#34;
	srcset=&#34;https://qiaonpc.github.io/post/round-and-round/workings_hu8a28ac0814e970ea7ea7fdab252debe4_496580_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/round-and-round/workings_hu8a28ac0814e970ea7ea7fdab252debe4_496580_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Workings&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Decryption&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decrypted the entire ciphertext using the wrapping pattern to reveal the flag.&lt;/li&gt;
&lt;li&gt;The flag is also in upper-case.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The Round and Round CTF challenge required understanding a specific wrapping pattern to decrypt the given ciphertext. By recognizing the pattern and applying it to the ciphertext, the flag was successfully decrypted. This challenge demonstrated the importance of pattern recognition and creative thinking in cryptography challenges.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SimpleLazy</title>
        <link>https://qiaonpc.github.io/post/simplelazy/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/simplelazy/</guid>
        <description>&lt;h1 id=&#34;simplelazy-ctf-challenge-writeup&#34;&gt;SimpleLazy CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: SimpleLazy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 330&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Web&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The challenge involves exploiting a Local File Inclusion (LFI) vulnerability to retrieve a flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a detailed solution for the SimpleLazy CTF challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Assessment&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Immediately recognized the challenge as having a Local File Inclusion (LFI) vulnerability, particularly with the &lt;code&gt;page3.php&lt;/code&gt; parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discovered that input was always appended with &lt;code&gt;.php&lt;/code&gt;, limiting directory traversal options.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/simplelazy/initial%20page.png&#34;
	width=&#34;1700&#34;
	height=&#34;818&#34;
	srcset=&#34;https://qiaonpc.github.io/post/simplelazy/initial%20page_huaecab7e789f6bc1b44c4a64e152cac04_43171_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/simplelazy/initial%20page_huaecab7e789f6bc1b44c4a64e152cac04_43171_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Initial Page&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;207&#34;
		data-flex-basis=&#34;498px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strategy for Exploitation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Focused on extracting PHP source code from &lt;code&gt;index.php&lt;/code&gt;, &lt;code&gt;page1.php&lt;/code&gt;, &lt;code&gt;page2.php&lt;/code&gt;, and &lt;code&gt;page3.php&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utilized &lt;code&gt;php://filter&lt;/code&gt; to retrieve PHP files in base64 format, allowing for remote file inclusion.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/simplelazy/part%201.png&#34;
	width=&#34;1551&#34;
	height=&#34;617&#34;
	srcset=&#34;https://qiaonpc.github.io/post/simplelazy/part%201_hu6fd83f9012763277fd5a3f9d5778f2e5_38374_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/simplelazy/part%201_hu6fd83f9012763277fd5a3f9d5778f2e5_38374_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;LFI&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;251&#34;
		data-flex-basis=&#34;603px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exploiting the LFI&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Retrieved the source code of &lt;code&gt;page3.php&lt;/code&gt; using &lt;code&gt;php://filter&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discovered the inclusion of a suspicious file in the PHP source code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/simplelazy/part%201%201.png&#34;
	width=&#34;855&#34;
	height=&#34;656&#34;
	srcset=&#34;https://qiaonpc.github.io/post/simplelazy/part%201%201_hu714f4622ddc1e4f1a28480ab768a477f_48643_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/simplelazy/part%201%201_hu714f4622ddc1e4f1a28480ab768a477f_48643_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;LFI&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;130&#34;
		data-flex-basis=&#34;312px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Retrieving the Flag&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Applied the same &lt;code&gt;php://filter&lt;/code&gt; technique to extract the suspicious file&amp;rsquo;s contents in base64 format.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decoded the contents of the suspicious file to reveal the flag.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/simplelazy/part%202.png&#34;
	width=&#34;1276&#34;
	height=&#34;650&#34;
	srcset=&#34;https://qiaonpc.github.io/post/simplelazy/part%202_huc681cad5303f309973418a29e5cd977a_36438_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/simplelazy/part%202_huc681cad5303f309973418a29e5cd977a_36438_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;LFI&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;196&#34;
		data-flex-basis=&#34;471px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/simplelazy/part%202%202.png&#34;
	width=&#34;871&#34;
	height=&#34;629&#34;
	srcset=&#34;https://qiaonpc.github.io/post/simplelazy/part%202%202_hu4140144bc8ea9171d3f70156eaadfb09_31425_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/simplelazy/part%202%202_hu4140144bc8ea9171d3f70156eaadfb09_31425_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;332px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The SimpleLazy CTF challenge demonstrated the importance of understanding LFI vulnerabilities and using techniques like &lt;code&gt;php://filter&lt;/code&gt; to retrieve PHP source code and extract hidden files. By exploiting the vulnerability and decoding the suspicious file&amp;rsquo;s contents, the flag was successfully obtained, completing the challenge.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Compromised</title>
        <link>https://qiaonpc.github.io/post/compromised/</link>
        <pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/compromised/</guid>
        <description>&lt;h1 id=&#34;compromised---ctf-challenge-writeup&#34;&gt;Compromised - CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Compromised&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Forensics&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;Compromised&amp;rdquo; CTF challenge is to extract a hidden flag embedded within a complex set of files and directories.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully solve the &amp;ldquo;Compromised&amp;rdquo; challenge, I executed the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Examination&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unzipped the provided challenge file, revealing a directory structure reminiscent of a Windows directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Identification&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using the &lt;code&gt;tree&lt;/code&gt; command, I quickly located the flag within the directory structure. However, it was a zip file itself, requiring further steps for extraction.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/compromised/tree%20to%20find%20flag.png&#34;
	width=&#34;471&#34;
	height=&#34;262&#34;
	srcset=&#34;https://qiaonpc.github.io/post/compromised/tree%20to%20find%20flag_hu56c72202b0be96a693adac30d28ac80c_48522_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/tree%20to%20find%20flag_hu56c72202b0be96a693adac30d28ac80c_48522_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Tree to find flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;431px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/compromised/flag%20zip.png&#34;
	width=&#34;1091&#34;
	height=&#34;119&#34;
	srcset=&#34;https://qiaonpc.github.io/post/compromised/flag%20zip_hu233af82ed692c2c7c834e048aff1323d_57618_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/flag%20zip_hu233af82ed692c2c7c834e048aff1323d_57618_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag is a zip&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;916&#34;
		data-flex-basis=&#34;2200px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Brute Forcing the Zip File&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Attempted to brute force the password for the zip file. Initially faced permission issues, resolved by changing permissions using &lt;code&gt;chmod&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used &lt;code&gt;John The Ripper&lt;/code&gt; to crack the zip file password, which proved unsuccessful, prompting a search for the password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/compromised/john%20failed.png&#34;
	width=&#34;1295&#34;
	height=&#34;353&#34;
	srcset=&#34;https://qiaonpc.github.io/post/compromised/john%20failed_hub44e5245703d27a185866e2d02b5fd8d_213403_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/john%20failed_hub44e5245703d27a185866e2d02b5fd8d_213403_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;John Failed&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;366&#34;
		data-flex-basis=&#34;880px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Locating Password&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;After some exploration, identified the crucial file named &lt;code&gt;Cache0000.bin&lt;/code&gt;, which holds significant data for the challenge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Cache0000.bin&lt;/code&gt; contains data related to Remote Desktop Protocol (RDP) cache.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/compromised/found%20cache.png&#34;
	width=&#34;490&#34;
	height=&#34;225&#34;
	srcset=&#34;https://qiaonpc.github.io/post/compromised/found%20cache_hu2452617720dde5cad47c10fc5979e3bf_50341_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/found%20cache_hu2452617720dde5cad47c10fc5979e3bf_50341_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Cache File Found&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;522px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extracting Images from Cache File&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Employed the tool &lt;code&gt;bmc-tools&lt;/code&gt; (&lt;a class=&#34;link&#34; href=&#34;https://github.com/ANSSI-FR/bmc-tools&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ANSSI-FR/bmc-tools&lt;/a&gt;) to extract pictures from &lt;code&gt;Cache0000.bin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/compromised/bmc%20tools.png&#34;
	width=&#34;1265&#34;
	height=&#34;713&#34;
	srcset=&#34;https://qiaonpc.github.io/post/compromised/bmc%20tools_hub0467e995eebc7c55c80afca5a188a2f_766412_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/bmc%20tools_hub0467e995eebc7c55c80afca5a188a2f_766412_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;BMC Tool Output&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;425px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Revealing Flag within Images&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extracted over 2000 images, one of which combines all the segments of the flag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Noticed segments of the flag within the combined image, visible upon zooming in.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/compromised/bmc%20tools%20zoomed.png&#34;
	width=&#34;965&#34;
	height=&#34;231&#34;
	srcset=&#34;https://qiaonpc.github.io/post/compromised/bmc%20tools%20zoomed_hu345ff2b754f4a8aef7066e7ce748a8be_78176_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/bmc%20tools%20zoomed_hu345ff2b754f4a8aef7066e7ce748a8be_78176_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;BMC Tool Flag Segment&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;417&#34;
		data-flex-basis=&#34;1002px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Combining Segments into Flag&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Utilized  &lt;code&gt;RDPCacheStitcher&lt;/code&gt; (&lt;a class=&#34;link&#34; href=&#34;https://github.com/BSI-Bund/RdpCacheStitcher/releases/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/BSI-Bund/RdpCacheStitcher/releases/&lt;/a&gt;) to assemble the segments as if solving a puzzle.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/compromised/stitcher.png&#34;
	width=&#34;1459&#34;
	height=&#34;715&#34;
	srcset=&#34;https://qiaonpc.github.io/post/compromised/stitcher_hu03fdf24debb36753327432bc02609da7_38614_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/stitcher_hu03fdf24debb36753327432bc02609da7_38614_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Stitcher&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;204&#34;
		data-flex-basis=&#34;489px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Obtaining Password&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discovered the password &lt;code&gt;WGMY_P4ssw0rd_N0t_V3ry_H4rd!!!&lt;/code&gt; while assembling the image segments.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Final Flag Extraction&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Successfully unzipped the flag from the zip file using the obtained password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/compromised/flag.png&#34;
	width=&#34;951&#34;
	height=&#34;271&#34;
	srcset=&#34;https://qiaonpc.github.io/post/compromised/flag_hu12614d797c54e94c43ac1cb33d0f927d_95998_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/flag_hu12614d797c54e94c43ac1cb33d0f927d_95998_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;350&#34;
		data-flex-basis=&#34;842px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is: &lt;code&gt;wgmy{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This writeup delineates the process of navigating through a directory, extracting images from a cache file, assembling image segments, and obtaining the hidden flag in the &amp;ldquo;Compromised&amp;rdquo; CTF challenge. For any further queries or clarifications, please feel free to ask.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux Memory Usage</title>
        <link>https://qiaonpc.github.io/post/linux-memory-usage/</link>
        <pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/linux-memory-usage/</guid>
        <description>&lt;h1 id=&#34;linux-memory-usage---ctf-challenge-writeup&#34;&gt;Linux Memory Usage - CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Linux Memory Usage&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: PPC / Leet Code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;Linux Memory Usage&amp;rdquo; CTF challenge is to efficiently manage and process memory usage data for different processes based on given inputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Encountering a Leet Code challenge within a CTF was an interesting experience. Here&amp;rsquo;s how I tackled it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Understanding Inputs&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This was my first encounter with a Leet Code style challenge in a CTF context, very very fun.&lt;/li&gt;
&lt;li&gt;The problem consisted of three types of inputs:
&lt;ol&gt;
&lt;li&gt;Variables N and Q: Representing the number of processes and queries.&lt;/li&gt;
&lt;li&gt;Processes&amp;rsquo; Data: Including process id, parent process id, and memory usage.&lt;/li&gt;
&lt;li&gt;Queries: Containing necessary information for further analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Memory Mapping&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utilizing the received inputs, I structured the memory by creating a dictionary.&lt;/li&gt;
&lt;li&gt;The dictionary&amp;rsquo;s key-value pairs were organized to represent parent processes and their corresponding children processes, facilitating efficient data retrieval.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Handling Queries&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Processing queries involved reading and parsing the data structure I coded to provide the desired output efficiently.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/linux-memory-usage/flag.png&#34;
	width=&#34;1740&#34;
	height=&#34;566&#34;
	srcset=&#34;https://qiaonpc.github.io/post/linux-memory-usage/flag_hu13642636212e61a304de085073f35b0e_50720_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/linux-memory-usage/flag_hu13642636212e61a304de085073f35b0e_50720_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;307&#34;
		data-flex-basis=&#34;737px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;collections&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defaultdict&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;calculate_memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;children&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defaultdict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;memory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;memo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;stack&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;total_memory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;current_pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_pid&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;total_memory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current_pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;total_memory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current_pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;children_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current_pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;child&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;children_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;total_memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;memo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total_memory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;calculate_memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is: &lt;code&gt;wgmy{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This writeup demonstrates the process of efficiently managing and processing memory usage data in the &amp;ldquo;Linux Memory Usage&amp;rdquo; CTF challenge using appropriate data structures and systematic query handling. For any further inquiries or clarifications, feel free to ask.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Lokami Temple</title>
        <link>https://qiaonpc.github.io/post/lokami-temple/</link>
        <pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/lokami-temple/</guid>
        <description>&lt;h1 id=&#34;lokami-temple---ctf-challenge-writeup&#34;&gt;Lokami Temple - CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Lokami Temple&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: PPC / Leet Code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;Lokami Temple&amp;rdquo; CTF challenge is to navigate a graph problem by determining the shortest path for all doors to exit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Encountering a Leet Code challenge within a CTF was an intriguing experience. Here&amp;rsquo;s my approach to solving it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Graph Problem Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Opted to use Depth-First Search (DFS) due to its comprehensibility, although Breadth-First Search (BFS) could potentially be faster.&lt;/li&gt;
&lt;li&gt;Utilized DFS templates available from resources like Geek4Geeks to implement the algorithm.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Contradictory Challenge Instructions&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initially, the challenge instructions seemed contradictory, as it asked to find both the longest and shortest paths for doors.&lt;/li&gt;
&lt;li&gt;Decided to prioritize identifying the longest path to each door first, considering the logical progression of the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Longest Paths for Each Door&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calculated the longest path from each door to the exit.&lt;/li&gt;
&lt;li&gt;For example:
&lt;ul&gt;
&lt;li&gt;Door 1: 6 steps to Exit 10&lt;/li&gt;
&lt;li&gt;Door 2: 6 steps to Exit 10&lt;/li&gt;
&lt;li&gt;Door 3: 5 steps to Exit 10&lt;/li&gt;
&lt;li&gt;Evaluated each door&amp;rsquo;s longest path to determine the shortest length.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Selecting Shortest Path&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chose the door with the shortest path to the exit among the calculated values.&lt;/li&gt;
&lt;li&gt;In the example, if Door 3 requires only 5 steps while Doors 1 and 2 need 6 steps, Door 3 becomes the selected choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Finding Exit Paths via Selected Door&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explored and mapped all potential paths to the exit through the selected door (in this case, Door 3).
&lt;ul&gt;
&lt;li&gt;Door 3 can exit through Door 1, Door 2, Door 5, basically any door&lt;/li&gt;
&lt;li&gt;Select the longest path for Door 3 to exit in this step&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The challenge resolution involved a systematic approach of identifying the longest paths to each door, selecting the door with the shortest path to the exit, and exploring paths through the chosen door.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/lokami-temple/flag.png&#34;
	width=&#34;1722&#34;
	height=&#34;558&#34;
	srcset=&#34;https://qiaonpc.github.io/post/lokami-temple/flag_hua10048479c43ea6df0f010016cda7f3b_47437_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lokami-temple/flag_hua10048479c43ea6df0f010016cda7f3b_47437_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;308&#34;
		data-flex-basis=&#34;740px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;collections&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defaultdict&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;find_longest_paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_doors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defaultdict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;max_path_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;neighbor&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;neighbor&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;path_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;neighbor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;max_path_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_path_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_path_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;longest_paths&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;door&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_doors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;path_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;door&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;longest_paths&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;door&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;longest_paths&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_longest_paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;max_path_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;doors_with_max_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;door&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;door&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path_length&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_path_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_path_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doors_with_max_length&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;num_doors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;connections&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_doors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;connections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find_longest_paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_doors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;min_path_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;doors_with_min_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;door&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;door&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path_length&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min_path_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;max_path_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doors_with_max_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_longest_paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;print_exit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doors_with_max_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;print_door_min_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doors_with_min_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Entrance(s): &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_door_min_length&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Exit(s): &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_exit&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Path Length: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;min_path_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is: &lt;code&gt;wgmy{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This writeup illustrates the approach taken to navigate a graph problem, determining the shortest path for all doors to exit in the &amp;ldquo;Lokami Temple&amp;rdquo; CTF challenge. For any further queries or clarifications, feel free to inquire.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DigiDoc</title>
        <link>https://qiaonpc.github.io/post/digidoc/</link>
        <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/digidoc/</guid>
        <description>&lt;h1 id=&#34;digidoc---ctf-challenge-writeup&#34;&gt;DigiDoc - CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: DigiDoc&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;DigiDoc&amp;rdquo; CTF challenge is to gain root access to the target server by exploiting various vulnerabilities, including FTP, web application vulnerabilities (such as upload and IDOR), and privilege escalation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully tackle the &amp;ldquo;DigiDoc&amp;rdquo; challenge, I executed the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Enumeration using Nmap&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I started by performing an initial scan using Nmap on the provided IP address, which revealed open ports: FTP, SSH, and HTTP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/nmap.png&#34;
	width=&#34;1155&#34;
	height=&#34;762&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/nmap_huacc799f52631517647687eb916c4df6e_397499_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/nmap_huacc799f52631517647687eb916c4df6e_397499_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Nmap Scan&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;363px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FTP Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Investigating the FTP service, I logged in anonymously and found two files. Downloading these files revealed an ECB key that would be useful later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/anonymous%20login.png&#34;
	width=&#34;653&#34;
	height=&#34;280&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/anonymous%20login_hu910e3a432e7c94d8ce4a5856c1df7c08_54358_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/anonymous%20login_hu910e3a432e7c94d8ce4a5856c1df7c08_54358_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Anonymous Login&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;233&#34;
		data-flex-basis=&#34;559px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/files.png&#34;
	width=&#34;884&#34;
	height=&#34;145&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/files_hu98b60356e7501ea2a98e630dadf4dec3_32218_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/files_hu98b60356e7501ea2a98e630dadf4dec3_32218_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Files&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;609&#34;
		data-flex-basis=&#34;1463px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/reading%20files.png&#34;
	width=&#34;1699&#34;
	height=&#34;560&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/reading%20files_hu518d612650666c2ba2956d15ce6fc55e_111161_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/reading%20files_hu518d612650666c2ba2956d15ce6fc55e_111161_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Reading Files&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;303&#34;
		data-flex-basis=&#34;728px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exploring the HTTP Service&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Moving to the HTTP service, I ran a directory brute force using Gobuster. Eventually, it identified a login page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/home%20page.png&#34;
	width=&#34;1185&#34;
	height=&#34;728&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/home%20page_hu1c4eeca670dbb9ed11c0565c6625ab0f_506879_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/home%20page_hu1c4eeca670dbb9ed11c0565c6625ab0f_506879_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Home Page&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;162&#34;
		data-flex-basis=&#34;390px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/gobuster.png&#34;
	width=&#34;1230&#34;
	height=&#34;411&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/gobuster_hu4d5104ed109b0f7878a1335a08b5ac35_204741_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/gobuster_hu4d5104ed109b0f7878a1335a08b5ac35_204741_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Gobuster&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;299&#34;
		data-flex-basis=&#34;718px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logging in as a guest revealed an upload page, indicating a potential upload vulnerability. However, admin access was required.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/login%20page.png&#34;
	width=&#34;943&#34;
	height=&#34;620&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/login%20page_hu065c7ca00d37d1af764cdb2522be616b_16980_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/login%20page_hu065c7ca00d37d1af764cdb2522be616b_16980_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Login Page&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;152&#34;
		data-flex-basis=&#34;365px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/admin%20required.png&#34;
	width=&#34;1640&#34;
	height=&#34;467&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/admin%20required_hu528fa97ae04160beae25d0a404629024_34381_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/admin%20required_hu528fa97ae04160beae25d0a404629024_34381_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Admin Required&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;351&#34;
		data-flex-basis=&#34;842px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identifying IDOR Vulnerability&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Analyzing the accounts tab, I identified an Insecure Direct Object Reference (IDOR) vulnerability, allowing access to user IDs, crucial for admin privileges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDOR vulnerability involves manipulating user IDs or object references to gain unauthorized access.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/IDOR.png&#34;
	width=&#34;1367&#34;
	height=&#34;610&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/IDOR_hu00d9d97c53cc083902db81a860a08f13_64282_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/IDOR_hu00d9d97c53cc083902db81a860a08f13_64282_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;IDOR&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;224&#34;
		data-flex-basis=&#34;537px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exploiting Upload Vulnerability&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I attempted exploiting the upload vulnerability. Despite correctly written code and magic bytes, standard PHP file extensions didn&amp;rsquo;t work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Following recommendations from hacktricks, I discovered that the &lt;code&gt;.phtml&lt;/code&gt; extension allowed successful uploads, enabling me to upload a reverse shell.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/phtml%20poc.png&#34;
	width=&#34;943&#34;
	height=&#34;247&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/phtml%20poc_hu83fb9e109be8a0c5747fd96a99498a65_26000_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/phtml%20poc_hu83fb9e109be8a0c5747fd96a99498a65_26000_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PHTML POC&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;381&#34;
		data-flex-basis=&#34;916px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/phtml.png&#34;
	width=&#34;517&#34;
	height=&#34;118&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/phtml_hua1221c02a1f8f71cab29b8eb8b9983ee_18845_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/phtml_hua1221c02a1f8f71cab29b8eb8b9983ee_18845_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PHTML Code&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;438&#34;
		data-flex-basis=&#34;1051px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/web-shell.png&#34;
	width=&#34;1532&#34;
	height=&#34;750&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/web-shell_hubcbd1f09ed26397a4cd079c9f91af6d5_227986_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/web-shell_hubcbd1f09ed26397a4cd079c9f91af6d5_227986_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Web Shell&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;204&#34;
		data-flex-basis=&#34;490px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Escalating Privileges&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Accessing the server, I realized I was the &lt;code&gt;www-data&lt;/code&gt; user. To achieve root access, I explored the home directory, finding two users: Alvin and Dave.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/dave.png&#34;
	width=&#34;573&#34;
	height=&#34;84&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/dave_hud365f73400d276d8a9fa45d540820115_18687_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/dave_hud365f73400d276d8a9fa45d540820115_18687_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Dave&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;682&#34;
		data-flex-basis=&#34;1637px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decoding a base64-encoded string in Alvin&amp;rsquo;s directory, using the previously obtained ECB key, revealed a plaintext password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/base64%20password.png&#34;
	width=&#34;613&#34;
	height=&#34;92&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/base64%20password_hu9ba1912a634c238109d04e0a03cab34f_27873_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/base64%20password_hu9ba1912a634c238109d04e0a03cab34f_27873_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Base64 Password&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;666&#34;
		data-flex-basis=&#34;1599px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/decode.png&#34;
	width=&#34;459&#34;
	height=&#34;576&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/decode_hu9f604820793d823212f0fd5727651799_52530_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/decode_hu9f604820793d823212f0fd5727651799_52530_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Decoded&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;79&#34;
		data-flex-basis=&#34;191px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Privilege Escalation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SSHing into the server using Alvin&amp;rsquo;s credentials, I discovered an ability for Alvin to execute a hidden Python script as root using sudo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/sudo%20l.png&#34;
	width=&#34;1236&#34;
	height=&#34;206&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/sudo%20l_hu032ac83b1884401c1eacec3c7adc92ea_48819_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/sudo%20l_hu032ac83b1884401c1eacec3c7adc92ea_48819_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Sudo -l&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;600&#34;
		data-flex-basis=&#34;1440px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Privilege Escalation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The solution involved hijacking the libraries in a script file provided without modifying it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating a new &lt;code&gt;shutil.py&lt;/code&gt; file, spawning a shell using &lt;code&gt;os&lt;/code&gt;, escalated privileges to root.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/hijacking.png&#34;
	width=&#34;475&#34;
	height=&#34;111&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/hijacking_huc11d1cdf7a6285295e6b5df284a4ab1f_23446_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/hijacking_huc11d1cdf7a6285295e6b5df284a4ab1f_23446_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Hijacking&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;427&#34;
		data-flex-basis=&#34;1027px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Retrieval&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The obtained flag through the intended solution: &lt;code&gt;ABOH23{wh47_4_cr4pp7_s3rv1c3_c3nt3r}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/digidoc/hijacked.png&#34;
	width=&#34;904&#34;
	height=&#34;233&#34;
	srcset=&#34;https://qiaonpc.github.io/post/digidoc/hijacked_hub316e73250de2a91671aa0a323079052_67862_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/digidoc/hijacked_hub316e73250de2a91671aa0a323079052_67862_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Hijacked&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;387&#34;
		data-flex-basis=&#34;931px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The resolution of the &amp;ldquo;DigiDoc&amp;rdquo; challenge encompassed identifying multiple vulnerabilities, including FTP access, web application flaws, and privilege escalation, ultimately leading to obtaining the root flag.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is: &lt;code&gt;ABOH23{wh47_4_cr4pp7_s3rv1c3_c3nt3r}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This writeup demonstrates the process of identifying and exploiting various vulnerabilities to gain root access in the &amp;ldquo;DigiDoc&amp;rdquo; CTF challenge. For any further inquiries or clarifications, please feel free to ask.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>FurElise</title>
        <link>https://qiaonpc.github.io/post/furelise/</link>
        <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/furelise/</guid>
        <description>&lt;h1 id=&#34;furelise---ctf-challenge-writeup&#34;&gt;FurElise - CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: FurElise&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;FurElise&amp;rdquo; CTF challenge is to decode a hidden flag concealed within a PowerShell script by following a series of deobfuscation and decoding steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To solve the &amp;ldquo;FurElise&amp;rdquo; challenge and retrieve the flag, I executed the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;File Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upon inspecting the provided file, it was evident that it is a PowerShell script containing obfuscated code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/furelise/challenge.png&#34;
	width=&#34;700&#34;
	height=&#34;797&#34;
	srcset=&#34;https://qiaonpc.github.io/post/furelise/challenge_hu52c94fe41ed6b2850a143aab34f47bba_88923_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/challenge_hu52c94fe41ed6b2850a143aab34f47bba_88923_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Challenge&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;210px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deobfuscation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Drawing inspiration from problem-solving approaches by John Hammond, I initiated the deobfuscation process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The initial step involved removing the &lt;code&gt;&amp;amp;&lt;/code&gt; present throughout the script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/furelise/removed%20and.png&#34;
	width=&#34;469&#34;
	height=&#34;150&#34;
	srcset=&#34;https://qiaonpc.github.io/post/furelise/removed%20and_hufd6c2d8b792b1e2a51a3dcb160d7ba04_24607_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/removed%20and_hufd6c2d8b792b1e2a51a3dcb160d7ba04_24607_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Removed &amp;&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;750px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Removing Unnecessary Lines&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Further simplification of the script was performed by eliminating redundant lines, notably lines containing &lt;code&gt;&#39;&#39;&#39;&#39;&#39;&#39;FürElise&#39;&#39;&#39;&#39;&#39;&#39;FürElise&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This step helped in revealing clearer, relevant content within the script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/furelise/removed%20everything.png&#34;
	width=&#34;866&#34;
	height=&#34;720&#34;
	srcset=&#34;https://qiaonpc.github.io/post/furelise/removed%20everything_hue16cb2addcb830c6f1878e65f08fbb39_121978_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/removed%20everything_hue16cb2addcb830c6f1878e65f08fbb39_121978_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Removed Everything&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;288px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identifying Clues&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Within the revised script, two links were discovered, which contained crucial elements of the flag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first link provided the initial part of the flag.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/furelise/flag%20part%201.png&#34;
	width=&#34;272&#34;
	height=&#34;69&#34;
	srcset=&#34;https://qiaonpc.github.io/post/furelise/flag%20part%201_hu73ac2e76d6cb3e0360beb90ba3cf4664_4379_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/flag%20part%201_hu73ac2e76d6cb3e0360beb90ba3cf4664_4379_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag Part 1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;394&#34;
		data-flex-basis=&#34;946px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyzing the Second Link&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The second link presented another PowerShell script. However, caution was exercised against executing it directly on a host machine due to safety concerns.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/furelise/1%20powershell.png&#34;
	width=&#34;1911&#34;
	height=&#34;946&#34;
	srcset=&#34;https://qiaonpc.github.io/post/furelise/1%20powershell_hu2ee3e47d86d7275063b3f6a1f17ca00c_708094_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/1%20powershell_hu2ee3e47d86d7275063b3f6a1f17ca00c_708094_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Powershell Part 1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;202&#34;
		data-flex-basis=&#34;484px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decoding Base64&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The second PowerShell script was decoded from Base64, revealing additional script content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To understand its functionality, portions of the script were cautiously executed one by one, avoiding potential risks and aiming to decode it progressively.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/furelise/decode%20base64.png&#34;
	width=&#34;1697&#34;
	height=&#34;867&#34;
	srcset=&#34;https://qiaonpc.github.io/post/furelise/decode%20base64_hud2c8eaf53f089c2d161c4de5967dc0ff_161759_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/decode%20base64_hud2c8eaf53f089c2d161c4de5967dc0ff_161759_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Decode Base64&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;469px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/furelise/2%20powershell.png&#34;
	width=&#34;1433&#34;
	height=&#34;578&#34;
	srcset=&#34;https://qiaonpc.github.io/post/furelise/2%20powershell_hu33729ff4a8293c68e620114a11f43c78_84265_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/2%20powershell_hu33729ff4a8293c68e620114a11f43c78_84265_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Powershell Part 2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;247&#34;
		data-flex-basis=&#34;595px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Locating Hidden Information&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;While decoding the PowerShell script, a link was discovered halfway through the process, leading to the final part of the flag.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/furelise/decoding.png&#34;
	width=&#34;1677&#34;
	height=&#34;791&#34;
	srcset=&#34;https://qiaonpc.github.io/post/furelise/decoding_huff680a42f1afe527ef62a146ceb31062_161855_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/decoding_huff680a42f1afe527ef62a146ceb31062_161855_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Decoding&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;212&#34;
		data-flex-basis=&#34;508px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Final Flag Retrieval&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Navigating to the obtained link revealed the last segment of the flag, completing the puzzle.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/furelise/flag%20part%202.png&#34;
	width=&#34;825&#34;
	height=&#34;127&#34;
	srcset=&#34;https://qiaonpc.github.io/post/furelise/flag%20part%202_hu1146f4119bae5f434e11a3f79a1674d0_7850_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/flag%20part%202_hu1146f4119bae5f434e11a3f79a1674d0_7850_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag Part 2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;649&#34;
		data-flex-basis=&#34;1559px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The resolution of the &amp;ldquo;FurElise&amp;rdquo; challenge involved systematic deobfuscation, cautious decoding, and progressive script execution to unveil hidden elements and retrieve the flag.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is: &lt;code&gt;ABOH23{d!ff1cU17_s0Ng_FROm_hEaRtBrE4K}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This writeup serves as a demonstration of decoding techniques used to extract the hidden flag within the &amp;ldquo;FurElise&amp;rdquo; CTF challenge. Should you require further explanation or have additional queries, please feel free to ask.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>May The Force Be With You</title>
        <link>https://qiaonpc.github.io/post/may-the-force-be-with-you/</link>
        <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/may-the-force-be-with-you/</guid>
        <description>&lt;h1 id=&#34;may-the-force-be-with-you---ctf-challenge-writeup&#34;&gt;May The Force Be With You - CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: May The Force Be With You&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;May The Force Be With You&amp;rdquo; CTF challenge is to decipher a hidden flag encoded within a given script using reverse engineering techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To solve the &amp;ldquo;May The Force Be With You&amp;rdquo; challenge and obtain the flag, I followed the below steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Understanding the Challenge Objective&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The challenge required decoding a hidden flag from a provided script using reverse engineering methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Approach&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Due to personal constraints and limited expertise in mathematics, I opted to use HackerGPT, a tool specialized in reversing scripts, to decode the hidden flag.&lt;/li&gt;
&lt;li&gt;Though using automated tools can be considered disrespectful to the challenge creator, it was necessary due to my limitations and time constraints during the competition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Script Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Utilizing the script below, I executed it to unveil the hidden flag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unfortunately, due to my lack of proficiency in deciphering the script manually, I had to rely on HackerGPT to assist me in understanding the logic and unveiling the flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Crypto.Cipher&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Crypto.Util.Padding&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unpad&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Crypto.Protocol.KDF&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PBKDF2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;textwrap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decrypt_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypted_file_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypted_file_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;ciphertext_iv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertext_iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertext_iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;passwd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;textwrap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dedent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;salt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;salt123&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PBKDF2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;salt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dkLen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MODE_CBC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unpad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ni5h2h?Yrq8Do?n+|6a;pKbZkv%}O~tV&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;encrypted_file_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./flag.txt.enc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decrypt_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypted_file_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Extraction&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upon executing the script, the decoded flag was revealed as &lt;code&gt;ABOH23{A3S_Rul35_tH3_F0rc3}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The resolution of this challenge involved leveraging reverse engineering tools like HackerGPT to decode the hidden flag from the provided script. While I regret not being able to decode it manually due to personal limitations, I acknowledge the importance of understanding the underlying concepts for future challenges.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is: &lt;code&gt;ABOH23{A3S_Rul35_tH3_F0rc3}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This writeup serves as a demonstration of utilizing reverse engineering tools to decode the hidden flag in the &amp;ldquo;May The Force Be With You&amp;rdquo; CTF challenge. If you have any further inquiries or need additional clarification, please feel free to ask.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Small Sage</title>
        <link>https://qiaonpc.github.io/post/small-sage/</link>
        <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/small-sage/</guid>
        <description>&lt;h1 id=&#34;small-sage---ctf-challenge-writeup&#34;&gt;Small Sage - CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Small Sage&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;Small Sage&amp;rdquo; CTF challenge is to decipher a flag that has been encrypted using RSA encryption techniques, focusing on elements like &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, and &lt;code&gt;e&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully solve the &amp;ldquo;Small Sage&amp;rdquo; challenge and retrieve the flag, I followed these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upon inspecting the provided &amp;ldquo;Small Sage&amp;rdquo; script, it was evident that it resembled RSA encryption, as it contained elements like &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, and &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additionally, the &lt;code&gt;out.txt&lt;/code&gt; file contained variables &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, and &lt;code&gt;e&lt;/code&gt;, further indicating an RSA encryption problem.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/small-sage/nce.png&#34;
	width=&#34;1311&#34;
	height=&#34;328&#34;
	srcset=&#34;https://qiaonpc.github.io/post/small-sage/nce_hu9d0504293500d1a468b47f426a1e08d7_229909_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/small-sage/nce_hu9d0504293500d1a468b47f426a1e08d7_229909_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;NCE&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;399&#34;
		data-flex-basis=&#34;959px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/small-sage/npq.png&#34;
	width=&#34;863&#34;
	height=&#34;438&#34;
	srcset=&#34;https://qiaonpc.github.io/post/small-sage/npq_hu8c6949fe70ed8a9f3dee81b31d8dbd8e_136125_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/small-sage/npq_hu8c6949fe70ed8a9f3dee81b31d8dbd8e_136125_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;NPQ&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;472px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identifying RSA Encryption&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recognizing the RSA encryption components (&lt;code&gt;n&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;), it was clear that this challenge was centered around RSA encryption and decryption.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Noticing the hint with the term &amp;ldquo;small&amp;rdquo; in the challenge name, I hypothesized that it might involve a small &lt;code&gt;e&lt;/code&gt; problem in RSA encryption.&lt;/li&gt;
&lt;li&gt;I proceeded to use my typucal script tailored for solving RSA problems with small &lt;code&gt;e&lt;/code&gt; values.&lt;/li&gt;
&lt;li&gt;You can find the script in solve.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Retrieval&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Executing the script designed to handle RSA problems with small &lt;code&gt;e&lt;/code&gt; values successfully decrypted the encrypted data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The deciphered message revealed the flag: &lt;code&gt;ABOH23{rocky0ubrr!}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/small-sage/flag.png&#34;
	width=&#34;760&#34;
	height=&#34;136&#34;
	srcset=&#34;https://qiaonpc.github.io/post/small-sage/flag_hu6c76f6ca70f5b7cba887c2eae295a926_19940_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/small-sage/flag_hu6c76f6ca70f5b7cba887c2eae295a926_19940_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;558&#34;
		data-flex-basis=&#34;1341px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gmpy2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;28161864534081810305839467239167774824180698442991360538137338315924601027539535041400325106523598882827263670671140966855944057889837783992080270143420119844958855679728614805589197733901663249220100214524859116110365815705699485099116276988534253521580223115836247118089590595980346272692504104976860138248959015932618979651746563030552421216691329694961700647328850519321776696007920491542096366696034760558758393690945535590284240994579352805664119144134863786797266463118165575746650538843159490903440899114347091988968775074879305009340592457617508211781199057573663246634610497629416920053419998682083393087987&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;762355112596222421309825166446067448121886093544068458795156044255325081286699861240486430215279901835675723822721970949307265398924333599178805487220325668055743991293697494477706560130827449405781098938392283482757063955895656607033694619449376928780098570577226994800731087835230561205556094959240210387000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_true_root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gmpy2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iroot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_true_root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Found, Iteration = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Flag: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bytearray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromhex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The resolution of the &amp;ldquo;Small Sage&amp;rdquo; challenge involved recognizing RSA encryption elements and leveraging a specialized script to handle the small &lt;code&gt;e&lt;/code&gt; problem, resulting in the decryption of the encrypted data to obtain the flag.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is: &lt;code&gt;ABOH23{rocky0ubrr!}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This writeup demonstrates the process of identifying and decrypting an RSA-encrypted flag in the &amp;ldquo;Small Sage&amp;rdquo; CTF challenge. Should you require further clarification or have additional questions, please feel free to ask.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Threat Hunting Challenge 1</title>
        <link>https://qiaonpc.github.io/post/threat-hunting-challenge-1/</link>
        <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/threat-hunting-challenge-1/</guid>
        <description>&lt;h1 id=&#34;threat-hunting-challenge-1---ctf-challenge-writeup&#34;&gt;Threat Hunting: Challenge 1 - CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Threat Hunting: Challenge 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;Threat Hunting: Challenge 1&amp;rdquo; CTF challenge is to investigate a ransomware-like attack scenario within a provided VM and identify the executable responsible for the encryption.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Threat Hunting: Challenge 1&amp;rdquo; challenge, I followed these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Challenge Context&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This challenge is part of a series in the threat hunting category and involves a provided VM named BOH_TH_2023. The VM needs to be extracted and loaded onto a virtualization platform like VMware or Oracle VirtualBox.&lt;/li&gt;
&lt;li&gt;It is recommended to solve this challenge before looking into Challenge 2 and Challenge 3&lt;/li&gt;
&lt;li&gt;However, you can solve Challenge 2 and Challenge 3 in any order&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial VM Inspection&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upon loading the VM, it became apparent that the files were encrypted, resembling a ransomware attack scenario. The challenge also directed us to identify the executable responsible for the encryption.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Therefore, it is safe to assumed that the ransomware executable has already been executed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-1/ransomware%20attack.png&#34;
	width=&#34;960&#34;
	height=&#34;603&#34;
	srcset=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-1/ransomware%20attack_huf2d4846ab62b7c55cc4f29abe0a68af8_51975_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-1/ransomware%20attack_huf2d4846ab62b7c55cc4f29abe0a68af8_51975_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Ransomware&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Utilizing Amcache and Shimcache&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Amcache and Shimcache are artifacts used in Windows systems to record executed executables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Amcache is a registry hive that records metadata and information about applications and programs executed on a Windows system. It provides a wealth of information about executed executables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Amcache is typically located in &lt;code&gt;C:\Windows\appcompat\Programs\Amcache.hve&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shimcache, another Windows artifact, also records information about executed programs but in a different format. However, in this challenge, the Shimcache files are intentionally corrupted.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcache.png&#34;
	width=&#34;1046&#34;
	height=&#34;190&#34;
	srcset=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcache_hu9ab704e260e68e51a80cd99f4a2ab227_11591_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcache_hu9ab704e260e68e51a80cd99f4a2ab227_11591_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Amcache&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;550&#34;
		data-flex-basis=&#34;1321px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Amcache Parsing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To extract and process Amcache data, I utilized the AmcacheParser tool available at &lt;a class=&#34;link&#34; href=&#34;https://ericzimmerman.github.io/#!index.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Eric Zimmerman&amp;rsquo;s website&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The Amcache data is typically stored in &lt;code&gt;C:\Windows\appcompat\Programs\Amcache.hve&lt;/code&gt;. I searched for this file and utilized AmcacheParser to process it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Processing Amcache Data&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Running AmcacheParser generated multiple CSV files, which I exported for easier analysis. These files can be explored using applications like Timeline Explorer or by downloading them from &lt;a class=&#34;link&#34; href=&#34;https://ericzimmerman.github.io/#!index.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Eric Zimmerman&amp;rsquo;s website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcacheparser.png&#34;
	width=&#34;1500&#34;
	height=&#34;806&#34;
	srcset=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcacheparser_hubf85dfcffaee4596696d5efb4f0aef14_143237_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcacheparser_hubf85dfcffaee4596696d5efb4f0aef14_143237_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;AmcacheParser&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Finding Suspicious Activity&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By examining the generated CSV files, I eventually identified something suspicious among the data, indicating the executable responsible for the encryption.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-1/sus.png&#34;
	width=&#34;810&#34;
	height=&#34;152&#34;
	srcset=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-1/sus_hu825c2b5bc3321b00e7ad01e7abf7c299_48577_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-1/sus_hu825c2b5bc3321b00e7ad01e7abf7c299_48577_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Suspicious&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;532&#34;
		data-flex-basis=&#34;1278px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The identified executable responsible for the encryption is: &lt;code&gt;ABOH{Mcqqic24UJyU40JKdja0A.exe}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The resolution of the &amp;ldquo;Threat Hunting: Challenge 1&amp;rdquo; involved extracting Amcache data from the provided VM, utilizing AmcacheParser to process the data, and investigating the executables to identify the suspicious file responsible for the encryption.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is: &lt;code&gt;ABOH{Mcqqic24UJyU40JKdja0A.exe}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This writeup demonstrates the process of investigating a ransomware-like attack scenario using Amcache parsing techniques in the &amp;ldquo;Threat Hunting: Challenge 1&amp;rdquo; CTF challenge. For further queries or clarifications, feel free to inquire.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Threat Hunting Challenge 2</title>
        <link>https://qiaonpc.github.io/post/threat-hunting-challenge-2/</link>
        <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/threat-hunting-challenge-2/</guid>
        <description>&lt;h1 id=&#34;threat-hunting-challenge-2---ctf-challenge-writeup&#34;&gt;Threat Hunting: Challenge 2 - CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Threat Hunting: Challenge 2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;Threat Hunting: Challenge 2&amp;rdquo; CTF challenge is to identify the SHA256 hash value of the executable responsible for exfiltrating data within a given context.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully tackle the &amp;ldquo;Threat Hunting: Challenge 2&amp;rdquo; challenge, I followed these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Challenge Context&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This challenge is part of a series in the threat hunting category and requires identifying the SHA256 hash value of the executable responsible for data exfiltration.&lt;/li&gt;
&lt;li&gt;It is recommended to solve Challenge 1 before looking into Challenge 2 and Challenge 3&lt;/li&gt;
&lt;li&gt;However, you can solve Challenge 2 and Challenge 3 in any order&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identifying Suspicious Executables&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On further inspection from the first challenge, I discovered a total three suspicious files including the one from the first challenge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I dumped the two executables onto VirusTotal and HybridAnalysis, whilst analysed the powershell script myself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The powershell script showed symptoms of reading files and encrypting it and I am suspecting that this is the file they are looking for, but not 100% certain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-2/three%20executable.png&#34;
	width=&#34;774&#34;
	height=&#34;214&#34;
	srcset=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-2/three%20executable_hua8e7bf6b9f574b0427628f2dd97b8fd1_76975_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-2/three%20executable_hua8e7bf6b9f574b0427628f2dd97b8fd1_76975_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Executables&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;361&#34;
		data-flex-basis=&#34;868px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-2/powershell%20script.png&#34;
	width=&#34;1674&#34;
	height=&#34;768&#34;
	srcset=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-2/powershell%20script_hu6d9613f4c54035822c78fbacb4d15890_51033_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-2/powershell%20script_hu6d9613f4c54035822c78fbacb4d15890_51033_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Powershell Script&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Approach to Finding SHA256 Hash&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A common misconception might lead one to use &lt;code&gt;Get-FileHash&lt;/code&gt; to find the hash value. However, in challenges like these, this method may not yield the expected results.&lt;/li&gt;
&lt;li&gt;This difference in hash values can be due to various factors and is further explained in this &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/29946221/hash-value-md5-and-sha256-of-file-is-coming-different-when-file-is-from-system32&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stack Overflow thread&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using Hasher Tool&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To accurately acquire the SHA256 hash value of the suspicious files, I utilized the Hasher tool available at &lt;a class=&#34;link&#34; href=&#34;https://ericzimmerman.github.io/#!index.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Eric Zimmerman&amp;rsquo;s website&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Determining Executable&amp;rsquo;s SHA256 Hash&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since there were only three suspicious files discovered, and I am not so sure about my discovery, I will be calculating the SHA256 hash value for each of them using the Hasher tool and submitting as a flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Final Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Among the calculated SHA256 hash values, one matched the expected format of the flag: &lt;code&gt;ABOH{hash_value}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At the time of writing this writeup, I have forgotten which one was the flag. Im sorry.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-2/sha256%20value.png&#34;
	width=&#34;1165&#34;
	height=&#34;235&#34;
	srcset=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-2/sha256%20value_hufc30c8e24cba1206f3fb8da856b7e08e_82116_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-2/sha256%20value_hufc30c8e24cba1206f3fb8da856b7e08e_82116_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Hash Value&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;495&#34;
		data-flex-basis=&#34;1189px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The resolution of the &amp;ldquo;Threat Hunting: Challenge 2&amp;rdquo; involved identifying potentially malicious executables and determining their SHA256 hash values using the Hasher tool to extract the flag.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is: &lt;code&gt;ABOH{hash_value}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This writeup illustrates the process of identifying the SHA256 hash value of a potentially malicious executable in the &amp;ldquo;Threat Hunting: Challenge 2&amp;rdquo; CTF challenge. For further inquiries or clarifications, feel free to ask.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Threat Hunting Challenge 3</title>
        <link>https://qiaonpc.github.io/post/threat-hunting-challenge-3/</link>
        <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/threat-hunting-challenge-3/</guid>
        <description>&lt;h1 id=&#34;threat-hunting-challenge-3---ctf-challenge-writeup&#34;&gt;Threat Hunting: Challenge 3 - CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Threat Hunting: Challenge 3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The objective of the &amp;ldquo;Threat Hunting: Challenge 3&amp;rdquo; CTF challenge is to identify the significant indicator related to a potentially malicious executable based on its behavior observed through external connections.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully solve the &amp;ldquo;Threat Hunting: Challenge 3&amp;rdquo; challenge, I proceeded with the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Context from Previous Challenge&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continuing from the previous challenge, I conducted further analysis on the executables by uploading them to security analysis platforms like VirusTotal and HybridAnalysis for comprehensive analysis.&lt;/li&gt;
&lt;li&gt;It is recommended to solve Challenge 1 before looking into Challenge 3 and Challenge 3&lt;/li&gt;
&lt;li&gt;However, you can solve Challenge 3 and Challenge 3 in any order&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analysis Results&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upon reviewing the analysis results from the previous challenge (VirusTotal and HybridAnalysis), I observed that both executables made external connections to IP addresses. However, one particular connection stood out among the rest.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-3/not%20sus.png&#34;
	width=&#34;790&#34;
	height=&#34;238&#34;
	srcset=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-3/not%20sus_hu2d234b8a00b92d1ae34d4d4e3a7ca2cf_35013_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-3/not%20sus_hu2d234b8a00b92d1ae34d4d4e3a7ca2cf_35013_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Not Sus&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;331&#34;
		data-flex-basis=&#34;796px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-3/sus.png&#34;
	width=&#34;683&#34;
	height=&#34;273&#34;
	srcset=&#34;https://qiaonpc.github.io/post/threat-hunting-challenge-3/sus_hu3ceebf911f963a2061961d59ed7e16ab_26679_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-3/sus_hu3ceebf911f963a2061961d59ed7e16ab_26679_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Sus&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;250&#34;
		data-flex-basis=&#34;600px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Identification&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After careful observation and analysis, I identified the standout indicator related to a potentially malicious executable, which is the URL or IP address:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ABOH{http://146.190.89.115:8080/YPAPJDoGD3aIQlFix11ZA.php}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The resolution of the &amp;ldquo;Threat Hunting: Challenge 3&amp;rdquo; involved analyzing the behavior of potentially malicious executables and identifying the significant external connection, aiding in the discovery of the flag.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is: &lt;code&gt;ABOH{http://146.190.89.115:8080/YPAPJDoGD3aIQlFix11ZA.php}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This writeup demonstrates the process of analyzing executable behavior to identify significant indicators of potential malicious activity in the &amp;ldquo;Threat Hunting: Challenge 3&amp;rdquo; CTF challenge. For any further queries or clarifications, please feel free to inquire.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Checkout my socials 1</title>
        <link>https://qiaonpc.github.io/post/checkout-my-socials-1/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/checkout-my-socials-1/</guid>
        <description>&lt;h1 id=&#34;checkout-my-socials-1---ctf-challenge-writeup&#34;&gt;Checkout my socials 1 - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Checkout my socials 1&lt;br&gt;
Points: 50&lt;br&gt;
Category: OSINT (Open-Source Intelligence)&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Checkout my socials 1&amp;rdquo; challenge is to gather information from publicly available sources (OSINT) to identify the username. You will be provided with a link, and your task is to find the username associated with it.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Checkout my socials 1&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Access the Provided Link&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click on the link provided in the challenge: &lt;a class=&#34;link&#34; href=&#34;https://imgur.com/xa4jBRt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://imgur.com/xa4jBRt&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Examine the Content&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upon visiting the link, you will be directed to a web page or image on Imgur.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identify the Username&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Look for any visible information, such as a username, on the web page or image.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Identification&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The username you find on the web page or image is the flag for this challenge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you identify the username, you will uncover the hidden flag. The flag follows the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps and accessing the provided link, you will successfully retrieve the flag through OSINT techniques.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &amp;ldquo;Checkout my socials 1&amp;rdquo; challenge, your task is to gather information from the provided link and identify the associated username. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Checkout my socials 3</title>
        <link>https://qiaonpc.github.io/post/checkout-my-socials-3/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/checkout-my-socials-3/</guid>
        <description>&lt;h1 id=&#34;checkout-my-socials-3---ctf-challenge-writeup&#34;&gt;Checkout my socials 3 - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Checkout my socials 3&lt;br&gt;
Points: 50&lt;br&gt;
Category: OSINT (Open-Source Intelligence)&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Checkout my socials 3&amp;rdquo; challenge is to gather information from publicly available sources (OSINT) to uncover the hidden flag. The challenge provides hints related to birds, and your task is to identify the Twitter or other social media account associated with the user.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Checkout my socials 3&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyze the Challenge Hint&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The challenge hints at birds, which implies you should look for a social media account related to birds or something bird-related.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Search for Social Media Accounts&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start by searching for Twitter or other social media accounts associated with birds based on the hint.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use Quipquip for the Cipher&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The challenge likely involves deciphering a cipher. To solve it, use a tool like Quipquip.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Identification&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once you find the social media account and decipher the cipher, you will identify the flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you follow the hints and decode the message, you will uncover the hidden flag. The flag follows the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps and using OSINT techniques along with Quipquip, you will successfully retrieve the flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &amp;ldquo;Checkout my socials 3&amp;rdquo; challenge, your task is to leverage the provided hint and OSINT techniques to find the relevant social media account and decode the flag. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Cryptic Raven</title>
        <link>https://qiaonpc.github.io/post/cryptic-raven/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/cryptic-raven/</guid>
        <description>&lt;h1 id=&#34;cryptic-raven---ctf-challenge-writeup&#34;&gt;Cryptic Raven - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Cryptic Raven&lt;br&gt;
Points: 100&lt;br&gt;
Category: Cryptography&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the Cryptic Raven challenge is to decrypt a given message, which is encoded using an undisclosed encryption technique. Your task is to decipher the message and reveal the hidden flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the Cryptic Raven challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Message Deciphering&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Begin by examining the provided message. The challenge does not disclose the specific encryption technique used.
&lt;img src=&#34;https://qiaonpc.github.io/Challenge.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Encrypted Text&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Caesar Cipher Brute Force&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given the lack of information about the encryption method, you can try a brute force approach, specifically the Caesar cipher brute force.&lt;/li&gt;
&lt;li&gt;The Caesar cipher is a simple and widely used substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Brute Force Decryption&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement a brute force decryption approach by trying all possible shifts within the Caesar cipher.&lt;/li&gt;
&lt;li&gt;Continue shifting the letters and evaluating the results until you find a meaningful message.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After trying various shift values, you will eventually discover the flag concealed within the decrypted message.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By successfully using the Caesar cipher brute force method, you&amp;rsquo;ll unveil the hidden flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the Cryptic Raven challenge, your cryptography skills are tested as you employ a brute force approach to decipher the message and reveal the flag. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Getmecorrect</title>
        <link>https://qiaonpc.github.io/post/getmecorrect/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/getmecorrect/</guid>
        <description>&lt;h1 id=&#34;getmecorrect---ctf-challenge-writeup&#34;&gt;Getmecorrect - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Getmecorrect&lt;br&gt;
Points: 150&lt;br&gt;
Category: Reverse Engineering&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Getmecorrect&amp;rdquo; challenge is to reverse engineer an APK file to uncover a hidden flag. The flag is divided into four parts, and you need to understand how these parts are constructed. However, a key part of the flag is implemented using native code, which is not available in the APK&amp;rsquo;s source code. Your task is to find a way to retrieve the missing part of the flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Getmecorrect&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyze the APK File&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start by opening and examining the APK file using tools like jadx-gui. Look for clues that reveal how the flag is constructed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Part 3 and Native Code&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;While analyzing the APK, you will identify that the third part of the flag relies on the &lt;code&gt;getNativeFlag()&lt;/code&gt; function. However, this function&amp;rsquo;s implementation is missing from the APK&amp;rsquo;s source code, and it is marked as &amp;ldquo;native.&amp;rdquo;
&lt;img src=&#34;https://qiaonpc.github.io/post/getmecorrect/Construct%20Flag.png&#34;
	width=&#34;1377&#34;
	height=&#34;523&#34;
	srcset=&#34;https://qiaonpc.github.io/post/getmecorrect/Construct%20Flag_hu575f026a9d1ba17783e0ad9f68de7d71_104924_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/getmecorrect/Construct%20Flag_hu575f026a9d1ba17783e0ad9f68de7d71_104924_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Construct Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;263&#34;
		data-flex-basis=&#34;631px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Understanding Native Code&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The keyword &amp;ldquo;native&amp;rdquo; in the function declaration indicates that the function is implemented using native code, often written in a different programming language like C or C++. This means the actual implementation of &lt;code&gt;getNativeFlagPart&lt;/code&gt; is not available in the provided APK source code.
&lt;img src=&#34;https://qiaonpc.github.io/post/getmecorrect/Native%20Flag.png&#34;
	width=&#34;470&#34;
	height=&#34;69&#34;
	srcset=&#34;https://qiaonpc.github.io/post/getmecorrect/Native%20Flag_hubd60ff486ce749f754de6321deaa2bf0_6312_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/getmecorrect/Native%20Flag_hubd60ff486ce749f754de6321deaa2bf0_6312_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;getNativeFlag() definition&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;681&#34;
		data-flex-basis=&#34;1634px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reverse Engineering Native Code&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To retrieve the missing part of the flag, you need to reverse engineer the native code. Begin by converting the &lt;code&gt;dynamic.apk&lt;/code&gt; to &lt;code&gt;dynamic.zip&lt;/code&gt;, and then unzip the file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Examine the Lib Folder&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to the &lt;code&gt;lib&lt;/code&gt; folder, where you will find different architectures. Choose the one you are most comfortable with. In this case, the &lt;code&gt;x86&lt;/code&gt; architecture is used for analysis.
&lt;img src=&#34;https://qiaonpc.github.io/post/getmecorrect/lib.png&#34;
	width=&#34;1157&#34;
	height=&#34;334&#34;
	srcset=&#34;https://qiaonpc.github.io/post/getmecorrect/lib_hu1cb0493450aaae343ce82264b9d2b68e_96707_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/getmecorrect/lib_hu1cb0493450aaae343ce82264b9d2b68e_96707_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;lib Folder&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;346&#34;
		data-flex-basis=&#34;831px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ghidra Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Within Ghidra, look for a function with a name that resembles the naming convention used throughout &lt;code&gt;dynamic.apk&lt;/code&gt;. This function will likely contain the missing part of the flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Retrieve the Missing Flag Part&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By examining the code in Ghidra, you can identify the third part of the flag. This part is not encrypted or hidden and is directly accessible in the function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you combine the parts of the flag revealed during your analysis, you will uncover the complete hidden flag. The flag follows the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps, you will successfully reverse engineer the APK and retrieve the missing part of the flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Getmecorrect&amp;rdquo; challenge, you need to reverse engineer the APK to construct the flag correctly. Understanding native code and reverse engineering are crucial for solving this challenge. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Harmonic Secrets</title>
        <link>https://qiaonpc.github.io/post/harmonic-secrets/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/harmonic-secrets/</guid>
        <description>&lt;h1 id=&#34;harmonic-secrets---ctf-challenge-writeup&#34;&gt;Harmonic Secrets - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Harmonic Secrets&lt;br&gt;
Points: 100&lt;br&gt;
Category: Cryptography&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;My objective in the Harmonic Secrets challenge was to decrypt a given ciphertext using the provided key, which I suspected to be a Vigenère cipher. My task was to apply the key and reveal the hidden flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the Harmonic Secrets challenge, I followed these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Key Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I began by examining the provided key. Based on the challenge information, I suspected that it was a Vigenère cipher key.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Vigenère Cipher Decryption&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I applied the Vigenère decryption process using the provided key to decipher the given ciphertext.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After successfully decrypting the ciphertext with the Vigenère key, I revealed the hidden flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these steps and applying the Vigenère cipher decryption, I uncovered the flag.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the Harmonic Secrets challenge, my cryptography skills came into play as I decrypted the Vigenère-encrypted message using the provided key to unveil the flag. It was a satisfying experience. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Intruding the Hidden Society</title>
        <link>https://qiaonpc.github.io/post/intruding-the-hidden-society/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/intruding-the-hidden-society/</guid>
        <description>&lt;h1 id=&#34;intruding-the-hidden-society---ctf-challenge-writeup&#34;&gt;Intruding the Hidden Society - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Intruding the Hidden Society&lt;br&gt;
Points: 200&lt;br&gt;
Category: Forensics&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Intruding the Hidden Society&amp;rdquo; challenge is to extract hidden information from the provided pcap file and uncover the flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To solve the &amp;ldquo;Intruding the Hidden Society&amp;rdquo; challenge, I followed these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identified Patterns in DNS Packets&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upon analyzing the pcap file, I noticed that a significant portion of the packets were DNS (Domain Name System) packets.&lt;/li&gt;
&lt;li&gt;I started by filtering and analyzing these DNS packets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pattern Identification&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pay attention to the DNS packets with base64-like encodings.&lt;/li&gt;
&lt;li&gt;These packets had accompanying numbers, indicating an order for reconstruction.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Packet Extraction&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The goal was to extract and reconstruct the base64-like encoded data. However, with more than 10,000 packets, manual extraction would be impractical.&lt;/li&gt;
&lt;li&gt;I used the &amp;ldquo;tshark&amp;rdquo; command-line tool to extract relevant packets. The following query is an example of how I extracted packets related to the challenge:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tshark -nr hiddensociety.pcap -Y &amp;#39;(ip.dst == 8.8.8.8) &amp;amp;&amp;amp; (dns.qry.name contains &amp;#34;challange.petronasgraduate.ctfd.io&amp;#34;)&amp;#39; &amp;gt; output.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;The output of the query was saved in the &amp;ldquo;output.txt&amp;rdquo; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data Extraction and Reconstruction&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I created a Python script to process the &amp;ldquo;output.txt&amp;rdquo; file and extract the base64-like encoded data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The extracted data was reconstructed and written into a separate file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;base64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;base64_reconstructed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;output.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;readlines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;extract_number_and_base64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.challange.petronasgraduate.ctfd.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;extract_base64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extract_number_and_base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;base64_reconstructed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extract_base64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b64decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base64_reconstructed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identified the Data Type&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using the &lt;code&gt;file&lt;/code&gt; command to determine the type of data contained in the reconstructed file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Retrieval&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reconstructed base64 is an image file.&lt;/li&gt;
&lt;li&gt;Open and view the image&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these steps, I was able to successfully uncover the hidden flag within the pcap file and complete the &amp;ldquo;Intruding the Hidden Society&amp;rdquo; challenge.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Intruding the Hidden Society&amp;rdquo; challenge, my goal was to decode and reconstruct base64-like encoded data found in DNS packets within a pcap file and reveal the flag concealed within the data.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>m3m0irs</title>
        <link>https://qiaonpc.github.io/post/m3m0irs/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/m3m0irs/</guid>
        <description>&lt;h1 id=&#34;m3m0irs---ctf-challenge-writeup&#34;&gt;m3m0irs - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: m3m0irs&lt;br&gt;
Points: 50&lt;br&gt;
Category: Memory Forensics&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the m3m0irs challenge is to perform memory forensics on a memory dump file to uncover suspicious activity. Your task is to analyze the memory dump to identify the software that should not be running and reveal the hidden flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the m3m0irs challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Memory Dump Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In any memory forensics challenge, the first step is to determine the architecture of the system. You can achieve this using the &lt;code&gt;volatility&lt;/code&gt; tool with the command: &lt;code&gt;volatility -f &amp;lt;memory dump&amp;gt; imageinfo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;imageinfo&lt;/code&gt; command will provide suggested architectures based on the memory dump&amp;rsquo;s analysis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Architecture Identification&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try each of the suggested architectures until you find one that works for your analysis. You can use the following command to specify the architecture: &lt;code&gt;volatility -f &amp;lt;memory dump&amp;gt; --profile=&amp;lt;architecture&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identifying Suspicious Software&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main objective is to identify software that shouldn&amp;rsquo;t be running. You can often find this information in the process lists of the memory dump.&lt;/li&gt;
&lt;li&gt;There are various ways to find processes in a memory dump, such as &lt;code&gt;pstree&lt;/code&gt;, &lt;code&gt;pslist&lt;/code&gt;, &lt;code&gt;psscan&lt;/code&gt; etc. &lt;code&gt;pstree&lt;/code&gt;&amp;quot; is a favorite among many analysts because it presents processes in a hierarchical manner, allowing you to easily trace parent and child processes.&lt;/li&gt;
&lt;li&gt;You can identify suspicious software based on the processes and their relationships in the tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyzing with &amp;ldquo;pstree&amp;rdquo;&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the following command to generate a &lt;code&gt;pstree&lt;/code&gt; analysis and save it to a file for reference: &lt;code&gt;volatility -f &amp;lt;memory dump&amp;gt; --profile=&amp;lt;architecture&amp;gt; pstree &amp;gt; pstree.txt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Saving the output to a file ensures that you can revisit the analysis without repeating the same steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;During your analysis, you may find &lt;code&gt;Azureus&lt;/code&gt; to be suspicious as it spawned &lt;code&gt;AzureusTor&lt;/code&gt;. This is the software that shouldn&amp;rsquo;t be running.
&lt;img src=&#34;https://qiaonpc.github.io/post/m3m0irs/Sus.png&#34;
	width=&#34;1428&#34;
	height=&#34;231&#34;
	srcset=&#34;https://qiaonpc.github.io/post/m3m0irs/Sus_huea1b4f4ce711ad357bca8481cd25f078_163190_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/m3m0irs/Sus_huea1b4f4ce711ad357bca8481cd25f078_163190_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Azureus &amp; AzureusTor&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;618&#34;
		data-flex-basis=&#34;1483px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps and conducting memory forensics analysis, you will uncover the suspicious software and reveal the hidden flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the m3m0irs challenge, memory forensics skills are put to the test as you analyze a memory dump to identify the suspicious software that shouldn&amp;rsquo;t be running. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Marx&#39;s Melodic Memoir</title>
        <link>https://qiaonpc.github.io/post/marxs-melodic-memoir/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/marxs-melodic-memoir/</guid>
        <description>&lt;h1 id=&#34;marxs-melodic-memoir---ctf-challenge-writeup&#34;&gt;Marx&amp;rsquo;s Melodic Memoir - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Marx&amp;rsquo;s Melodic Memoir&lt;br&gt;
Points: 100&lt;br&gt;
Category: Cryptography&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Marx&amp;rsquo;s Melodic Memoir&amp;rdquo; challenge is to decode a given music sheet to reveal the hidden flag. Your task is to find a music sheet decoder, manually input every element from the picture, and decipher the flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Marx&amp;rsquo;s Melodic Memoir&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Music Sheet Provided&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are provided with a music sheet that contains encoded information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Find a Music Sheet Decoder&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your first step is to search for music sheet decoders or tools designed to interpret encoded musical notations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Manual Decoding&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using the music sheet decoder you find, manually input every element and symbol from the provided picture.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you decode the music sheet, you will uncover the hidden flag, which follows the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps and decoding the music sheet, you will successfully reveal the flag hidden within Marx&amp;rsquo;s Melodic Memoir.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Marx&amp;rsquo;s Melodic Memoir&amp;rdquo; challenge, your task is to decode the provided music sheet and unveil the hidden flag. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Puzzles of An Altered History</title>
        <link>https://qiaonpc.github.io/post/puzzles-of-an-altered-history/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/puzzles-of-an-altered-history/</guid>
        <description>&lt;h1 id=&#34;puzzles-of-an-altered-history---ctf-challenge-writeup&#34;&gt;Puzzles of An Altered History - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Puzzles of An Altered History&lt;br&gt;
Points: 150&lt;br&gt;
Category: Wireless Networking&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Puzzles of An Altered History&amp;rdquo; challenge is to crack the password for a given wireless network, which is stored in a provided pcap (packet capture) file. You will need to use a tool called &amp;ldquo;aircrack-ng&amp;rdquo; to successfully recover the network&amp;rsquo;s password.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To solve the &amp;ldquo;Puzzles of An Altered History&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Download and Open the pcap File&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Begin by downloading the provided pcap file, which contains the network traffic data.&lt;/li&gt;
&lt;li&gt;Open the pcap file using a network analysis tool like Wireshark.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cracking the Password&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the &amp;ldquo;aircrack-ng&amp;rdquo; tool to attempt to crack the wireless network&amp;rsquo;s password.&lt;/li&gt;
&lt;li&gt;The basic command structure for &amp;ldquo;aircrack-ng&amp;rdquo; is as follows:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aircrack-ng &amp;lt;pcap file&amp;gt; -w &amp;lt;wordlist&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;pcap file&amp;gt;&lt;/code&gt;: Replace this with the name of the pcap file you are analyzing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;wordlist&amp;gt;&lt;/code&gt;: Specify the path to a wordlist file that &amp;ldquo;aircrack-ng&amp;rdquo; will use to attempt password combinations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Wordlist Selection&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For the wordlist, you can use a common password dictionary like &amp;ldquo;rockyou.txt,&amp;rdquo; which is available in various locations. You should specify the full path to the wordlist file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Run aircrack-ng&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Execute the &amp;ldquo;aircrack-ng&amp;rdquo; command in your terminal, providing the pcap file and wordlist as arguments. For example:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aircrack-ng ctfwifi.cap -w /usr/share/wordlists/rockyou.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Password Recovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;aircrack-ng&amp;rdquo; will attempt to recover the password by testing combinations from the wordlist.&lt;/li&gt;
&lt;li&gt;When aircrack-ng successfully finds the correct password, it will display the password in the terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Retrieval&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cracked password will resemble the format specified in the challenge. Retrieve and present it as the flag to complete the challenge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following these steps and using &amp;ldquo;aircrack-ng,&amp;rdquo; you can successfully crack the password for the wireless network captured in the pcap file and obtain the flag.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Puzzles of An Altered History&amp;rdquo; challenge, your goal is to utilize network analysis tools to crack the wireless network&amp;rsquo;s password, revealing the flag upon successful recovery.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Reverseme</title>
        <link>https://qiaonpc.github.io/post/reverseme/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/reverseme/</guid>
        <description>&lt;h1 id=&#34;reverseme---ctf-challenge-writeup&#34;&gt;Reverseme - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Reverseme&lt;br&gt;
Points: 150&lt;br&gt;
Category: Reverse Engineering&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Reverseme&amp;rdquo; challenge is to reverse engineer an Android APK file and retrieve the hidden flag. You need to understand how APK files are structured, how strings are stored, and how resources are referenced in Android app development.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Reverseme&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyze the APK File&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start by examining the APK file using jadx-gui or a similar tool. You will need to navigate through the app&amp;rsquo;s code to find the flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Identification&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;During your analysis, you will come across a reference to the flag as &lt;code&gt;R.string.flag&lt;/code&gt;. This indicates that the flag is retrieved from the app&amp;rsquo;s string resources.
&lt;img src=&#34;https://qiaonpc.github.io/post/reverseme/r%20string.png&#34;
	width=&#34;1018&#34;
	height=&#34;431&#34;
	srcset=&#34;https://qiaonpc.github.io/post/reverseme/r%20string_hu4b8b27e34b33bfa87f019438e5d1fa74_74104_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/reverseme/r%20string_hu4b8b27e34b33bfa87f019438e5d1fa74_74104_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;R.String.Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;566px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accessing Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Android app development, the &lt;code&gt;R.string&lt;/code&gt; is a reference to a string resource defined in the app&amp;rsquo;s resources. An APK file contains all the resources and code needed to run an Android application.&lt;/li&gt;
&lt;li&gt;When you see &lt;code&gt;R.string.some_string&lt;/code&gt;, it refers to a string resource defined in the app&amp;rsquo;s &lt;code&gt;res/values/strings.xml&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strings.xml Examination&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to locate the &lt;code&gt;strings.xml&lt;/code&gt; file within the APK&amp;rsquo;s resources. Navigate to the Resources folder, then to &lt;code&gt;resources.arsc&lt;/code&gt;, and finally, to &lt;code&gt;res/values&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use the search function (&lt;code&gt;CTRL+F&lt;/code&gt;) to look for the &amp;ldquo;flag&amp;rdquo; string. This will allow you to find the flag in plain text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Retrieval&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By examining the content of the &lt;code&gt;strings.xml&lt;/code&gt; file, you can retrieve the hidden flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you extract and decipher the flag, you will reveal the complete hidden flag. The flag follows the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps, you will successfully reverse engineer the APK and uncover the hidden flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Reverseme&amp;rdquo; challenge, understanding how Android APK files store resources and references to string resources is crucial. By navigating the app&amp;rsquo;s code and examining the &lt;code&gt;strings.xml&lt;/code&gt; file, you can retrieve the flag and complete the challenge.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>STOP SPAMMING</title>
        <link>https://qiaonpc.github.io/post/stop-spamming/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/stop-spamming/</guid>
        <description>&lt;h1 id=&#34;stop-spamming---ctf-challenge-writeup&#34;&gt;STOP SPAMMING - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: STOP SPAMMING&lt;br&gt;
Points: 100&lt;br&gt;
Category: Miscellaneous&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the STOP SPAMMING challenge is to decode a provided spam message using a spam decoder tool. Your task is to utilize the tool to uncover the hidden flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the STOP SPAMMING challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spam Message Decoding&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Begin by examining the provided spam message. The challenge hints at using a spam decoder tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spam Decoder Tool&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This challenge simplifies the task by directing you to a specific spam decoder tool. You can use the following online tool to decode the spam message:
&lt;a class=&#34;link&#34; href=&#34;https://spammimic.com/decode.cgi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spam Decoder Tool&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By utilizing the provided tool, you will decode the spam message and reveal the hidden flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The STOP SPAMMING challenge, in this case, involves the straightforward use of a spam decoder tool to uncover the flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the STOP SPAMMING challenge, you utilize a spam decoder tool to decode the spam message and reveal the flag. It&amp;rsquo;s a quick and straightforward solution to the challenge. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Temporal Traffic Traces</title>
        <link>https://qiaonpc.github.io/post/temporal-traffic-traces/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/temporal-traffic-traces/</guid>
        <description>&lt;h1 id=&#34;temporal-traffic-traces---ctf-challenge-writeup&#34;&gt;Temporal Traffic Traces - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Temporal Traffic Traces&lt;br&gt;
Points: 100&lt;br&gt;
Category: Network Forensics&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Temporal Traffic Traces&amp;rdquo; challenge is to analyze a provided pcap file and extract the hidden flag. Your task is to investigate the protocol hierarchy, identify relevant data, and decode the flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Temporal Traffic Traces&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyze the PCAP File&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are given a pcap file, and the first thing to do is to analyze its contents.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Check Protocol Hierarchy&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examine the protocol hierarchy within the pcap file. Look for any anomalies or unusual combinations of protocols.
&lt;img src=&#34;https://qiaonpc.github.io/post/temporal-traffic-traces/protocol.png&#34;
	width=&#34;1380&#34;
	height=&#34;759&#34;
	srcset=&#34;https://qiaonpc.github.io/post/temporal-traffic-traces/protocol_hu859b09cd508ac3295c500a32ffb56cd3_152738_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/temporal-traffic-traces/protocol_hu859b09cd508ac3295c500a32ffb56cd3_152738_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Protocol Hierarchy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;436px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Focus on HTTP Traffic&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In this challenge, it&amp;rsquo;s essential to focus on HTTP traffic. You can identify and extract HTTP packets, which may contain relevant data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Export HTTP Packets as Files&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using a tool like Wireshark&amp;rsquo;s export functionality, extract HTTP packets as files for closer inspection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identify Base64 Encoding&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;During your analysis, you may come across a base64 encoded message within the extracted files.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decode the Message&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decode the base64-encoded message to unveil the hidden flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you decode the message, you will discover the flag hidden within the &amp;ldquo;Temporal Traffic Traces.&amp;rdquo; The flag follows the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps and investigating the pcap file&amp;rsquo;s network traffic, you will successfully reveal the flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Temporal Traffic Traces&amp;rdquo; challenge, your task is to analyze network traffic within a pcap file, extract the relevant data, and decode the hidden flag. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The Early Quantum Supercomputer I</title>
        <link>https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/</guid>
        <description>&lt;h1 id=&#34;the-early-quantum-supercomputer-i---ctf-challenge-writeup&#34;&gt;The Early Quantum Supercomputer I - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: The Early Quantum Supercomputer I&lt;br&gt;
Points: 100&lt;br&gt;
Category: Network Forensics, Operational Technology&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of &amp;ldquo;The Early Quantum Supercomputer I&amp;rdquo; challenge is to analyze a provided pcap file and identify an uncommon protocol to uncover the hidden flag. Your task is to investigate the network traffic and pinpoint the unique protocol.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete &amp;ldquo;The Early Quantum Supercomputer I&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyze the PCAP File&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Begin by opening the provided pcap file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Examine Network Traffic&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scrutinize the network traffic captured within the pcap file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identify Uncommon Protocols&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pay close attention to the protocols being used. Look for any uncommon or unusual protocols that may stand out.
&lt;img src=&#34;https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/protocol.png&#34;
	width=&#34;1396&#34;
	height=&#34;795&#34;
	srcset=&#34;https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/protocol_hubbbebcd40ea30e26874c88fb20df5685_89884_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/protocol_hubbbebcd40ea30e26874c88fb20df5685_89884_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Protocols&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;421px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Identification&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The flag is hidden within the uncommon protocol you identify during your analysis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you identify the unique protocol, you will uncover the hidden flag. The flag is the uncommon protocol.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps and investigating the network traffic within the pcap file, you will successfully reveal the flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &amp;ldquo;The Early Quantum Supercomputer I&amp;rdquo; challenge, your task is to analyze network traffic within a pcap file and identify the uncommon protocol that hides the flag. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The Enigmatic Manuscript</title>
        <link>https://qiaonpc.github.io/post/the-enigmatic-manuscript/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/the-enigmatic-manuscript/</guid>
        <description>&lt;h1 id=&#34;the-enigmatic-manuscript---ctf-challenge-writeup&#34;&gt;The Enigmatic Manuscript - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: The Enigmatic Manuscript&lt;br&gt;
Points: 50&lt;br&gt;
Category: Cryptography&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of The Enigmatic Manuscript challenge is to uncover a hidden flag concealed within an image. Your task is to utilize cryptographic techniques to decipher the flag hidden within the image.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete The Enigmatic Manuscript challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Image Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Begin by examining the provided image. In this challenge, images often hide clues or messages within their metadata or content.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exiftool Inspection&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;exiftool&lt;/code&gt; utility to inspect the image&amp;rsquo;s metadata and content for any hidden information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Base64 Encoding&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upon using &lt;code&gt;exiftool&lt;/code&gt; on the image, you may discover a base64 encoded message within the image&amp;rsquo;s metadata or content.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Message Decryption&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decode the base64 encoded message to reveal the hidden flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After following these steps and decoding the base64 message, you will successfully uncover the flag concealed within the image.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In The Enigmatic Manuscript challenge, your cryptography skills come into play as you decode the base64 message hidden within the image to unveil the flag. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The Quantum Nexus Prototype</title>
        <link>https://qiaonpc.github.io/post/the-quantum-nexus-prototype/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/the-quantum-nexus-prototype/</guid>
        <description>&lt;h1 id=&#34;the-quantum-nexus-prototype---ctf-challenge-writeup&#34;&gt;The Quantum Nexus Prototype - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: The Quantum Nexus Prototype&lt;br&gt;
Points: 50&lt;br&gt;
Category: OSINT, Cryptography&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of &amp;ldquo;The Quantum Nexus Prototype&amp;rdquo; challenge is to use your OSINT (Open-Source Intelligence) and cryptography skills to uncover hidden information within a provided YouTube link. At first glance, this challenge may seem confusing, but with careful examination of the link and some cryptography, you can successfully extract the flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete &amp;ldquo;The Quantum Nexus Prototype&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Opening the YouTube Link&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click the provided YouTube link. However, keep in mind that vulnerabilities cannot be hidden within a real rickroll video.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;URL Examination&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As the video starts to load, take a close look at the link in the URL bar of your web browser. You will notice that the link is shrinking as the video loads.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Character Extraction&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The link shrinking indicates that some characters within the URL are not part of the actual YouTube link and are omitted. Carefully extract these omitted parts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Base64 Decoding&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The extracted part, which has been omitted from the YouTube link, appears to be encoded using Base64. Decode this part to reveal the hidden flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By closely examining the link and decoding the extracted information, you will successfully unveil the flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The Quantum Nexus Prototype&amp;rdquo; challenge combines OSINT and cryptography skills to uncover the hidden flag within the provided YouTube link. It&amp;rsquo;s a test of your ability to identify unusual elements in URLs and apply cryptographic techniques to decode hidden information. Good luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Unearth the Enigmatic Codebreaker&#39;s Challenge</title>
        <link>https://qiaonpc.github.io/post/unearth-the-enigmatic-codebreakers-challenge/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/unearth-the-enigmatic-codebreakers-challenge/</guid>
        <description>&lt;h1 id=&#34;unearth-the-enigmatic-codebreakers-challenge---ctf-challenge-writeup&#34;&gt;Unearth the Enigmatic Codebreaker&amp;rsquo;s Challenge - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Unearth the Enigmatic Codebreaker&amp;rsquo;s Challenge&lt;br&gt;
Points: 150&lt;br&gt;
Category: Memory Forensics&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Unearth the Enigmatic Codebreaker&amp;rsquo;s Challenge&amp;rdquo; is to leverage memory forensics skills to crack Jerry&amp;rsquo;s hashed NTLM password. Your task is to find the hashdump, extract Jerry&amp;rsquo;s hashed password, and use a tool like hashcat to crack it and reveal the hidden flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Unearth the Enigmatic Codebreaker&amp;rsquo;s Challenge,&amp;rdquo; follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prerequisite - Complete m3m0irs&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This challenge is the third installment in the memory forensics series. While it is recommended to complete the previous challenges as a prerequisite, it&amp;rsquo;s not necessary to have completed it to proceed, especially since the CTF has ended.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jerry&amp;rsquo;s Password Hash&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jerry&amp;rsquo;s password is hashed, and you need to crack it. Hashcat, which didn&amp;rsquo;t work for Dexter&amp;rsquo;s password in the previous challenge, is effective for Jerry&amp;rsquo;s.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Locating the Hashdump&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To find the hashes to be cracked, you first need to locate the hashdump within the memory dump. You can achieve this using the following command: &lt;code&gt;volatility -f &amp;lt;memory file&amp;gt; --profile=&amp;lt;architecture&amp;gt; hashdump&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cracking Jerry&amp;rsquo;s Hashed Password&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After extracting Jerry&amp;rsquo;s hashed NTLM password from the hashdump, use a tool like &amp;ldquo;hashcat&amp;rdquo; to crack it. The objective is to reveal the plaintext of Jerry&amp;rsquo;s password.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once you have successfully cracked Jerry&amp;rsquo;s hashed password, you will discover the flag. It will adhere to the specified format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps and employing memory forensics techniques, you will uncover Jerry&amp;rsquo;s password and unveil the hidden flag in the &amp;ldquo;Unearth the Enigmatic Codebreaker&amp;rsquo;s Challenge.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this memory forensics challenge, you must use your skills to crack Jerry&amp;rsquo;s hashed NTLM password and reveal the hidden flag. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Unearth the Long Lost Cipher</title>
        <link>https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/</guid>
        <description>&lt;h1 id=&#34;unearth-the-long-lost-cipher---ctf-challenge-writeup&#34;&gt;Unearth the Long Lost Cipher - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Unearth the Long Lost Cipher&lt;br&gt;
Points: 150&lt;br&gt;
Category: Memory Forensics&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Unearth the Long Lost Cipher&amp;rdquo; challenge is to conduct memory forensics to find Dexter&amp;rsquo;s password on a computer. Your task is to identify the password and reveal the hidden flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Unearth the Long Lost Cipher&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prerequisite - Complete m3m0irs&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This challenge is the second in the memory forensics series and assumes you have completed the &amp;ldquo;m3m0irs&amp;rdquo; challenge. However, since the previous challenge has ended, it&amp;rsquo;s not necessary to have completed it to proceed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Password Search&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are tasked with finding Dexter&amp;rsquo;s password on the computer. Passwords can be located in various ways during memory forensics, such as examining hash dumps or LSA dumps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hash Cracking Attempt&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An initial approach might involve attempting to crack the password hashes, but it didn&amp;rsquo;t yield results in this case.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;File Scan and Grep&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Another approach is to scan the memory for files and grep for references to &amp;ldquo;Dexter.&amp;rdquo; You can perform file scans using the command: &lt;code&gt;volatility -f &amp;lt;memory file&amp;gt; --profile=&amp;lt;architecture&amp;gt; filescan &amp;gt; filescan.txt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Locate SECRET.txt File&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;During the file scan, you may discover a file named &amp;ldquo;SECRET.txt.&amp;rdquo; Extract this file from the memory dump using the command: &lt;code&gt;volatility -f &amp;lt;memory file&amp;gt; --profile=&amp;lt;architecture&amp;gt; dumpfiles -Q &amp;lt;memory-location&amp;gt; -D &amp;lt;directory-where-you-wish-to-place-the-file&amp;gt;&lt;/code&gt;.
&lt;img src=&#34;https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/filescan.png&#34;
	width=&#34;1709&#34;
	height=&#34;327&#34;
	srcset=&#34;https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/filescan_hu4c72d5b5336bf99e71c685fc85914215_142573_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/filescan_hu4c72d5b5336bf99e71c685fc85914215_142573_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;SECRETS.txt&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;522&#34;
		data-flex-basis=&#34;1254px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Examine Dexter&amp;rsquo;s Files&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Investigate the contents of Dexter&amp;rsquo;s files to gather information. You may find hints that lead to the password.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Password Clues&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dexter constructed his password using his favorite animal and a mysterious &amp;ldquo;MMYY.&amp;rdquo; Your task is to determine the animal and decode the password using the provided clues.
&lt;img src=&#34;https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/secret.png&#34;
	width=&#34;1246&#34;
	height=&#34;213&#34;
	srcset=&#34;https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/secret_hu0be1dea07636c274986ca5b9dbcd147d_50967_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/secret_hu0be1dea07636c274986ca5b9dbcd147d_50967_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Password Construction&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;584&#34;
		data-flex-basis=&#34;1403px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Format&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The flag will be in the format specified, with the animal represented by 7 letters, followed by &amp;ldquo;MM&amp;rdquo; and &amp;ldquo;YY.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multiple Panther Instances&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After examining Dexter&amp;rsquo;s files, you may discover two instances of the word &amp;ldquo;panther.&amp;rdquo; Assume this is his favorite animal and forms the first part of the flag (7 letters).
&lt;img src=&#34;https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/panther%20hint.png&#34;
	width=&#34;1704&#34;
	height=&#34;551&#34;
	srcset=&#34;https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/panther%20hint_hu1d1eaf963bfce08fe261c379ad770b55_284213_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/panther%20hint_hu1d1eaf963bfce08fe261c379ad770b55_284213_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2 Instances of Panther&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;309&#34;
		data-flex-basis=&#34;742px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Password Changing Hint&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SECRET.txt may contain information about password changes. This hints that passwords are updated regularly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Password Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To narrow down the possibilities, investigate when the &amp;ldquo;notepad&amp;rdquo; application was used. You may find only two dates in the memory dump, so try both as potential password combinations.
&lt;img src=&#34;https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/usage%20of%20notepad.png&#34;
	width=&#34;1715&#34;
	height=&#34;128&#34;
	srcset=&#34;https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/usage%20of%20notepad_hu4aef2cceaf23dfa00194fa62086b5e6c_65668_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/usage%20of%20notepad_hu4aef2cceaf23dfa00194fa62086b5e6c_65668_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Usage of Notepad&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1339&#34;
		data-flex-basis=&#34;3215px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After following these steps and conducting memory forensics analysis, you will successfully locate Dexter&amp;rsquo;s password and reveal the hidden flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Unearth the Long Lost Cipher&amp;rdquo; challenge, memory forensics skills are crucial as you explore the computer&amp;rsquo;s memory to discover Dexter&amp;rsquo;s password and unveil the flag. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Unlock the Time Traveller&#39;s Dilemma</title>
        <link>https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/</guid>
        <description>&lt;h1 id=&#34;unlock-the-time-travellers-dilemma---ctf-challenge-writeup&#34;&gt;Unlock the Time Traveller&amp;rsquo;s Dilemma - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Unlock the Time Traveller&amp;rsquo;s Dilemma&lt;br&gt;
Points: 200&lt;br&gt;
Category: Memory Forensics&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Unlock the Time Traveller&amp;rsquo;s Dilemma&amp;rdquo; challenge was to perform advanced memory forensics to find the hidden flag. This challenge was the fourth in the memory forensics series, and while it was recommended to solve the previous three challenges, it wasn&amp;rsquo;t necessary as the CTF had ended.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Unlock the Time Traveller&amp;rsquo;s Dilemma&amp;rdquo; challenge, I followed these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;File Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I explored various aspects of the computer&amp;rsquo;s memory, including examining the MFT (Master File Table) using &lt;code&gt;mftparser&lt;/code&gt; and reviewing the state of the computer using &lt;code&gt;screenshot&lt;/code&gt;. Unfortunately, none of these methods provided the flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clipboard Examination&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With my previous methods proving unsuccessful, I turned my attention to &lt;code&gt;clipboard&lt;/code&gt; content. I used the command: &lt;code&gt;volatility -f &amp;lt;memory file&amp;gt; --profile=&amp;lt;architecture&amp;gt; clipboard&lt;/code&gt; to examine the clipboard contents.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Although the clipboard content didn&amp;rsquo;t immediately resemble the flag, but I tried it anyways and solved the challenge.
&lt;img src=&#34;https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/clipboard.png&#34;
	width=&#34;1409&#34;
	height=&#34;330&#34;
	srcset=&#34;https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/clipboard_hued0250f4d36f200914d4877dc116f29b_83057_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/clipboard_hued0250f4d36f200914d4877dc116f29b_83057_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Clipboard&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;426&#34;
		data-flex-basis=&#34;1024px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After conducting a comprehensive memory forensics analysis, I successfully found the flag and completed the challenge.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Unlock the Time Traveller&amp;rsquo;s Dilemma&amp;rdquo; challenge, my advanced memory forensics skills were put to the test as I explored various aspects of the computer&amp;rsquo;s memory to unveil the hidden flag. It was a rewarding challenge that required careful analysis. Good luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Witness the Quantum Entanglement</title>
        <link>https://qiaonpc.github.io/post/witness-the-quantum-entanglement/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/witness-the-quantum-entanglement/</guid>
        <description>&lt;h1 id=&#34;witness-the-quantum-entanglement---ctf-challenge-writeup&#34;&gt;Witness the Quantum Entanglement - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Witness the Quantum Entanglement&lt;br&gt;
Points: 100&lt;br&gt;
Category: Memory Forensics&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Witness the Quantum Entanglement&amp;rdquo; challenge is to utilize your memory forensics skills to determine an essential piece of information. Building upon the previous challenges in the series, you are given a hint regarding Dexter&amp;rsquo;s wife, allowing you to focus on finding her birthdate. With this knowledge, you can proceed to solve the challenge.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Witness the Quantum Entanglement&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Previous Challenge Hint&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the previous challenge, a hint was provided about Dexter&amp;rsquo;s wife. This hint, along with the knowledge that she is celebrating her 42nd birthday, forms the foundation for this challenge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dexter&amp;rsquo;s Wife&amp;rsquo;s Birthdate&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dexter&amp;rsquo;s wife&amp;rsquo;s age is established as 42. Now, the objective is to determine when she was born.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Key Years&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The previous challenges also provided two years: 2023 and 2018. With these years in mind, attempt to calculate Dexter&amp;rsquo;s wife&amp;rsquo;s birthdate using both possibilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test both years to find the correct combination of information that results in her birthdate. One of these combinations will lead you to the correct birthdate, allowing you to obtain the flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By carefully analyzing the provided hints and experimenting with the available information, you will successfully determine Dexter&amp;rsquo;s wife&amp;rsquo;s birthdate and retrieve the flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Witness the Quantum Entanglement&amp;rdquo; challenge, your memory forensics skills and problem-solving abilities are put to the test as you work to unravel the mystery of Dexter&amp;rsquo;s wife&amp;rsquo;s birthdate. Good luck!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
