<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Reverse Engineering on Sum Ting Wong&#39;s Blog</title>
        <link>https://qiaonpc.github.io/tags/reverse-engineering/</link>
        <description>Recent content in Reverse Engineering on Sum Ting Wong&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 09 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://qiaonpc.github.io/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Resign Letter</title>
        <link>https://qiaonpc.github.io/post/resign-letter/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/resign-letter/</guid>
        <description>&lt;h1 id=&#34;resign-letter-ctf-challenge-writeup&#34;&gt;Resign Letter CTF Challenge Writeup
&lt;/h1&gt;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Resign Letter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Points&lt;/strong&gt;: 50&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Reverse Engineering&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objective&lt;/strong&gt;: The challenge involves analyzing a Word document to extract and analyze a suspicious executable file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a detailed solution for the Resign Letter CTF challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Assessment&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Analyzed the provided Word document for any embedded macros using olevba.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identified a suspicious link within the document.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/resign-letter/olevba.png&#34;
	width=&#34;1362&#34;
	height=&#34;722&#34;
	srcset=&#34;https://qiaonpc.github.io/post/resign-letter/olevba_huc8352854c34ce250dad912c7912122a2_175437_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/resign-letter/olevba_huc8352854c34ce250dad912c7912122a2_175437_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Olevba&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;452px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analysis of the Executable&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Downloaded and extracted the executable, named &lt;code&gt;lenovo.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ran the executable in a Windows virtual machine for analysis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initially used Procmon for monitoring file system activity but found it challenging due to the hidden modifications.&lt;/li&gt;
&lt;li&gt;Switched to API Monitor for more detailed monitoring.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identifying the Flag&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Analyzed the API calls made by the executable using API Monitor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discovered the flag being accessed or manipulated by the executable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/resign-letter/apimon.png&#34;
	width=&#34;1223&#34;
	height=&#34;540&#34;
	srcset=&#34;https://qiaonpc.github.io/post/resign-letter/apimon_huf863cc1d3372a70d01521b70eb61f157_83834_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/resign-letter/apimon_huf863cc1d3372a70d01521b70eb61f157_83834_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;API Monitor&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;543px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiaonpc.github.io/post/resign-letter/flag.png&#34;
	width=&#34;607&#34;
	height=&#34;447&#34;
	srcset=&#34;https://qiaonpc.github.io/post/resign-letter/flag_hu9c58b289f09ccda0fa3747ea98d5109d_10751_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/resign-letter/flag_hu9c58b289f09ccda0fa3747ea98d5109d_10751_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The Resign Letter CTF challenge required reverse engineering skills to analyze a Word document and a Windows executable. By using tools like olevba for macro analysis and API Monitor for dynamic analysis of the executable, the flag was successfully extracted. This challenge highlighted the importance of understanding malware analysis techniques for identifying malicious behavior.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Getmecorrect</title>
        <link>https://qiaonpc.github.io/post/getmecorrect/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/getmecorrect/</guid>
        <description>&lt;h1 id=&#34;getmecorrect---ctf-challenge-writeup&#34;&gt;Getmecorrect - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Getmecorrect&lt;br&gt;
Points: 150&lt;br&gt;
Category: Reverse Engineering&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Getmecorrect&amp;rdquo; challenge is to reverse engineer an APK file to uncover a hidden flag. The flag is divided into four parts, and you need to understand how these parts are constructed. However, a key part of the flag is implemented using native code, which is not available in the APK&amp;rsquo;s source code. Your task is to find a way to retrieve the missing part of the flag.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Getmecorrect&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyze the APK File&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start by opening and examining the APK file using tools like jadx-gui. Look for clues that reveal how the flag is constructed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Part 3 and Native Code&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;While analyzing the APK, you will identify that the third part of the flag relies on the &lt;code&gt;getNativeFlag()&lt;/code&gt; function. However, this function&amp;rsquo;s implementation is missing from the APK&amp;rsquo;s source code, and it is marked as &amp;ldquo;native.&amp;rdquo;
&lt;img src=&#34;https://qiaonpc.github.io/post/getmecorrect/Construct%20Flag.png&#34;
	width=&#34;1377&#34;
	height=&#34;523&#34;
	srcset=&#34;https://qiaonpc.github.io/post/getmecorrect/Construct%20Flag_hu575f026a9d1ba17783e0ad9f68de7d71_104924_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/getmecorrect/Construct%20Flag_hu575f026a9d1ba17783e0ad9f68de7d71_104924_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Construct Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;263&#34;
		data-flex-basis=&#34;631px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Understanding Native Code&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The keyword &amp;ldquo;native&amp;rdquo; in the function declaration indicates that the function is implemented using native code, often written in a different programming language like C or C++. This means the actual implementation of &lt;code&gt;getNativeFlagPart&lt;/code&gt; is not available in the provided APK source code.
&lt;img src=&#34;https://qiaonpc.github.io/post/getmecorrect/Native%20Flag.png&#34;
	width=&#34;470&#34;
	height=&#34;69&#34;
	srcset=&#34;https://qiaonpc.github.io/post/getmecorrect/Native%20Flag_hubd60ff486ce749f754de6321deaa2bf0_6312_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/getmecorrect/Native%20Flag_hubd60ff486ce749f754de6321deaa2bf0_6312_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;getNativeFlag() definition&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;681&#34;
		data-flex-basis=&#34;1634px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reverse Engineering Native Code&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To retrieve the missing part of the flag, you need to reverse engineer the native code. Begin by converting the &lt;code&gt;dynamic.apk&lt;/code&gt; to &lt;code&gt;dynamic.zip&lt;/code&gt;, and then unzip the file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Examine the Lib Folder&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to the &lt;code&gt;lib&lt;/code&gt; folder, where you will find different architectures. Choose the one you are most comfortable with. In this case, the &lt;code&gt;x86&lt;/code&gt; architecture is used for analysis.
&lt;img src=&#34;https://qiaonpc.github.io/post/getmecorrect/lib.png&#34;
	width=&#34;1157&#34;
	height=&#34;334&#34;
	srcset=&#34;https://qiaonpc.github.io/post/getmecorrect/lib_hu1cb0493450aaae343ce82264b9d2b68e_96707_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/getmecorrect/lib_hu1cb0493450aaae343ce82264b9d2b68e_96707_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;lib Folder&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;346&#34;
		data-flex-basis=&#34;831px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ghidra Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Within Ghidra, look for a function with a name that resembles the naming convention used throughout &lt;code&gt;dynamic.apk&lt;/code&gt;. This function will likely contain the missing part of the flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Retrieve the Missing Flag Part&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By examining the code in Ghidra, you can identify the third part of the flag. This part is not encrypted or hidden and is directly accessible in the function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you combine the parts of the flag revealed during your analysis, you will uncover the complete hidden flag. The flag follows the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps, you will successfully reverse engineer the APK and retrieve the missing part of the flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Getmecorrect&amp;rdquo; challenge, you need to reverse engineer the APK to construct the flag correctly. Understanding native code and reverse engineering are crucial for solving this challenge. Best of luck!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Reverseme</title>
        <link>https://qiaonpc.github.io/post/reverseme/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://qiaonpc.github.io/post/reverseme/</guid>
        <description>&lt;h1 id=&#34;reverseme---ctf-challenge-writeup&#34;&gt;Reverseme - CTF Challenge Writeup
&lt;/h1&gt;&lt;p&gt;Challenge: Reverseme&lt;br&gt;
Points: 150&lt;br&gt;
Category: Reverse Engineering&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective
&lt;/h2&gt;&lt;p&gt;The objective of the &amp;ldquo;Reverseme&amp;rdquo; challenge is to reverse engineer an Android APK file and retrieve the hidden flag. You need to understand how APK files are structured, how strings are stored, and how resources are referenced in Android app development.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;To successfully complete the &amp;ldquo;Reverseme&amp;rdquo; challenge, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyze the APK File&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start by examining the APK file using jadx-gui or a similar tool. You will need to navigate through the app&amp;rsquo;s code to find the flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Identification&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;During your analysis, you will come across a reference to the flag as &lt;code&gt;R.string.flag&lt;/code&gt;. This indicates that the flag is retrieved from the app&amp;rsquo;s string resources.
&lt;img src=&#34;https://qiaonpc.github.io/post/reverseme/r%20string.png&#34;
	width=&#34;1018&#34;
	height=&#34;431&#34;
	srcset=&#34;https://qiaonpc.github.io/post/reverseme/r%20string_hu4b8b27e34b33bfa87f019438e5d1fa74_74104_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/reverseme/r%20string_hu4b8b27e34b33bfa87f019438e5d1fa74_74104_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;R.String.Flag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;566px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accessing Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Android app development, the &lt;code&gt;R.string&lt;/code&gt; is a reference to a string resource defined in the app&amp;rsquo;s resources. An APK file contains all the resources and code needed to run an Android application.&lt;/li&gt;
&lt;li&gt;When you see &lt;code&gt;R.string.some_string&lt;/code&gt;, it refers to a string resource defined in the app&amp;rsquo;s &lt;code&gt;res/values/strings.xml&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strings.xml Examination&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to locate the &lt;code&gt;strings.xml&lt;/code&gt; file within the APK&amp;rsquo;s resources. Navigate to the Resources folder, then to &lt;code&gt;resources.arsc&lt;/code&gt;, and finally, to &lt;code&gt;res/values&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use the search function (&lt;code&gt;CTRL+F&lt;/code&gt;) to look for the &amp;ldquo;flag&amp;rdquo; string. This will allow you to find the flag in plain text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Retrieval&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By examining the content of the &lt;code&gt;strings.xml&lt;/code&gt; file, you can retrieve the hidden flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flag Discovery&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you extract and decipher the flag, you will reveal the complete hidden flag. The flag follows the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By following these steps, you will successfully reverse engineer the APK and uncover the hidden flag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag
&lt;/h2&gt;&lt;p&gt;The flag for this challenge is in the format: &lt;code&gt;petgrad2023{XXXXXXXXXX}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Reverseme&amp;rdquo; challenge, understanding how Android APK files store resources and references to string resources is crucial. By navigating the app&amp;rsquo;s code and examining the &lt;code&gt;strings.xml&lt;/code&gt; file, you can retrieve the flag and complete the challenge.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
