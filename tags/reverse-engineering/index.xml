<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reverse Engineering on</title><link>https://qiaonpc.github.io/tags/reverse-engineering/</link><description>Recent content in Reverse Engineering on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 22 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://qiaonpc.github.io/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>Sprivect</title><link>https://qiaonpc.github.io/post/sprivect/</link><pubDate>Sun, 22 Jun 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/sprivect/</guid><description>&lt;h1 id="spirvect---ctf-challenge-writeup">Spirvect - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Spirvect&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 100&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Reverse Engineering&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: The goal of this challenge is to reverse engineer an obfuscated &lt;strong>Khronos SPIR-V binary&lt;/strong>, reconstruct the logic used to generate an output image, and recover the original flag hidden within its data transformations.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;h3 id="1-understanding-the-binary">1. &lt;strong>Understanding the Binary&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>We are given a compiled &lt;strong>SPIR-V&lt;/strong> binary — an intermediate shader format used by Vulkan and OpenGL.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The first step is to disassemble the binary for analysis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using a tool like &lt;strong>SPIRV-Cross&lt;/strong>, we can decompile the SPIR-V binary into readable shader source code:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">spirv-cross input.spv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://qiaonpc.github.io/post/sprivect/disassemble.png"
width="1655"
height="867"
srcset="https://qiaonpc.github.io/post/sprivect/disassemble_hu323f20f7fe2d206c3c401d5ac1a45348_571774_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sprivect/disassemble_hu323f20f7fe2d206c3c401d5ac1a45348_571774_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Disassemble"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="458px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-analyzing-shader-logic">2. &lt;strong>Analyzing Shader Logic&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>After decompilation, the shader source reveals the core image-generation logic:&lt;/p>
&lt;ul>
&lt;li>Operates on a &lt;strong>64×64 pixel grid&lt;/strong>.&lt;/li>
&lt;li>For each pixel &lt;code>(x, y)&lt;/code>:
&lt;ul>
&lt;li>Computes a pseudo-random index into a 12-element &lt;code>uint&lt;/code> array (&lt;code>modulo 10&lt;/code>).&lt;/li>
&lt;li>Extracts individual RGBA bytes from this &lt;code>uint&lt;/code>.&lt;/li>
&lt;li>Each byte is multiplied by an &lt;strong>XOR-mixed&lt;/strong> version of &lt;code>x*y&lt;/code> to introduce variation.&lt;/li>
&lt;li>The final result is written to an &lt;code>image2D&lt;/code> object (&lt;code>output.png&lt;/code>).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-challenge-objective">3. &lt;strong>Challenge Objective&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Given the &lt;strong>output image (&lt;code>output.png&lt;/code>)&lt;/strong>, our task is to &lt;strong>reverse&lt;/strong> the transformations to recover the original flag.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="4-reversing-the-transformation">4. &lt;strong>Reversing the Transformation&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>The main challenge lies in the &lt;strong>MOD operation&lt;/strong>, which makes exact inversion non-trivial.&lt;/li>
&lt;li>Since &lt;code>modulo&lt;/code> is not bijective, multiple inputs can map to the same output — a true inversion is not possible.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="5-brute-force-strategy">5. &lt;strong>Brute Force Strategy&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>To work around this:&lt;/p>
&lt;ul>
&lt;li>A &lt;strong>brute-force approach&lt;/strong> is used to test all possible candidates for the mod result.&lt;/li>
&lt;li>For each pixel:
&lt;ul>
&lt;li>Try possible pre-images and compute forward.&lt;/li>
&lt;li>Compare against the actual pixel value in &lt;code>output.png&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Retain candidate values that best match the observed image data.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">PIL&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Counter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">img&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Image&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;output.png&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">convert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;RGBA&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">img&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assert&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">64&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Expected image size 64x64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Shader constants&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">XOR_CONSTS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">237&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">250&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">173&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">186&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">compute_97&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xFF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">palette_index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">brute_force_reverse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mixer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">out_val&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">candidates&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">mixer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xFF&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">out_val&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">candidates&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">candidates&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">palette_candidates&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_97&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">compute_97&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mixers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_97&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">XOR_CONSTS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_97&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">XOR_CONSTS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_97&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">XOR_CONSTS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_97&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">XOR_CONSTS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pixel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">img&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getpixel&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">palette_index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">all_channel_candidates&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mixers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pixel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">chan_candidates&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">brute_force_reverse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">out_val&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">all_channel_candidates&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">chan_candidates&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">all_channel_candidates&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">all_channel_candidates&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">all_channel_candidates&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">all_channel_candidates&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">palette_candidates&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">final_palette&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">candidates&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">palette_candidates&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">candidates&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">final_palette&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Counter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">most_common_entry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">most_common&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">final_palette&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">most_common_entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Recovered palette:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">flag_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">final_palette&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hex_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">r&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hex_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;0x&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">hex_value&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">08X&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ascii_chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="mi">32&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">126&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ascii_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ascii_chars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flag_str&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">ascii_str&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Index &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">hex_str&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> &amp;#39;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">ascii_str&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">Full flag (ASCII):&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag_str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="6-flag-recovery">6. &lt;strong>Flag Recovery&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>By applying this method across the entire image, we can extract candidate values.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>As these are assembled, they form the original flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sprivect/flag.png"
width="714"
height="420"
srcset="https://qiaonpc.github.io/post/sprivect/flag_huf9f749614cfaa59d0864bd031574b8fa_108045_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sprivect/flag_huf9f749614cfaa59d0864bd031574b8fa_108045_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is:&lt;br>
&lt;code>maltactf{haigotyoutotouchcomputeshaders}&lt;/code>&lt;/p>
&lt;hr>
&lt;h2 id="summary">Summary
&lt;/h2>&lt;p>The &amp;ldquo;Spirvect&amp;rdquo; challenge teaches players how to approach &lt;strong>binary shader analysis&lt;/strong>, particularly when dealing with &lt;strong>SPIR-V&lt;/strong> — an often overlooked binary format in CTFs. It also demonstrates practical challenges around reversing operations that involve &lt;strong>modulo arithmetic&lt;/strong> and shows the utility of brute-force recovery when full inversion is mathematically infeasible.&lt;/p>
&lt;hr></description></item><item><title>iamspeed</title><link>https://qiaonpc.github.io/post/iamspeed/</link><pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/iamspeed/</guid><description>&lt;h1 id="iamspeed">iamspeed
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: iamspeed&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 100&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Reverse&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze the Python-compiled executable to retrieve and decode the flag.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Enumeration&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Upon inspecting the executable, it was identified as a &lt;strong>Python-compiled executable&lt;/strong> based on the presence of Python-related artifacts.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/iamspeed/initial%20enumeration.png"
width="855"
height="690"
srcset="https://qiaonpc.github.io/post/iamspeed/initial%20enumeration_huc0d5a53e4aa5b98a9703f4259a670f88_108784_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/iamspeed/initial%20enumeration_huc0d5a53e4aa5b98a9703f4259a670f88_108784_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Initial Enumeration"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decompiling the Executable&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Tools Used&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>PyInstaller Extractor&lt;/strong> (&lt;code>pyinstxtractor&lt;/code>) to extract the &lt;code>.pyc&lt;/code> file.&lt;/li>
&lt;li>&lt;strong>PyCDC&lt;/strong> to decompile the &lt;code>.pyc&lt;/code> file into readable Python source code.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/iamspeed/pyinstractor.png"
width="1435"
height="489"
srcset="https://qiaonpc.github.io/post/iamspeed/pyinstractor_hu9059aaf99e8be1932731b7fe7618fe04_144870_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/iamspeed/pyinstractor_hu9059aaf99e8be1932731b7fe7618fe04_144870_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pyinstractor"
class="gallery-image"
data-flex-grow="293"
data-flex-basis="704px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/iamspeed/pycdc.png"
width="1020"
height="754"
srcset="https://qiaonpc.github.io/post/iamspeed/pycdc_hu1b36e75049872b653b691ddb3ee25462_143340_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/iamspeed/pycdc_hu1b36e75049872b653b691ddb3ee25462_143340_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="PYCDC"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analyzing the Decompiled Script&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>My teammate, &lt;strong>Nem4ros&lt;/strong> then ran the script and found hints of &lt;strong>hidden HTTPS link&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>He then modified the script to print the extracted link directly.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/iamspeed/found%20hints%20of%20http.png"
width="783"
height="562"
srcset="https://qiaonpc.github.io/post/iamspeed/found%20hints%20of%20http_huf5956c9adb1503e4f2eea3cf633b5b30_347109_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/iamspeed/found%20hints%20of%20http_huf5956c9adb1503e4f2eea3cf633b5b30_347109_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Hints of HTTP"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="334px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/iamspeed/http%20link.png"
width="796"
height="588"
srcset="https://qiaonpc.github.io/post/iamspeed/http%20link_hu4d730e4cf6a1683bc2818f4456304d92_434436_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/iamspeed/http%20link_hu4d730e4cf6a1683bc2818f4456304d92_434436_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="HTTP Link"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Accessing the Link&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The link pointed to a Google document containing &lt;strong>encoded text&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/iamspeed/get%20another%20code.png"
width="913"
height="116"
srcset="https://qiaonpc.github.io/post/iamspeed/get%20another%20code_hu74e7807d8f81adaabbc56f08db10fcda_49253_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/iamspeed/get%20another%20code_hu74e7807d8f81adaabbc56f08db10fcda_49253_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Get Another Code"
class="gallery-image"
data-flex-grow="787"
data-flex-basis="1888px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decoding the Text&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Attempts to decode the text with standard methods like &lt;strong>hex decoding&lt;/strong> failed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The text was successfully decoded using the &lt;strong>original script&lt;/strong> to process the encoded data.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/iamspeed/flag.png"
width="824"
height="580"
srcset="https://qiaonpc.github.io/post/iamspeed/flag_hu0d9e706628c4bc5b9ccdbe12764d8690_458522_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/iamspeed/flag_hu0d9e706628c4bc5b9ccdbe12764d8690_458522_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="340px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Flag&lt;/strong>: &lt;code>SHCTF24{XXXXXXXXXX}&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>X</title><link>https://qiaonpc.github.io/post/x/</link><pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/x/</guid><description>&lt;h1 id="x">X
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: X&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 100&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Reverse&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze and reverse engineer the application to retrieve the flag.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Use tools such as Ghidra, IDA Pro, or Radare2 to analyze the code.&lt;/li>
&lt;li>Upon analysing the application, it performs &lt;strong>XOR operations&lt;/strong> on a specific variable.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/x/xor%20operation.png"
width="534"
height="531"
srcset="https://qiaonpc.github.io/post/x/xor%20operation_hu1bb163d90fe60860629545ff5b919bf5_38549_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/x/xor%20operation_hu1bb163d90fe60860629545ff5b919bf5_38549_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="XOR Operation"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/x/encoded%20flag.png"
width="606"
height="72"
srcset="https://qiaonpc.github.io/post/x/encoded%20flag_hu2d16e0b4909d85855f9702a68783b55a_8338_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/x/encoded%20flag_hu2d16e0b4909d85855f9702a68783b55a_8338_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Encoded Flag"
class="gallery-image"
data-flex-grow="841"
data-flex-basis="2020px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reversing the XOR&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Since XOR is a reversible operation (&lt;code>XOR&lt;/code> is its own inverse):&lt;/li>
&lt;li>Apply the same XOR key to the modified value to retrieve the original data (flag).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">xor_values&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x6B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">56&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x75&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">61&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x65&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">38&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x68&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x74&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x69&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">91&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x6F&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">91&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x77&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">aBcb4ce08a36317&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;bcb4ce08a3/6317b67`d8`d58e6e1e`b&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">decoded_first_part&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">xor_val&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expected&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">xor_values&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">decoded_first_part&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expected&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">xor_val&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">decoded_second_part&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">aBcb4ce08a36317&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">decoded_second_part&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">full_string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decoded_first_part&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decoded_second_part&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Full String: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">full_string&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Flag&lt;/strong>: &lt;code>SHCTF24{cdc5df19b407428c78ae9ae69f7f2fac}&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Packman</title><link>https://qiaonpc.github.io/post/packman/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/packman/</guid><description>&lt;h1 id="packman-ctf-challenge-writeup">Packman CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Packman&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 300&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Reverse Engineering&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Reverse engineer a Python-compiled Windows executable to retrieve a flag.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>File Enumeration&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Upon receiving the reverse engineering file, the first step was to enumerate the details.&lt;/li>
&lt;li>The filename indicated it was a Windows executable due to the &lt;code>.exe&lt;/code> extension.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identifying the Binary Type&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>By running the &lt;code>strings&lt;/code> command on the file, I identified it as a Python-compiled executable rather than one compiled with C, C++, or Rust.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The presence of Python libraries and mentions of &lt;code>pyc&lt;/code> and &lt;code>pyz&lt;/code> in the output confirmed this.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/packman/presence%20of%20python.png"
width="894"
height="492"
srcset="https://qiaonpc.github.io/post/packman/presence%20of%20python_hu4708178e992922a6307ac9a80cfca258_134495_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/packman/presence%20of%20python_hu4708178e992922a6307ac9a80cfca258_134495_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Presence of Python"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decompilation Process&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>For Python-compiled binaries, the typical approach is to reverse it to obtain the original Python code.&lt;/li>
&lt;li>I utilized &lt;code>pyinstxtractor&lt;/code> to extract the &lt;code>.pyc&lt;/code> file from the executable.&lt;/li>
&lt;li>After obtaining the &lt;code>.pyc&lt;/code> file, I used &lt;code>pycdc&lt;/code> to convert the &lt;code>.pyc&lt;/code> back into readable Python code.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Retrieval&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>With the decompiled Python code, I searched through the functions and identified one that would generate or return the flag.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I executed the relevant function to retrieve the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/packman/flag.png"
width="1178"
height="555"
srcset="https://qiaonpc.github.io/post/packman/flag_hu1e683adedef06da897c5fa70857c7348_204641_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/packman/flag_hu1e683adedef06da897c5fa70857c7348_204641_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Brute Force Frenzy</title><link>https://qiaonpc.github.io/post/brute-force-frenzy/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/brute-force-frenzy/</guid><description>&lt;h1 id="brute-force-frenzy-ctf-challenge-writeup">Brute Force Frenzy CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Brute Force Frenzy&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 500&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Reverse Engineering&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Reverse engineer a binary to find the correct key for verification.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/brute-force-frenzy/challenge.png"
width="655"
height="920"
srcset="https://qiaonpc.github.io/post/brute-force-frenzy/challenge_hu4c8cf4da84bcd8b3945b46a645934140_80492_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/brute-force-frenzy/challenge_hu4c8cf4da84bcd8b3945b46a645934140_80492_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Challenge"
class="gallery-image"
data-flex-grow="71"
data-flex-basis="170px"
>&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;Brute Force Frenzy&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Analyze the Binary&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Use Ghidra to analyze the provided file. Identify the key verification process and how the key is checked against a predefined array.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/brute-force-frenzy/ghidra%20encryption.png"
width="889"
height="603"
srcset="https://qiaonpc.github.io/post/brute-force-frenzy/ghidra%20encryption_hucf363704a1fac76e8bfa759896fd4db1_62838_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/brute-force-frenzy/ghidra%20encryption_hucf363704a1fac76e8bfa759896fd4db1_62838_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Encryption"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/brute-force-frenzy/predefined%20bytes.png"
width="818"
height="610"
srcset="https://qiaonpc.github.io/post/brute-force-frenzy/predefined%20bytes_huee56daf63a4efb1e9096a267317f4ab1_48412_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/brute-force-frenzy/predefined%20bytes_huee56daf63a4efb1e9096a267317f4ab1_48412_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Predefined Bytes"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Understand the Obfuscation&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Discover that the byte array used for verification is obfuscated. Only every 4th byte in the array is relevant for the key.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extract and Recreate&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Extract the useful bytes from the obfuscated array.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recreate the key verification logic in Python using these extracted bytes.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">find_license_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">predefined_values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target_sum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">license_key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">found&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">127&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># Printable ASCII characters&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">iVar1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">97&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">iVar1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">predefined_values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">license_key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">found&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">found&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="c1"># If no valid character is found&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">license_key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">computed_sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(((&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">license_key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">97&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">license_key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Example usage:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">predefined_values&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">91&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">62&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">66&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">59&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">51&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">72&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">41&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">target_sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">200&lt;/span> &lt;span class="c1"># Replace with the actual target sum value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">license_key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find_license_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">predefined_values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target_sum&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;The license key is: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">license_key&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Run the Script&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Execute the Python script to test the key verification process. Obtain the flag from the script output.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/brute-force-frenzy/flag.png"
width="743"
height="120"
srcset="https://qiaonpc.github.io/post/brute-force-frenzy/flag_huc2154d638344e9be9d6397696213414d_28330_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/brute-force-frenzy/flag_huc2154d638344e9be9d6397696213414d_28330_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="619"
data-flex-basis="1486px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag&lt;/strong>: &lt;strong>ihack24{NI220G24}&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Resign Letter</title><link>https://qiaonpc.github.io/post/resign-letter/</link><pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/resign-letter/</guid><description>&lt;h1 id="resign-letter-ctf-challenge-writeup">Resign Letter CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Resign Letter&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 50&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Reverse Engineering&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: The challenge involves analyzing a Word document to extract and analyze a suspicious executable file.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>Here&amp;rsquo;s a detailed solution for the Resign Letter CTF challenge:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Assessment&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Analyzed the provided Word document for any embedded macros using olevba.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Identified a suspicious link within the document.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/resign-letter/olevba.png"
width="1362"
height="722"
srcset="https://qiaonpc.github.io/post/resign-letter/olevba_huc8352854c34ce250dad912c7912122a2_175437_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/resign-letter/olevba_huc8352854c34ce250dad912c7912122a2_175437_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Olevba"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analysis of the Executable&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Downloaded and extracted the executable, named &lt;code>lenovo.exe&lt;/code>.&lt;/li>
&lt;li>Ran the executable in a Windows virtual machine for analysis.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Dynamic Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Initially used Procmon for monitoring file system activity but found it challenging due to the hidden modifications.&lt;/li>
&lt;li>Switched to API Monitor for more detailed monitoring.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identifying the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Analyzed the API calls made by the executable using API Monitor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Discovered the flag being accessed or manipulated by the executable.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/resign-letter/apimon.png"
width="1223"
height="540"
srcset="https://qiaonpc.github.io/post/resign-letter/apimon_huf863cc1d3372a70d01521b70eb61f157_83834_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/resign-letter/apimon_huf863cc1d3372a70d01521b70eb61f157_83834_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="API Monitor"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="543px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/resign-letter/flag.png"
width="607"
height="447"
srcset="https://qiaonpc.github.io/post/resign-letter/flag_hu9c58b289f09ccda0fa3747ea98d5109d_10751_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/resign-letter/flag_hu9c58b289f09ccda0fa3747ea98d5109d_10751_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>The Resign Letter CTF challenge required reverse engineering skills to analyze a Word document and a Windows executable. By using tools like olevba for macro analysis and API Monitor for dynamic analysis of the executable, the flag was successfully extracted. This challenge highlighted the importance of understanding malware analysis techniques for identifying malicious behavior.&lt;/p></description></item><item><title>Getmecorrect</title><link>https://qiaonpc.github.io/post/getmecorrect/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/getmecorrect/</guid><description>&lt;h1 id="getmecorrect---ctf-challenge-writeup">Getmecorrect - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: Getmecorrect&lt;br>
Points: 150&lt;br>
Category: Reverse Engineering&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of the &amp;ldquo;Getmecorrect&amp;rdquo; challenge is to reverse engineer an APK file to uncover a hidden flag. The flag is divided into four parts, and you need to understand how these parts are constructed. However, a key part of the flag is implemented using native code, which is not available in the APK&amp;rsquo;s source code. Your task is to find a way to retrieve the missing part of the flag.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully complete the &amp;ldquo;Getmecorrect&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Analyze the APK File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Start by opening and examining the APK file using tools like jadx-gui. Look for clues that reveal how the flag is constructed.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Part 3 and Native Code&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>While analyzing the APK, you will identify that the third part of the flag relies on the &lt;code>getNativeFlag()&lt;/code> function. However, this function&amp;rsquo;s implementation is missing from the APK&amp;rsquo;s source code, and it is marked as &amp;ldquo;native.&amp;rdquo;
&lt;img src="https://qiaonpc.github.io/post/getmecorrect/Construct%20Flag.png"
width="1377"
height="523"
srcset="https://qiaonpc.github.io/post/getmecorrect/Construct%20Flag_hu575f026a9d1ba17783e0ad9f68de7d71_104924_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/getmecorrect/Construct%20Flag_hu575f026a9d1ba17783e0ad9f68de7d71_104924_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Construct Flag"
class="gallery-image"
data-flex-grow="263"
data-flex-basis="631px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Understanding Native Code&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The keyword &amp;ldquo;native&amp;rdquo; in the function declaration indicates that the function is implemented using native code, often written in a different programming language like C or C++. This means the actual implementation of &lt;code>getNativeFlagPart&lt;/code> is not available in the provided APK source code.
&lt;img src="https://qiaonpc.github.io/post/getmecorrect/Native%20Flag.png"
width="470"
height="69"
srcset="https://qiaonpc.github.io/post/getmecorrect/Native%20Flag_hubd60ff486ce749f754de6321deaa2bf0_6312_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/getmecorrect/Native%20Flag_hubd60ff486ce749f754de6321deaa2bf0_6312_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="getNativeFlag() definition"
class="gallery-image"
data-flex-grow="681"
data-flex-basis="1634px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reverse Engineering Native Code&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>To retrieve the missing part of the flag, you need to reverse engineer the native code. Begin by converting the &lt;code>dynamic.apk&lt;/code> to &lt;code>dynamic.zip&lt;/code>, and then unzip the file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Examine the Lib Folder&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Navigate to the &lt;code>lib&lt;/code> folder, where you will find different architectures. Choose the one you are most comfortable with. In this case, the &lt;code>x86&lt;/code> architecture is used for analysis.
&lt;img src="https://qiaonpc.github.io/post/getmecorrect/lib.png"
width="1157"
height="334"
srcset="https://qiaonpc.github.io/post/getmecorrect/lib_hu1cb0493450aaae343ce82264b9d2b68e_96707_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/getmecorrect/lib_hu1cb0493450aaae343ce82264b9d2b68e_96707_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="lib Folder"
class="gallery-image"
data-flex-grow="346"
data-flex-basis="831px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Ghidra Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Within Ghidra, look for a function with a name that resembles the naming convention used throughout &lt;code>dynamic.apk&lt;/code>. This function will likely contain the missing part of the flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Retrieve the Missing Flag Part&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>By examining the code in Ghidra, you can identify the third part of the flag. This part is not encrypted or hidden and is directly accessible in the function.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>As you combine the parts of the flag revealed during your analysis, you will uncover the complete hidden flag. The flag follows the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>By following these steps, you will successfully reverse engineer the APK and retrieve the missing part of the flag.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In the &amp;ldquo;Getmecorrect&amp;rdquo; challenge, you need to reverse engineer the APK to construct the flag correctly. Understanding native code and reverse engineering are crucial for solving this challenge. Best of luck!&lt;/p></description></item><item><title>Reverseme</title><link>https://qiaonpc.github.io/post/reverseme/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/reverseme/</guid><description>&lt;h1 id="reverseme---ctf-challenge-writeup">Reverseme - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: Reverseme&lt;br>
Points: 150&lt;br>
Category: Reverse Engineering&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of the &amp;ldquo;Reverseme&amp;rdquo; challenge is to reverse engineer an Android APK file and retrieve the hidden flag. You need to understand how APK files are structured, how strings are stored, and how resources are referenced in Android app development.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully complete the &amp;ldquo;Reverseme&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Analyze the APK File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Start by examining the APK file using jadx-gui or a similar tool. You will need to navigate through the app&amp;rsquo;s code to find the flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Identification&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>During your analysis, you will come across a reference to the flag as &lt;code>R.string.flag&lt;/code>. This indicates that the flag is retrieved from the app&amp;rsquo;s string resources.
&lt;img src="https://qiaonpc.github.io/post/reverseme/r%20string.png"
width="1018"
height="431"
srcset="https://qiaonpc.github.io/post/reverseme/r%20string_hu4b8b27e34b33bfa87f019438e5d1fa74_74104_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/reverseme/r%20string_hu4b8b27e34b33bfa87f019438e5d1fa74_74104_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="R.String.Flag"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="566px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Accessing Resources&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>In Android app development, the &lt;code>R.string&lt;/code> is a reference to a string resource defined in the app&amp;rsquo;s resources. An APK file contains all the resources and code needed to run an Android application.&lt;/li>
&lt;li>When you see &lt;code>R.string.some_string&lt;/code>, it refers to a string resource defined in the app&amp;rsquo;s &lt;code>res/values/strings.xml&lt;/code> file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Strings.xml Examination&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>You need to locate the &lt;code>strings.xml&lt;/code> file within the APK&amp;rsquo;s resources. Navigate to the Resources folder, then to &lt;code>resources.arsc&lt;/code>, and finally, to &lt;code>res/values&lt;/code>.&lt;/li>
&lt;li>Use the search function (&lt;code>CTRL+F&lt;/code>) to look for the &amp;ldquo;flag&amp;rdquo; string. This will allow you to find the flag in plain text.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Retrieval&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>By examining the content of the &lt;code>strings.xml&lt;/code> file, you can retrieve the hidden flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>As you extract and decipher the flag, you will reveal the complete hidden flag. The flag follows the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>By following these steps, you will successfully reverse engineer the APK and uncover the hidden flag.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In the &amp;ldquo;Reverseme&amp;rdquo; challenge, understanding how Android APK files store resources and references to string resources is crucial. By navigating the app&amp;rsquo;s code and examining the &lt;code>strings.xml&lt;/code> file, you can retrieve the flag and complete the challenge.&lt;/p></description></item></channel></rss>