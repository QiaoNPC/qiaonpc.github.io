<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Forensics on</title><link>https://qiaonpc.github.io/tags/forensics/</link><description>Recent content in Forensics on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 31 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://qiaonpc.github.io/tags/forensics/index.xml" rel="self" type="application/rss+xml"/><item><title>Get Clawed</title><link>https://qiaonpc.github.io/post/get-clawed/</link><pubDate>Sun, 31 Aug 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/get-clawed/</guid><description>&lt;h1 id="get-clawed---ctf-challenge-writeup">Get Clawed - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Get Clawed&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 10&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze a disk image and network traffic capture to uncover hidden data exfiltration techniques, reverse custom encryption mechanisms, and ultimately retrieve the attacker’s payload or flag.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;h3 id="1-initial-recon-ad1-file">1. &lt;strong>Initial Recon: AD1 File&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Given two files:&lt;/p>
&lt;ul>
&lt;li>A forensic disk image (&lt;code>.ad1&lt;/code>)&lt;/li>
&lt;li>A packet capture (&lt;code>.pcap&lt;/code>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Inside the AD image:&lt;/p>
&lt;ul>
&lt;li>Nothing substantial at first glance.&lt;/li>
&lt;li>A few anime images, some decoy files, and a suspicious file named &lt;code>golden-answer.clawed&lt;/code>.&lt;/li>
&lt;li>The &lt;code>.clawed&lt;/code> file appeared to be a &lt;strong>custom encrypted blob&lt;/strong> — likely containing the flag.&lt;/li>
&lt;li>&lt;a class="link" href="https://eqctf.com/" target="_blank" rel="noopener"
>EQCTF&lt;/a> is also mentioned 👀 in the AD1 image file. For beginners looking to get into CTF, EQCTF is a great starting point. It is created by a team of legendary Malaysian CTF players.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-turning-to-the-network-traffic">2. &lt;strong>Turning to the Network Traffic&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>With the AD1 largely unhelpful, focus shifted to the &lt;code>.pcap&lt;/code> file.&lt;/li>
&lt;li>Suspicious HTTP GET traffic containing &lt;code>?guid=&lt;/code> stood out — indicative of possible &lt;strong>C2-style communication&lt;/strong>.&lt;/li>
&lt;li>This assumption stems from the fact that the values appeared &lt;strong>Base64-like&lt;/strong>, but standard decoding failed.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-leveraging-known-resources">3. &lt;strong>Leveraging Known Resources&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>After some digging, I found that my assumption was correct and it is a C2 communication.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/get-clawed/C2%20Image.png"
width="1229"
height="867"
srcset="https://qiaonpc.github.io/post/get-clawed/C2%20Image_hu1b1ff42e256beeae799d82a497a7537e_139957_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/get-clawed/C2%20Image_hu1b1ff42e256beeae799d82a497a7537e_139957_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="TrevorC2"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I then discovered a &lt;strong>writeup from the same challenge author&lt;/strong>: &lt;a class="link" href="https://warlocksmurf.github.io/posts/cyberspacectf2024/" target="_blank" rel="noopener"
>warlocksmurf.github.io - CyberspaceCTF2024&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The author provided a &lt;strong>Python script&lt;/strong> that could be reused for decrypting similarly obfuscated C2 traffic.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using this script, the suspicious traffic was decrypted successfully.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/get-clawed/Use%20Script.png"
width="1760"
height="1006"
srcset="https://qiaonpc.github.io/post/get-clawed/Use%20Script_hu8d2ba595266d4bf5dbd4aed28f0e4b22_575691_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/get-clawed/Use%20Script_hu8d2ba595266d4bf5dbd4aed28f0e4b22_575691_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Decoding C2 Traffic"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="4-c2-traffic-analysis">4. &lt;strong>C2 Traffic Analysis&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>The decrypted content revealed:&lt;/p>
&lt;ul>
&lt;li>A &lt;strong>GitHub Gist link&lt;/strong>&lt;/li>
&lt;li>The Gist contained &lt;strong>Base64-encoded content&lt;/strong>, which when decoded turned out to be another script.&lt;/li>
&lt;li>This script was a &lt;strong>basic XOR cipher&lt;/strong>, meant to encrypt/decrypt data.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/get-clawed/github%20link.png"
width="1905"
height="248"
srcset="https://qiaonpc.github.io/post/get-clawed/github%20link_hu935ecbe779142bf78fbaed8bb2867963_105351_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/get-clawed/github%20link_hu935ecbe779142bf78fbaed8bb2867963_105351_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GIST Link"
class="gallery-image"
data-flex-grow="768"
data-flex-basis="1843px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="5-decrypting-golden-answerclawed">5. &lt;strong>Decrypting golden-answer.clawed&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>With the XOR script in hand, wrote a script to decrypt &lt;code>golden-answer.clawed&lt;/code> using the same XOR logic.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Upon decryption, the file revealed the &lt;strong>flag&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/get-clawed/flag.png"
width="1288"
height="594"
srcset="https://qiaonpc.github.io/post/get-clawed/flag_hu0bb0a00dd2a2ae5e25189d06fe996644_166478_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/get-clawed/flag_hu0bb0a00dd2a2ae5e25189d06fe996644_166478_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is:&lt;br>
&lt;code>sunctf25{n0t_tr3v0r_fr0m_GTA}&lt;/code>&lt;/p></description></item><item><title>Sustainable Development Goals</title><link>https://qiaonpc.github.io/post/sustainable-development-goals/</link><pubDate>Sun, 31 Aug 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/sustainable-development-goals/</guid><description>&lt;h1 id="sustainable-development-goals---ctf-challenge-writeup">Sustainable Development Goals - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Sustainable Development Goals&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 10&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze a memory dump to identify post-exploitation artifacts, uncover suspicious process behavior, decrypt and execute in-memory payloads, and extract the attacker’s intended shellcode or flag.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;h3 id="1-choosing-a-tool-memprocfs-vs-volatility">1. &lt;strong>Choosing a Tool: memprocfs vs Volatility&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Given a &lt;strong>memory dump&lt;/strong>, analysed it using memprocfs.&lt;/li>
&lt;li>I chose to begin analysis with &lt;strong>memprocfs&lt;/strong> instead of Volatility due to its speed and usability.
&lt;ul>
&lt;li>&lt;strong>memprocfs&lt;/strong> offers real-time mounting of the memory image as a virtual file system, allowing quick browsing of processes, network connections, files, registry, environment variables, and even PowerShell history.&lt;/li>
&lt;li>&lt;strong>Volatility&lt;/strong> was later used for &lt;strong>more niche plugins&lt;/strong> and &lt;strong>precise data extraction&lt;/strong> (e.g., environment variables).&lt;/li>
&lt;li>&lt;strong>memprocfs&lt;/strong> is fast so I can quickly get an overview on what I should be doing to get flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-suspicious-process-discovery">2. &lt;strong>Suspicious Process Discovery&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>During enumeration of running processes, one stood out:
&lt;ul>
&lt;li>An instance of &lt;code>svchost.exe&lt;/code> executing from an &lt;strong>unusual path&lt;/strong>:&lt;br>
&lt;code>C:\Users\sunwaylobster\Pictures\svchost.exe&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Red flags:
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;code>svchost.exe&lt;/code> is a legitimate Windows binary&lt;/strong>, but typically only runs from &lt;code>System32&lt;/code>, not &lt;code>Pictures&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It was &lt;strong>spawned by &lt;code>explorer.exe&lt;/code>&lt;/strong>, suggesting user-level execution.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tracing the parent chain revealed it &lt;strong>originated from &lt;code>WINWORD.EXE&lt;/code>&lt;/strong> — a classic phishing vector (e.g., Word document macro).&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sustainable-development-goals/1.%20sus%20process.png"
width="1766"
height="1005"
srcset="https://qiaonpc.github.io/post/sustainable-development-goals/1.%20sus%20process_hu3be29ca571880c76abe2ab660d486f31_112437_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sustainable-development-goals/1.%20sus%20process_hu3be29ca571880c76abe2ab660d486f31_112437_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sus Process"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-analyzing-the-malicious-svchost">3. &lt;strong>Analyzing the Malicious svchost&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Dumped and inspected the &lt;code>svchost.exe&lt;/code> binary.&lt;/li>
&lt;li>It was &lt;strong>not the real Windows svchost&lt;/strong>, but rather &lt;strong>custom malicious code&lt;/strong>.&lt;/li>
&lt;li>Behavior analysis showed it:
&lt;ul>
&lt;li>Decodes a payload intended for &lt;strong>process injection&lt;/strong>&lt;/li>
&lt;li>Uses &lt;strong>AES encryption&lt;/strong> to protect the shellcode&lt;/li>
&lt;li>Retrieves the &lt;strong>IV and AES key from environment variables&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="4-extracting-environment-variables">4. &lt;strong>Extracting Environment Variables&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Used &lt;strong>Volatility&lt;/strong> to extract the environment variables of the malicious &lt;code>svchost&lt;/code> process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Retrieved the &lt;strong>AES key and IV&lt;/strong>, enabling decryption of the embedded payload.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sustainable-development-goals/2.%20Extracted%20envars.png"
width="1530"
height="860"
srcset="https://qiaonpc.github.io/post/sustainable-development-goals/2.%20Extracted%20envars_hu95a89977d02560db34a334ae672b554e_807277_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sustainable-development-goals/2.%20Extracted%20envars_hu95a89977d02560db34a334ae672b554e_807277_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Extracted Envars"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="5-decrypting-and-executing-the-shellcode">5. &lt;strong>Decrypting and Executing the Shellcode&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Decrypted the encoded payload using the extracted key and IV.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Result: a &lt;strong>valid shellcode blob&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Executed the shellcode in a controlled environment (emulator or debugger) to observe behavior.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Upon execution, the shellcode revealed the &lt;strong>flag&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sustainable-development-goals/3.%20decrypted.png"
width="1384"
height="981"
srcset="https://qiaonpc.github.io/post/sustainable-development-goals/3.%20decrypted_hu7ebd0bc6845c1a01fec8af9e02782426_105156_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sustainable-development-goals/3.%20decrypted_hu7ebd0bc6845c1a01fec8af9e02782426_105156_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Decrypted"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sustainable-development-goals/4.%20flag.png"
width="1245"
height="688"
srcset="https://qiaonpc.github.io/post/sustainable-development-goals/4.%20flag_hu70cd8129bcd94dc83babdbaf413fbf83_81768_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sustainable-development-goals/4.%20flag_hu70cd8129bcd94dc83babdbaf413fbf83_81768_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="434px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is:&lt;br>
&lt;code>sunctf25{sh3lly_1n_my_b3lly}&lt;/code>&lt;/p></description></item><item><title>0 Forensic Sanity Check</title><link>https://qiaonpc.github.io/post/0-forensic-sanity-check/</link><pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/0-forensic-sanity-check/</guid><description>&lt;h1 id="0-forensic-sanity-check---ctf-challenge-writeup">0 Forensic Sanity Check - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: 0 Forensic Sanity Check&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 10&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensic&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: A basic sanity check challenge meant to ensure players can access and retrieve files from a shared forensic resource. Serves as a warm-up to verify setup and tool readiness.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;h3 id="1-access-the-provided-resource">1. &lt;strong>Access the Provided Resource&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Navigate to the shared Google Drive folder:&lt;br>
&lt;a class="link" href="https://drive.google.com/drive/folders/1WVtgX9iRCgv20AhcITdq_s3F9kF64MKw?usp=sharing" target="_blank" rel="noopener"
>Forensic Challenge Files&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-locate-the-flag">2. &lt;strong>Locate the Flag&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Within the folder, a file named &lt;code>flag.txt&lt;/code> is clearly visible.&lt;/li>
&lt;li>Download and open the file to reveal the flag.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is:&lt;br>
&lt;code>prelim{warming_up_your_forensics_skills_for_real}&lt;/code>&lt;/p>
&lt;hr>
&lt;h2 id="summary">Summary
&lt;/h2>&lt;p>The &amp;ldquo;0 Forensic Sanity Check&amp;rdquo; challenge is a simple introductory task designed to verify that participants are able to access external resources and interact with basic forensic files. No analysis or tools are needed — just a functional internet connection and a browser.&lt;/p>
&lt;hr></description></item><item><title>1 Initial Vector</title><link>https://qiaonpc.github.io/post/1-initial-vector/</link><pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/1-initial-vector/</guid><description>&lt;h1 id="1-initial-vector---ctf-challenge-writeup">1 Initial Vector - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Initial Vector&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 10&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensic&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Investigate a compromised WordPress server, identify the attack vector, and determine which file was uploaded by the attacker using forensic analysis of the web server structure and logs.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;h3 id="1-initial-clue-wordpress-server">1. &lt;strong>Initial Clue: WordPress Server&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>From the description and directory structure, it’s clear we’re dealing with a &lt;strong>web server&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Navigated to the common web root: &lt;code>/var/www/html&lt;/code> and identified a &lt;strong>WordPress installation&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/1-initial-vector/wp.png"
width="1082"
height="567"
srcset="https://qiaonpc.github.io/post/1-initial-vector/wp_hu9cc35c0b3d19b7b7053893d01ff82fec_220675_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/1-initial-vector/wp_hu9cc35c0b3d19b7b7053893d01ff82fec_220675_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Wordpress"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-focusing-on-plugins">2. &lt;strong>Focusing on Plugins&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>WordPress plugins are often vulnerable, so the next step was to &lt;strong>enumerate installed plugins&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There were only &lt;strong>four plugins&lt;/strong>, making enumeration quick and focused.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/1-initial-vector/four%20plugins.png"
width="1064"
height="295"
srcset="https://qiaonpc.github.io/post/1-initial-vector/four%20plugins_hucecb3303a472a8ad486136739d1876e4_126974_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/1-initial-vector/four%20plugins_hucecb3303a472a8ad486136739d1876e4_126974_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Four Plugins Only"
class="gallery-image"
data-flex-grow="360"
data-flex-basis="865px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-identifying-a-known-vulnerability">3. &lt;strong>Identifying a Known Vulnerability&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Only one plugin — &lt;strong>Forminator&lt;/strong> — returned positive results for vulnerabilities.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reference: &lt;a class="link" href="https://patchstack.com/database/wordpress/plugin/forminator/vulnerability/wordpress-forminator-plugin-1-24-6-unauthenticated-arbitrary-file-upload-vulnerability" target="_blank" rel="noopener"
>Patchstack CVE&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Version &lt;strong>1.24.6&lt;/strong> of Forminator is affected by &lt;strong>CVE-2023-4596&lt;/strong>, which allows &lt;strong>unauthenticated arbitrary file uploads&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/1-initial-vector/vulnerable%20formiator.png"
width="1058"
height="770"
srcset="https://qiaonpc.github.io/post/1-initial-vector/vulnerable%20formiator_hu831df23b057b7b772703a876c9e44d9c_263447_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/1-initial-vector/vulnerable%20formiator_hu831df23b057b7b772703a876c9e44d9c_263447_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Vulnerable Forminator"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="4-understanding-the-exploit">4. &lt;strong>Understanding the Exploit&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Found a public Proof-of-Concept exploit script: &lt;a class="link" href="https://github.com/E1A/CVE-2023-4596/blob/main/exploit.py" target="_blank" rel="noopener"
>GitHub PoC&lt;/a>&lt;/li>
&lt;li>The script uploads a malicious file via a &lt;code>POST&lt;/code> request to &lt;code>wp-admin/admin-ajax.php&lt;/code>, then attempts to access it under the &lt;code>wp-content/uploads/YYYY/MM/&lt;/code> path.&lt;/li>
&lt;li>Access logs on the server reflected a &lt;strong>similar pattern&lt;/strong> of exploitation.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="5-hunting-for-the-uploaded-file">5. &lt;strong>Hunting for the Uploaded File&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>The hardest part of this challenge is the md5 hash as I didn&amp;rsquo;t know the format of the md5 hash, but we will go into it later.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>So after understanding the CVE, it is clear that after a POST request to wp-admin/admin-ajax.php, the script will go on to visit the uploads/2025/month folder for the things they uploaded.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>At first I didn&amp;rsquo;t really understand the attack, and just submitted the md5 hash of all the files directly under wp-admin/admin-ajax.php but most of what im submitting, at this point, is 192.168.x.x local addresses, which makes it useless as it is already stated that an attacker attacked them, no way the attacker is from local.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>So I started to pivot to look at other IP addresses. And I submitted random files as i go along, until i found a sus file, which is an image disguised php.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/1-initial-vector/disguised%20png.png"
width="1074"
height="677"
srcset="https://qiaonpc.github.io/post/1-initial-vector/disguised%20png_huf0e588d6e51c850834d66a0e0b447fee_274857_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/1-initial-vector/disguised%20png_huf0e588d6e51c850834d66a0e0b447fee_274857_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Disguied PNG"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>So i also submitted the md5 hash of the above mentioned file. But it didnt work.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/1-initial-vector/submit%20hash.png"
width="1066"
height="269"
srcset="https://qiaonpc.github.io/post/1-initial-vector/submit%20hash_huf1d836b0f4f069c1ebb21685e75346aa_84918_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/1-initial-vector/submit%20hash_huf1d836b0f4f069c1ebb21685e75346aa_84918_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Submit Hash"
class="gallery-image"
data-flex-grow="396"
data-flex-basis="951px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="6-final-struggle">6. &lt;strong>Final Struggle&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>I eventually gave up and just got the md5 of every file in the uploads folder and upload, and still fail. Which resulted in the following beautiful statistics.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/1-initial-vector/beautiful.png"
width="1061"
height="661"
srcset="https://qiaonpc.github.io/post/1-initial-vector/beautiful_hueedc97fcdafe6b0e8f7b0bcc0632c9f9_159612_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/1-initial-vector/beautiful_hueedc97fcdafe6b0e8f7b0bcc0632c9f9_159612_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Beautiful"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="7-flag">7. &lt;strong>Flag&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>I then changed my approach and submitted the lowercase md5 hash of the file and got the flag 💀&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is:&lt;br>
&lt;code>prelim{CVE-2023-4596_6abb43dc87e07140ba94beafda03baad}&lt;/code>&lt;/p>
&lt;hr>
&lt;h2 id="summary">Summary
&lt;/h2>&lt;p>&amp;ldquo;Initial Vector&amp;rdquo; was a forensic challenge centered on real-world web exploitation techniques. By identifying a known plugin vulnerability, analyzing server logs, and tracking uploaded payloads, players practiced both offensive understanding and defensive forensics. The final hurdle was simple yet sneaky — the &lt;strong>formatting of the MD5 hash&lt;/strong> — a subtle but effective way to test attention to detail.&lt;/p>
&lt;hr></description></item><item><title>2 Privesc</title><link>https://qiaonpc.github.io/post/2-privesc/</link><pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/2-privesc/</guid><description>&lt;h1 id="2-privesc---ctf-challenge-writeup">2 Privesc - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Privesc&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 10&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensic&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Investigate a suspected privilege escalation attack on a compromised Linux system. Identify traces of exploitation, determine the method used (e.g., kernel-level exploits), and locate the attacker’s payload or tool to recover the flag.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;h3 id="1-challenge-context">1. &lt;strong>Challenge Context&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>This challenge is a &lt;strong>continuation&lt;/strong> of a previous one involving a compromised web server.&lt;/li>
&lt;li>The focus now shifts from initial access to &lt;strong>post-exploitation and privilege escalation&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-identifying-the-exploit">2. &lt;strong>Identifying the Exploit&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>By analyzing &lt;code>auth.log&lt;/code>, strong evidence suggested the use of &lt;strong>Dirty Pipe (CVE-2022-0847)&lt;/strong>, a well-known Linux privilege escalation vulnerability.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Searched &lt;code>/tmp&lt;/code> for related payloads, but no direct Dirty Pipe exploit scripts were found.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>However, the logs clearly indicated its probable use, especially due to &lt;code>/tmp/dirty-pipe&lt;/code> references.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/2-privesc/dirtypipe-indications.png"
width="1081"
height="133"
srcset="https://qiaonpc.github.io/post/2-privesc/dirtypipe-indications_hud07adaab45f12808be33927454a86da5_69769_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/2-privesc/dirtypipe-indications_hud07adaab45f12808be33927454a86da5_69769_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Indication One"
class="gallery-image"
data-flex-grow="812"
data-flex-basis="1950px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/2-privesc/dirtypipe-indications%201.png"
width="1075"
height="759"
srcset="https://qiaonpc.github.io/post/2-privesc/dirtypipe-indications%201_hu61e173451e26ce70e22b5fff65bad9f7_222548_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/2-privesc/dirtypipe-indications%201_hu61e173451e26ce70e22b5fff65bad9f7_222548_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Indication Two"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/2-privesc/dirtypipe-indications%202.png"
width="1076"
height="259"
srcset="https://qiaonpc.github.io/post/2-privesc/dirtypipe-indications%202_hud992c5234fa824ab4ae42c81b353e00a_48637_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/2-privesc/dirtypipe-indications%202_hud992c5234fa824ab4ae42c81b353e00a_48637_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Indication Three"
class="gallery-image"
data-flex-grow="415"
data-flex-basis="997px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-following-false-leads">3. &lt;strong>Following False Leads&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Then I found the metasploit folder, which turns out to be a big rabbit hole, but I didn&amp;rsquo;t know back then.&lt;/li>
&lt;li>So i thought, oh, the dirtypipe was actually attacked but no files? And I saw a metasploit. Means the attacker used metasploit to attack.&lt;/li>
&lt;li>But metasploit has no artifact folders, so it&amp;rsquo;s hard to analyse and that is when I knew it was a rabbit hole.&lt;/li>
&lt;li>But I did learn some stuff through the metasploit, I looked into how the dirtypipe is used, how the exploits are made and eventually found that you can selectively attack binaries for dirtypipe.&lt;/li>
&lt;li>For examples, I can dirtypipe /bin/su so everytime you do su, you are root. For example&lt;/li>
&lt;li>With that in mind, I then assumed and guessed that when the log /tmp/dirty-pipe happened, that is around the time the dirtypipe attack took place.&lt;/li>
&lt;li>So the idea that I had was to find binaries that are modified during the time when dirtypipe attack took place. But this assumption turned out to be wrong but I still got the flag. 😂&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="4-using-timestamp-forensics">4. &lt;strong>Using Timestamp Forensics&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Based on &lt;code>/tmp/dirty-pipe&lt;/code> logs, the estimated time of attack was around &lt;code>2025-06-13 16:33&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/2-privesc/dirtypipe%20attack.png"
width="1076"
height="208"
srcset="https://qiaonpc.github.io/post/2-privesc/dirtypipe%20attack_huf69fdcf6004c87e5a94a841502c0d253_168264_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/2-privesc/dirtypipe%20attack_huf69fdcf6004c87e5a94a841502c0d253_168264_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="DirtyPipe Attack"
class="gallery-image"
data-flex-grow="517"
data-flex-basis="1241px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Used a shell one-liner to find &lt;strong>files modified around that timestamp&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> f in *&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> stat &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> grep -E &lt;span class="s1">&amp;#39;Change|Birth&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> grep -q &lt;span class="s1">&amp;#39;2025-06-13 1[6-9]:\|2025-06-13 2[0-3]:&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://qiaonpc.github.io/post/2-privesc/binaries.png"
width="1038"
height="435"
srcset="https://qiaonpc.github.io/post/2-privesc/binaries_hu355ce13a31edb2540cf3488dfd7352b8_36922_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/2-privesc/binaries_hu355ce13a31edb2540cf3488dfd7352b8_36922_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Binaries"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="572px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This surfaced several modified binaries. The key suspects were:&lt;/p>
&lt;ul>
&lt;li>&lt;code>upx&lt;/code> – also mentioned in &lt;code>errors.log&lt;/code>&lt;/li>
&lt;li>&lt;code>dpipe&lt;/code> – likely short for “dirty pipe”&lt;/li>
&lt;li>&lt;code>telexfil&lt;/code> – possibly “telegram exfiltration”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="5-finding-the-flag">5. &lt;strong>Finding the Flag&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Focused on &lt;code>dpipe&lt;/code>, since the name directly aligned with the exploit.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Running &lt;code>strings&lt;/code> on &lt;code>dpipe&lt;/code> revealed embedded data, including the &lt;strong>flag&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/2-privesc/image.png"
width="1047"
height="476"
srcset="https://qiaonpc.github.io/post/2-privesc/image_hu8b7b47ddfd79391c4c81978de8a3c681_247458_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/2-privesc/image_hu8b7b47ddfd79391c4c81978de8a3c681_247458_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Base64 Encoded Flag"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="527px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/2-privesc/image-1.png"
width="1024"
height="150"
srcset="https://qiaonpc.github.io/post/2-privesc/image-1_huaa94ba4620f709c53fee1775d33ecd27_93656_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/2-privesc/image-1_huaa94ba4620f709c53fee1775d33ecd27_93656_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="682"
data-flex-basis="1638px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is:&lt;br>
&lt;code>prelim{n4sty_l1nux_8ug_f0r_pr1v_3sc}&lt;/code>&lt;/p>
&lt;hr>
&lt;h2 id="summary">Summary
&lt;/h2>&lt;p>&amp;ldquo;Privesc&amp;rdquo; walks players through the reality of Linux post-exploitation forensics. By correlating timestamps, exploit logs, and suspicious binaries, the challenge simulates real-world attacker behavior using known CVEs like &lt;strong>Dirty Pipe&lt;/strong>. Despite some misdirections, thorough file inspection and creative assumptions led to successful flag extraction.&lt;/p>
&lt;hr></description></item><item><title>5 Persistent</title><link>https://qiaonpc.github.io/post/5-persistent/</link><pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/5-persistent/</guid><description>&lt;h1 id="5-persistent---ctf-challenge-writeup">5 Persistent - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Persistent&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 10&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Identify evidence of attacker persistence by analyzing remnants left on a compromised system, including outbound communication artifacts such as Pastebin links. Use digital forensic techniques to trace how the attacker maintained access or control.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;h3 id="1-context-from-prior-challenges">1. &lt;strong>Context from Prior Challenges&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>While working on earlier forensic challenges, multiple references to &lt;strong>Pastebin links&lt;/strong> were observed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This led to a hunch that attackers may have used public paste services for &lt;strong>command-and-control&lt;/strong> or persistence mechanisms.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/5-persistent/image.png"
width="1262"
height="755"
srcset="https://qiaonpc.github.io/post/5-persistent/image_hu12ab8ccd8c0a1219cb26b202543cd806_319594_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/5-persistent/image_hu12ab8ccd8c0a1219cb26b202543cd806_319594_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pastebin Indication"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-artifact-discovery">2. &lt;strong>Artifact Discovery&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Initially found and viewed these links using tools like &lt;strong>FTK Imager&lt;/strong>, but over time, lost access to the original FTK session.&lt;/li>
&lt;li>Pivoted to using &lt;code>strings&lt;/code> on the disk image or memory dump directly within a Linux environment to extract readable content.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-filtering-pastebin-links">3. &lt;strong>Filtering Pastebin Links&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Ran &lt;code>strings&lt;/code> and manually inspected output to &lt;strong>identify any suspicious URLs&lt;/strong>, especially those pointing to &lt;code>pastebin.com&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Several Pastebin links surfaced — a sign that the attacker might be using these to drop payloads or commands.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/5-persistent/image-1.png"
width="1152"
height="794"
srcset="https://qiaonpc.github.io/post/5-persistent/image-1_hu07042da12bd7f9d5f6347bc117fce9a9_665680_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/5-persistent/image-1_hu07042da12bd7f9d5f6347bc117fce9a9_665680_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pastebin Links"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="348px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="4-manual-link-checking">4. &lt;strong>Manual Link Checking&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Visited each of the Pastebin URLs manually.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Eventually discovered one link that &lt;strong>contained the flag directly&lt;/strong>, likely as part of a fake webshell, embedded configuration, or encoded marker.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/5-persistent/image-2.png"
width="927"
height="849"
srcset="https://qiaonpc.github.io/post/5-persistent/image-2_hu78656774c43b55cd585f64934fc61c90_101497_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/5-persistent/image-2_hu78656774c43b55cd585f64934fc61c90_101497_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="262px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is: &lt;code>prelim{b4yuf3dr4_m1n1_web5h3ll_p3rs15t3nt}&lt;/code>&lt;/p>
&lt;hr>
&lt;h2 id="summary">Summary
&lt;/h2>&lt;p>&amp;ldquo;Persistent&amp;rdquo; is a light yet insightful forensics challenge centered around identifying how attackers can leverage &lt;strong>public tools&lt;/strong> (like Pastebin) for &lt;strong>persistence and covert data handling&lt;/strong>. It reinforces the value of string searches and manual validation when automated tools fall short or time is limited.&lt;/p>
&lt;hr></description></item><item><title>Connection Issues</title><link>https://qiaonpc.github.io/post/connection-issues/</link><pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/connection-issues/</guid><description>&lt;h1 id="connection-issues-ctf-challenge-writeup">Connection Issues CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Connection Issues&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 100&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze suspicious network traffic to identify ARP poisoning activity and extract the exfiltrated flag data.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;Connection Issues&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Observations&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The challenge involves analyzing a &lt;code>.pcap&lt;/code> file with suspicious network behavior.&lt;/li>
&lt;li>One of the first hints is the presence of messages like &lt;code>duplicate use of &amp;lt;IP address&amp;gt; detected&lt;/code>, which indicates ARP spoofing or poisoning activity.&lt;/li>
&lt;li>ARP poisoning is a technique often used to intercept traffic between devices on a network.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extracting the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Used &lt;code>tshark&lt;/code> to extract relevant data from the suspicious traffic:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tshark -nr chall.pcap -Y &lt;span class="s1">&amp;#39;(eth.src == bc:24:11:78:c8:64) &amp;amp;&amp;amp; (eth.dst == bc:24:11:3e:f3:a5)&amp;#39;&lt;/span> -T fields -e &lt;span class="s2">&amp;#34;eth.trailer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>By narrowing down the interaction, spotted an unusual pattern in the data fields.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Extracted payload strings contained fragments that, when reassembled, revealed the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/connection-issues/extraction.png"
width="1310"
height="798"
srcset="https://qiaonpc.github.io/post/connection-issues/extraction_hua489d1ba28355aa40eae2abe0a4459fe_135566_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/connection-issues/extraction_hua489d1ba28355aa40eae2abe0a4459fe_135566_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Extracted"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="393px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/connection-issues/flag.png"
width="1488"
height="783"
srcset="https://qiaonpc.github.io/post/connection-issues/flag_hueaafef108831ed7d06e09e26d1e4f530_90843_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/connection-issues/flag_hueaafef108831ed7d06e09e26d1e4f530_90843_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>grey{d1d_1_jus7_ge7_p01son3d}&lt;/p></description></item><item><title>notsus.exe</title><link>https://qiaonpc.github.io/post/notsus.exe/</link><pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/notsus.exe/</guid><description>&lt;h1 id="notsusexe-ctf-challenge-writeup">Notsus.exe CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Notsus.exe&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 100&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze and decrypt files extracted from a ZIP archive using a known plaintext attack and reverse engineer a bundled Python executable to extract the final flag.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Understanding the Challenge&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Provided with a ZIP-based executable (&lt;code>dist-notsus.exe&lt;/code>) that, when unzipped, throws a bunch of errors.&lt;/li>
&lt;li>From prior experience, this behavior hints at a &lt;strong>classic PKZIP encryption&lt;/strong> challenge solvable with &lt;code>bkcrack&lt;/code>, a known plaintext attack tool.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Initial File Inspection&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Extracting the ZIP reveals two files:&lt;/p>
&lt;ul>
&lt;li>&lt;code>notsus.exe&lt;/code> — a Windows executable.&lt;/li>
&lt;li>&lt;code>flag.txt.yorm&lt;/code> — a file with an unfamiliar &lt;code>.yorm&lt;/code> extension, likely custom or encrypted.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>The path of least resistance is to first target the &lt;code>.exe&lt;/code>, since the standard DOS executable header often contains a predictable string:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">This program cannot be run in DOS mode.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://qiaonpc.github.io/post/notsus.exe/files%20in%20zip.png"
width="859"
height="215"
srcset="https://qiaonpc.github.io/post/notsus.exe/files%20in%20zip_hu67d2aeb7da56a75bb208a3063c335aae_55307_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/notsus.exe/files%20in%20zip_hu67d2aeb7da56a75bb208a3063c335aae_55307_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Files in Zip"
class="gallery-image"
data-flex-grow="399"
data-flex-basis="958px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identifying the Known Plaintext Offset&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The known string appears mid-file, not at the start. Therefore, the correct offset is crucial.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the command to locate it:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -aob &lt;span class="s1">$&amp;#39;\x21This program&amp;#39;&lt;/span> known.exe
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>This returns the byte offset (e.g., &lt;code>78&lt;/code>) which will be passed to &lt;code>bkcrack&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/notsus.exe/finding%20offset.png"
width="595"
height="101"
srcset="https://qiaonpc.github.io/post/notsus.exe/finding%20offset_hu1dc557c0bb423408dfcc261dba8dc14f_22310_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/notsus.exe/finding%20offset_hu1dc557c0bb423408dfcc261dba8dc14f_22310_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Finding Offset"
class="gallery-image"
data-flex-grow="589"
data-flex-basis="1413px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Preparing for Known Plaintext Attack&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Save the known plaintext string to a file:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> -ne &lt;span class="s1">&amp;#39;This program cannot be run in DOS mode.\r\r\n&amp;#39;&lt;/span> &amp;gt; exe_offset_plain.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Perform the attack:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./bkcrack -C ../dist-notsus.exe/files.zip -c notsus.exe -p exe_offset_plain.txt -o &lt;span class="m">78&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>This reveals the internal encryption keys:&lt;br>
&lt;code>d1608c35 d11d350a 4bc3da9c&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/notsus.exe/cracked.png"
width="770"
height="380"
srcset="https://qiaonpc.github.io/post/notsus.exe/cracked_huea01ffdb82a159ad03f035c9ec8ae034_66036_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/notsus.exe/cracked_huea01ffdb82a159ad03f035c9ec8ae034_66036_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Cracked"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decrypting the ZIP Contents&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Use the recovered keys to fully decrypt both files:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./bkcrack -C ../dist-notsus.exe/files.zip -c notsus.exe -k d1608c35 d11d350a 4bc3da9c -d notsus.exe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./bkcrack -C ../dist-notsus.exe/files.zip -c flag.txt.yorm -k d1608c35 d11d350a 4bc3da9c -d flag.txt.yorm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reverse Engineering &lt;code>notsus.exe&lt;/code>&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The executable is actually a Python program bundled using &lt;strong>PyInstaller&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the following tools to extract and decompile the executable:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://pyinstxtractor-web.netlify.app/" target="_blank" rel="noopener"
>Pyinstxtractor&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://pylingual.io/" target="_blank" rel="noopener"
>Pylingual&lt;/a> (for decompiling .pyc files)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Analyzing the code reveals the logic to decrypt the &lt;code>flag.txt.yorm&lt;/code> file using a custom decryption routine.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/notsus.exe/decompiled.png"
width="1238"
height="699"
srcset="https://qiaonpc.github.io/post/notsus.exe/decompiled_hu9c2dd01d078f8cce63a415bd556ac626_76692_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/notsus.exe/decompiled_hu9c2dd01d078f8cce63a415bd556ac626_76692_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Decompiled"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decrypting the Flag File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Re-implement the decryption algorithm based on the logic found in the decompiled script.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Running it on &lt;code>flag.txt.yorm&lt;/code> reveals the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/notsus.exe/flag.png"
width="584"
height="310"
srcset="https://qiaonpc.github.io/post/notsus.exe/flag_hu4d2ad73b5cf9b53d69a7f50ee04c12a6_56441_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/notsus.exe/flag_hu4d2ad73b5cf9b53d69a7f50ee04c12a6_56441_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>grey{this_program_cannot_be_run_in_dos_mode_hehe}&lt;/p></description></item><item><title>Baby Shark</title><link>https://qiaonpc.github.io/post/baby-shark/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/baby-shark/</guid><description>&lt;h1 id="baby-shark-ctf-challenge-writeup">Baby Shark CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Baby Shark&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 100&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze a pcap file to find and decode a hidden flag.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;Baby Shark&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Open the pcap File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Open the provided pcap file using Wireshark, a tool commonly used for analyzing network traffic captures.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Examine the Protocol Hierarchy&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Before diving into the packet details, check the protocol hierarchy in Wireshark to get a general overview of the captured traffic.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/baby-shark/protocol%20hieirarchy.png"
width="1447"
height="753"
srcset="https://qiaonpc.github.io/post/baby-shark/protocol%20hieirarchy_hue9467fe44a6acaf99acdedb97c2cc1dd_186032_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/baby-shark/protocol%20hieirarchy_hue9467fe44a6acaf99acdedb97c2cc1dd_186032_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Protocol Hieirarchy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Filter for HTTP Traffic&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Since HTTP traffic is typically straightforward to analyze, apply an HTTP filter in Wireshark to isolate it from other protocols.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/baby-shark/found%20http.png"
width="1758"
height="131"
srcset="https://qiaonpc.github.io/post/baby-shark/found%20http_hu542d5d497d9e86e1badee290515504a4_32407_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/baby-shark/found%20http_hu542d5d497d9e86e1badee290515504a4_32407_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="HTTP"
class="gallery-image"
data-flex-grow="1341"
data-flex-basis="3220px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identify the Suspicious HTTP Request&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Upon inspecting the HTTP traffic, you will notice a path that appears to be base64 encoded.&lt;/li>
&lt;li>This encoded string is likely the key to retrieving the flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decode the Seemingly Base64 String&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Copy the seemingly base64 encoded string and paste it into CyberChef&lt;/li>
&lt;li>Use the &amp;ldquo;Magic&amp;rdquo; operation in CyberChef to decode the string, it turns out to be base58&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Retrieve the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The decoded string reveals the flag for the challenge.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/baby-shark/flag.png"
width="1504"
height="694"
srcset="https://qiaonpc.github.io/post/baby-shark/flag_hu2acbda5491bd00837c2f47128beb3ca9_32248_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/baby-shark/flag_hu2acbda5491bd00837c2f47128beb3ca9_32248_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Call for Protocols</title><link>https://qiaonpc.github.io/post/call-for-protocols/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/call-for-protocols/</guid><description>&lt;h1 id="call-for-protocols-ctf-challenge-writeup">Call for Protocols CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Call for Protocols&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 200&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze encrypted TLS traffic to extract the flag.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Investigation&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Upon examining the HTTP requests, I discovered two important files: &lt;code>sslkeylog.txt&lt;/code> and &lt;code>brothers.pcapng&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>At first, I assumed that the &lt;code>sslkeylog.txt&lt;/code> file was meant to decrypt the &lt;code>call-of-protocols.pcapng&lt;/code> file, but further inspection of the protocol hierarchy suggested otherwise.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/call-for-protocols/found%20files.png"
width="431"
height="98"
srcset="https://qiaonpc.github.io/post/call-for-protocols/found%20files_hu7938edd9bf01bcedc35dfd72c26ab1d7_20390_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/call-for-protocols/found%20files_hu7938edd9bf01bcedc35dfd72c26ab1d7_20390_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Found files"
class="gallery-image"
data-flex-grow="439"
data-flex-basis="1055px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>File Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>I exported both files and began analyzing the &lt;code>brothers.pcapng&lt;/code> file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A closer look at the protocol hierarchy revealed a significant amount of TLS traffic, indicating that this data was encrypted and needed decryption.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/call-for-protocols/identify%20when%20to%20use%20ssl.png"
width="1390"
height="752"
srcset="https://qiaonpc.github.io/post/call-for-protocols/identify%20when%20to%20use%20ssl_hud834d209d9baefff0dacaf123436be02_154683_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/call-for-protocols/identify%20when%20to%20use%20ssl_hud834d209d9baefff0dacaf123436be02_154683_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="TLS"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decryption Process&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>To decrypt the TLS traffic, I utilized the &lt;code>sslkeylog.txt&lt;/code> file. Navigate to &lt;strong>Edit&lt;/strong> → &lt;strong>Preferences&lt;/strong> → &lt;strong>Protocols&lt;/strong> → &lt;strong>TLS&lt;/strong> and adding the Master Secret log file.&lt;/li>
&lt;li>After importing the key log file, the TLS traffic was successfully decrypted, and I could see that some of the encrypted packets had been converted into readable HTTP traffic.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Retrieval&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>I browsed through the decrypted HTTP traffic and located the flag within the relevant packets.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/call-for-protocols/flag.png"
width="1209"
height="639"
srcset="https://qiaonpc.github.io/post/call-for-protocols/flag_hu0abacec4b1f9172a0684a8968a466e4d_118591_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/call-for-protocols/flag_hu0abacec4b1f9172a0684a8968a466e4d_118591_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Graded Reels</title><link>https://qiaonpc.github.io/post/graded-reels/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/graded-reels/</guid><description>&lt;h1 id="graded-reels-ctf-challenge-writeup">Graded Reels CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Graded Reels&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 150&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze an image with a partially hidden flag by manipulating its properties.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;Graded Reels&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Inspection&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Open the provided image. At first glance, it seems like the flag is partially cut off at the bottom.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Using Online Tools&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Attempt to use tools like &lt;a class="link" href="https://fotoforensics.com/" target="_blank" rel="noopener"
>FotoForensics&lt;/a> to reveal any hidden or manipulated pixels at the bottom of the image.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unfortunately, FotoForensics does not clearly display the hidden portion of the flag, which means you will need to manually modify the image.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/graded-reels/fotoforensics%20failed.png"
width="1110"
height="776"
srcset="https://qiaonpc.github.io/post/graded-reels/fotoforensics%20failed_hu30311d3ccaeeca047abe08ada8a5520c_187003_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/graded-reels/fotoforensics%20failed_hu30311d3ccaeeca047abe08ada8a5520c_187003_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Fotoforensics Failed"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="343px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Manual Image Manipulation&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Use &lt;strong>ExifTool&lt;/strong> to extract the metadata of the image, including its height.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once you find the height value in the metadata, convert this value from decimal to hexadecimal.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/graded-reels/find%20height%20of%20image.png"
width="587"
height="121"
srcset="https://qiaonpc.github.io/post/graded-reels/find%20height%20of%20image_hu9a6c2c58001ae1396280801162d203c5_21017_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/graded-reels/find%20height%20of%20image_hu9a6c2c58001ae1396280801162d203c5_21017_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Find height of image"
class="gallery-image"
data-flex-grow="485"
data-flex-basis="1164px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/graded-reels/turn%20to%20hex.png"
width="571"
height="449"
srcset="https://qiaonpc.github.io/post/graded-reels/turn%20to%20hex_hu39f5207f8c23b5e59c1a7ac895b7d167_29937_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/graded-reels/turn%20to%20hex_hu39f5207f8c23b5e59c1a7ac895b7d167_29937_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Turn value to hex"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="305px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Hex Editing&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Open the image file in &lt;strong>HexEdit&lt;/strong> (or any hex editor).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Locate the height value in the hex editor by searching for the hexadecimal representation of the height you found earlier.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/graded-reels/find%20position%20of%20hex%20in%20hexedit.png"
width="1336"
height="182"
srcset="https://qiaonpc.github.io/post/graded-reels/find%20position%20of%20hex%20in%20hexedit_huf186f000fcc98cb7dfc6c1e7e5e2aa6a_44162_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/graded-reels/find%20position%20of%20hex%20in%20hexedit_huf186f000fcc98cb7dfc6c1e7e5e2aa6a_44162_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Find position of hex"
class="gallery-image"
data-flex-grow="734"
data-flex-basis="1761px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Modify the Image&amp;rsquo;s Height&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Increase the height of the image by modifying the corresponding value in the hex editor.&lt;/li>
&lt;li>After increasing the value, save the changes to the image file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reveal the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Open the modified image, and you should now be able to see the previously hidden portion of the image, revealing the complete flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/graded-reels/flag.png"
width="629"
height="422"
srcset="https://qiaonpc.github.io/post/graded-reels/flag_huefecb820cc9e31d89157e9f0401b9b21_107901_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/graded-reels/flag_huefecb820cc9e31d89157e9f0401b9b21_107901_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="flag"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="357px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Graduation Letter</title><link>https://qiaonpc.github.io/post/graduation-letter/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/graduation-letter/</guid><description>&lt;h1 id="graduation-letter-ctf-challenge-writeup">Graduation Letter CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Graduation Letter&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 200&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Extract hidden information from an image, leading to a password-protected PDF, and ultimately retrieve the flag.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;Graduation Letter&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Open the provided image, but at first glance, it appears to be a normal image with no visible clues.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Use ExifTool&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Run &lt;strong>ExifTool&lt;/strong> on the image to extract its metadata.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This reveals a hidden password embedded within the metadata, indicating that steganography might be involved.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/graduation-letter/found%20password.png"
width="972"
height="138"
srcset="https://qiaonpc.github.io/post/graduation-letter/found%20password_hu5a59f4028979890afc14b652290a3ac1_23547_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/graduation-letter/found%20password_hu5a59f4028979890afc14b652290a3ac1_23547_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Found password"
class="gallery-image"
data-flex-grow="704"
data-flex-basis="1690px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Attempt Steghide&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Based on the hint of a password, attempt to use &lt;strong>Steghide&lt;/strong> to extract hidden data from the image.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>However, &lt;strong>Steghide&lt;/strong> fails to retrieve anything.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/graduation-letter/steghide%20failed.png"
width="806"
height="141"
srcset="https://qiaonpc.github.io/post/graduation-letter/steghide%20failed_hu1a6a8280ba0b9407372e64d821e5ce99_25784_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/graduation-letter/steghide%20failed_hu1a6a8280ba0b9407372e64d821e5ce99_25784_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Steghide failed"
class="gallery-image"
data-flex-grow="571"
data-flex-basis="1371px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Try Binwalk&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Since Steghide didn’t work, use &lt;strong>Binwalk&lt;/strong> to analyze the image for any embedded files.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Binwalk successfully extracts a &lt;strong>ZIP&lt;/strong> file from the image.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/graduation-letter/binwalk%20extracted.png"
width="1350"
height="330"
srcset="https://qiaonpc.github.io/post/graduation-letter/binwalk%20extracted_hu23d13f05e1351938bd0018af5ff2d0a9_72050_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/graduation-letter/binwalk%20extracted_hu23d13f05e1351938bd0018af5ff2d0a9_72050_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Binwalk extracted items"
class="gallery-image"
data-flex-grow="409"
data-flex-basis="981px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extract and Unzip&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Unzip the extracted file using the password found earlier via ExifTool.&lt;/li>
&lt;li>This reveals a &lt;strong>password-protected PDF&lt;/strong> file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cracking the PDF&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It is hinted that &lt;strong>John the Ripper&lt;/strong> can help crack the PDF’s password.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;strong>pdf2john&lt;/strong> to convert the PDF file into a format that John the Ripper can process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run &lt;strong>John&lt;/strong> to crack the PDF password.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/graduation-letter/cracked%20password.png"
width="1194"
height="483"
srcset="https://qiaonpc.github.io/post/graduation-letter/cracked%20password_hud98e043e4bf73b9b45cb9ff1b0413556_119061_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/graduation-letter/cracked%20password_hud98e043e4bf73b9b45cb9ff1b0413556_119061_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Cracked password"
class="gallery-image"
data-flex-grow="247"
data-flex-basis="593px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Open the PDF&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Use the cracked password to open the PDF, and you will find the flag inside.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/graduation-letter/flag.png"
width="658"
height="451"
srcset="https://qiaonpc.github.io/post/graduation-letter/flag_hu88352d7d4f1efaa0482555d48ecfc436_135323_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/graduation-letter/flag_hu88352d7d4f1efaa0482555d48ecfc436_135323_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="350px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Lost Memories 1</title><link>https://qiaonpc.github.io/post/lost-memories-1/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/lost-memories-1/</guid><description>&lt;h1 id="lost-memories-1-ctf-challenge-writeup">Lost Memories 1 CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Lost Memories 1&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 100&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Determine the exact time when the memory dump was taken from a given memory dump file.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve &amp;ldquo;Lost Memories 1&amp;rdquo;, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Overview&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Lost Memories&amp;rdquo; is a series of five challenges related to memory forensics. The challenges can be solved in any order.&lt;/li>
&lt;li>In this specific challenge, the goal is to determine the time when the memory dump was taken.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analyzing the Memory Dump&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The challenge provides a &lt;strong>memory dump&lt;/strong> file.&lt;/li>
&lt;li>I chose to analyze it using &lt;strong>memprocfs&lt;/strong>, which allows mounting the memory dump as a file system.&lt;/li>
&lt;li>Memprocfs is useful as it provides a quick overview of the system&amp;rsquo;s processes, files, and other critical components, helping to piece together the system&amp;rsquo;s state.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identifying the Memory Dump Timing&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>To find when the memory dump was created, I decided to examine the running processes in the memory dump.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Typically, user-initiated processes are associated with &lt;strong>explorer.exe&lt;/strong> as the parent process, since most user applications are launched from the Windows Explorer interface.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I searched through the process tree for any unusual processes that could indicate memory dumping activity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>winpmem_mini_x&lt;/strong> stood out as a likely candidate for creating the memory dump.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lost-memories-1/processes.png"
width="1223"
height="508"
srcset="https://qiaonpc.github.io/post/lost-memories-1/processes_hudd8b1943f6f05227840f39dd4bcd96b5_81101_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lost-memories-1/processes_hudd8b1943f6f05227840f39dd4bcd96b5_81101_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Processes"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="577px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Final Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The flag is based on the timestamp of the memory dump, however, at the time of writing this writeup, I have already forgotten whether the flag requires the time to be in &lt;strong>+08:00&lt;/strong> or &lt;strong>+00:00&lt;/strong> timezone.&lt;/li>
&lt;li>Adjust the time accordingly based on the flag format.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Lost Memories 2</title><link>https://qiaonpc.github.io/post/lost-memories-2/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/lost-memories-2/</guid><description>&lt;h1 id="lost-memories-2-ctf-challenge-writeup">Lost Memories 2 CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Lost Memories 2&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 150&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Find the password of the system user.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Overview&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Lost Memories&amp;rdquo; is a series of five challenges. This particular challenge asks us to retrieve the &lt;strong>system user’s password&lt;/strong> from a memory dump.&lt;/li>
&lt;li>From the previous challenge, we know that the system user is &lt;strong>warlocksmurf&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analyzing the Memory Dump&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Although I used &lt;strong>memprocfs&lt;/strong> in the first challenge for quick analysis, it’s not suitable for dumping password hashes. So, I switched to using &lt;strong>Volatility&lt;/strong>, which is more effective for this specific task.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Dumping Password Hashes&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>There are two primary Volatility plugins used for extracting password hashes: &lt;strong>hashdump&lt;/strong> and &lt;strong>lsadump&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I first attempted the &lt;strong>hashdump&lt;/strong> plugin:&lt;/p>
&lt;ul>
&lt;li>This gave me the &lt;strong>NTLM&lt;/strong> and &lt;strong>LM&lt;/strong> hashes of the user &lt;strong>warlocksmurf&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>In case &lt;strong>hashdump&lt;/strong> doesn’t work, &lt;strong>lsadump&lt;/strong> is another option, but hashdump was successful in this case.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lost-memories-2/found%20hash.png"
width="1360"
height="257"
srcset="https://qiaonpc.github.io/post/lost-memories-2/found%20hash_hu4192405d8b0d45f3763a33f504797012_56697_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lost-memories-2/found%20hash_hu4192405d8b0d45f3763a33f504797012_56697_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="hashdump"
class="gallery-image"
data-flex-grow="529"
data-flex-basis="1270px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cracking the Password&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>I took the retrieved password hashes and submitted them to &lt;strong>CrackStation&lt;/strong>, an online tool for cracking hashed passwords.&lt;/li>
&lt;li>CrackStation successfully revealed the plaintext password from the NTLM hash.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Submitting the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The cracked password is submitted as the flag, wrapped in &lt;code>sunctf{}&lt;/code> format.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lost-memories-2/flag.png"
width="1411"
height="145"
srcset="https://qiaonpc.github.io/post/lost-memories-2/flag_hu14917d3d4479554fe9037ead2f13a12b_11232_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lost-memories-2/flag_hu14917d3d4479554fe9037ead2f13a12b_11232_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="973"
data-flex-basis="2335px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Lost Memories 3</title><link>https://qiaonpc.github.io/post/lost-memories-3/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/lost-memories-3/</guid><description>&lt;h1 id="lost-memories-3-ctf-challenge-writeup">Lost Memories 3 CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Lost Memories 3&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 200&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Identify the malicious process, its process ID, and its parent process ID.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Overview&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Lost Memories&amp;rdquo; is a series of five challenges that can be solved in any order. In this challenge, the goal is to find:
&lt;ul>
&lt;li>The &lt;strong>malicious process executable&lt;/strong>.&lt;/li>
&lt;li>The &lt;strong>process ID&lt;/strong> (PID).&lt;/li>
&lt;li>The &lt;strong>parent process ID&lt;/strong> (PPID).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Using Memprocfs&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>I returned to &lt;strong>memprocfs&lt;/strong>, a tool I’ve used previously for memory analysis. It allows for easy navigation and process enumeration.&lt;/li>
&lt;li>By examining the processes running on the system, I was able to identify the malicious process.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Key Findings&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The &lt;strong>malicious executable&lt;/strong>: &lt;code>inject0r.exe&lt;/code>.&lt;/li>
&lt;li>The &lt;strong>process ID (PID)&lt;/strong>: &lt;code>5904&lt;/code>.&lt;/li>
&lt;li>The &lt;strong>parent process ID (PPID)&lt;/strong>: &lt;code>7780&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Compiling the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Using the collected information, I submitted the flag in the required format: &lt;code>sunctf{}&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lost-memories-3/flag.png"
width="830"
height="83"
srcset="https://qiaonpc.github.io/post/lost-memories-3/flag_hu9179f49ce59c670f5d153ef066493058_11688_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lost-memories-3/flag_hu9179f49ce59c670f5d153ef066493058_11688_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="1000"
data-flex-basis="2400px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Lost Memories 4</title><link>https://qiaonpc.github.io/post/lost-memories-4/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/lost-memories-4/</guid><description>&lt;h1 id="lost-memories-4-ctf-challenge-writeup">Lost Memories 4 CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Lost Memories 4&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 300&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Extract the flag generated by the &lt;code>inject0r.exe&lt;/code> file.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Challenge Overview&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The goal is to extract the flag that is generated by the malicious process &lt;code>inject0r.exe&lt;/code>. This challenge is part of the &amp;ldquo;Lost Memories&amp;rdquo; series, and solving it requires analyzing how the flag is handled during runtime.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Initial Approach&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>I first dumped the process memory of &lt;code>inject0r.exe&lt;/code> using &lt;strong>strings&lt;/strong> in hopes of finding the flag directly in the executable&amp;rsquo;s memory. This approach failed.&lt;/li>
&lt;li>I then dumped the process memory of &lt;strong>notepad.exe&lt;/strong>, which was a child process of &lt;code>inject0r.exe&lt;/code>, suspecting the flag would be written there. Unfortunately, this also did not reveal the flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Running the Binary&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>After multiple failed attempts, I decided to run &lt;code>inject0r.exe&lt;/code> directly to observe its behavior. Initially, I thought the flag would be written to the &lt;strong>notepad&lt;/strong> application, but it wasn’t.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Instead, I realized the flag is dynamically stored in memory during runtime, and the address changes with every execution.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lost-memories-4/flag%20is%20not%20in%20notepad.png"
width="1342"
height="679"
srcset="https://qiaonpc.github.io/post/lost-memories-4/flag%20is%20not%20in%20notepad_hu7cb9ac8e83f5f60e19cfac215620abb1_26257_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lost-memories-4/flag%20is%20not%20in%20notepad_hu7cb9ac8e83f5f60e19cfac215620abb1_26257_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag not in notepad"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Using Cheat Engine&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>I launched &lt;strong>Cheat Engine&lt;/strong> for runtime analysis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>By searching for the string &lt;code>&amp;quot;flag&amp;quot;&lt;/code>, since it was mentioned that the flag would be stored it certain addresses.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lost-memories-4/encoded%20flag.png"
width="990"
height="807"
srcset="https://qiaonpc.github.io/post/lost-memories-4/encoded%20flag_huff98360fe794fab24d3035254a63e3e6_70862_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lost-memories-4/encoded%20flag_huff98360fe794fab24d3035254a63e3e6_70862_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Final Steps&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>I extracted the base64-encoded flag from memory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Decoded the base64 string to reveal the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lost-memories-4/flag.png"
width="1098"
height="672"
srcset="https://qiaonpc.github.io/post/lost-memories-4/flag_hu06ff1717a1d84216ad4c81b334faae02_25450_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lost-memories-4/flag_hu06ff1717a1d84216ad4c81b334faae02_25450_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="392px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Lost Memories 5</title><link>https://qiaonpc.github.io/post/lost-memories-5/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/lost-memories-5/</guid><description>&lt;h1 id="lost-memories-5-ctf-challenge-writeup">Lost Memories 5 CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Lost Memories 5&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 500&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Retrieve notes hidden in the computer of a user named &amp;ldquo;warlocksmurf.&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Challenge Overview&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>In this final challenge of the &amp;ldquo;Lost Memories&amp;rdquo; series, the task is to find specific notes hidden on warlocksmurf&amp;rsquo;s computer. The challenge focuses on extracting hidden information, particularly from document files.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analyzing the Memory Dump&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>I began by analyzing the memory dump for relevant files. While exploring, I found some &lt;strong>DOCX&lt;/strong> files, which hinted that the notes could be hidden within these documents.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lost-memories-5/found%20note.png"
width="1060"
height="302"
srcset="https://qiaonpc.github.io/post/lost-memories-5/found%20note_hudf09b07c73d600c72fa5e604b22c9d7e_23524_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lost-memories-5/found%20note_hudf09b07c73d600c72fa5e604b22c9d7e_23524_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Found note"
class="gallery-image"
data-flex-grow="350"
data-flex-basis="842px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Suspecting Macros&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>DOCX files are often used to hide information using macros, so I suspected that the solution could involve extracting and analyzing any embedded macros in the document files.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Using &lt;code>olevba&lt;/code>&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>I used &lt;strong>olevba&lt;/strong>, a tool for analyzing macros in Office files, to extract and review the macros in the DOCX file. The macros contained the necessary clues to recover the hidden notes.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Final Steps&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>After reviewing the macros, I found the flag embedded within the macro scripts.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Retrieved the flag and submitted it in the required format.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lost-memories-5/flag.png"
width="457"
height="318"
srcset="https://qiaonpc.github.io/post/lost-memories-5/flag_hu83625b7b19e2099a6a745a9264479c48_36555_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lost-memories-5/flag_hu83625b7b19e2099a6a745a9264479c48_36555_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="flag"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="344px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>MasterFanumTax</title><link>https://qiaonpc.github.io/post/masterfanumtax/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/masterfanumtax/</guid><description>&lt;h1 id="masterfanumtax-ctf-challenge-writeup">MasterFanumTax CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: MasterFanumTax&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 100&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Recover and decode the flag from a Master File Table (MFT) file.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Understanding MFT&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The &lt;strong>Master File Table (MFT)&lt;/strong> is a crucial component of the &lt;strong>NTFS&lt;/strong> file system. It stores metadata about every file and directory on the system, including attributes such as file name, size, creation/modification timestamps, and file content location on the disk. By analyzing the MFT, forensic analysts can reconstruct file activities, including deleted files and hidden data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Parsing the MFT&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>I used &lt;strong>Eric Zimmerman&amp;rsquo;s MFTECmd&lt;/strong> tool to parse the provided MFT file. This tool is excellent for extracting file names, timestamps, and other metadata from MFT entries.&lt;/li>
&lt;li>MFTECmd revealed the existence of a file named &lt;code>flag.txt&lt;/code>, which likely contained the flag. However, I was unable to retrieve the actual contents of this file using this tool alone.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extracting File Contents&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>To retrieve the content of &lt;code>flag.txt&lt;/code>, I switched to &lt;strong>MFTExplorer&lt;/strong>, another tool by Eric Zimmerman. MFTExplorer allowed me to explore the contents of the MFT in greater detail and successfully retrieve the encoded data from the file.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/masterfanumtax/found%20flag.png"
width="1561"
height="817"
srcset="https://qiaonpc.github.io/post/masterfanumtax/found%20flag_hu697eb1dcc57ed866178981a17a0fa6c9_514946_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/masterfanumtax/found%20flag_hu697eb1dcc57ed866178981a17a0fa6c9_514946_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Found Flag"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decoding the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The retrieved flag was encoded. I decoded the encoded flag into plaintext, which revealed the correct flag for submission.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/masterfanumtax/flag.png"
width="853"
height="696"
srcset="https://qiaonpc.github.io/post/masterfanumtax/flag_hu5cf2613f85c7f76bc78ce2d96d512f6c_12127_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/masterfanumtax/flag_hu5cf2613f85c7f76bc78ce2d96d512f6c_12127_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Sussy Disk 1</title><link>https://qiaonpc.github.io/post/sussy-disk-1/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/sussy-disk-1/</guid><description>&lt;h1 id="sussy-disk-1-ctf-challenge-writeup">Sussy Disk 1 CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Sussy Disk 1&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 100&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze the disk image to recover the flag hidden in the web browsing history.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Challenge Context&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;em>Sussy Disk&lt;/em> is a multi-part challenge series where each challenge involves analyzing different aspects of a disk image. In this first part, we are tasked with finding the flag by investigating web browsing history.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Initial Investigation&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Since this is a Windows-based challenge, I started by checking artifacts related to the default web browser, &lt;strong>Microsoft Edge&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After examining the history files for Edge, I found that the few URLs visited were related to downloading &lt;strong>Google Chrome&lt;/strong>, suggesting that Chrome was used for most of the browsing activity.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sussy-disk-1/download%20google.png"
width="1165"
height="341"
srcset="https://qiaonpc.github.io/post/sussy-disk-1/download%20google_hue96cc67d693c58b9fba94989d6b10311_33152_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sussy-disk-1/download%20google_hue96cc67d693c58b9fba94989d6b10311_33152_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Download Google"
class="gallery-image"
data-flex-grow="341"
data-flex-basis="819px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Google Chrome Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Next, I searched for Google Chrome artifacts on the disk. Chrome stores browsing history in an SQLite database located in the user profile directory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using a tool like &lt;strong>DB Browser for SQLite&lt;/strong>, I navigated to Chrome&amp;rsquo;s &lt;code>History&lt;/code> file and extracted the browsing history.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After reviewing the visited URLs, I found the flag embedded in the browsing history.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sussy-disk-1/google%20history%20db%20file.png"
width="1266"
height="369"
srcset="https://qiaonpc.github.io/post/sussy-disk-1/google%20history%20db%20file_hu26f5f62f38ceee3fa390df3293de24fb_59198_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sussy-disk-1/google%20history%20db%20file_hu26f5f62f38ceee3fa390df3293de24fb_59198_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Google DB File"
class="gallery-image"
data-flex-grow="343"
data-flex-basis="823px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Conclusion&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The flag was hidden in the browsing history of Google Chrome and was recovered by analyzing the browser&amp;rsquo;s SQLite database.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sussy-disk-1/flag.png"
width="368"
height="151"
srcset="https://qiaonpc.github.io/post/sussy-disk-1/flag_hu04515218cf4060267e681cfbdc9b4ca6_6663_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sussy-disk-1/flag_hu04515218cf4060267e681cfbdc9b4ca6_6663_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="584px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Sussy Disk 2</title><link>https://qiaonpc.github.io/post/sussy-disk-2/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/sussy-disk-2/</guid><description>&lt;h1 id="sussy-disk-2-ctf-challenge-writeup">Sussy Disk 2 CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Sussy Disk 2&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 150&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Recover a deleted file from the disk image.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Challenge Context&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The &lt;em>Sussy Disk&lt;/em> series continues with the second challenge, which involves recovering a deleted file from the disk image. Deleted files can often be restored from the Recycle Bin.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Understanding $I and $R Files&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>In Windows, when a file is deleted, it is not immediately removed from the disk. Instead, it is moved to the Recycle Bin, where it is represented by two types of files:
&lt;ul>
&lt;li>&lt;strong>$I Files&lt;/strong>: These are the information files that store metadata about the deleted file, such as the original filename, path, and deletion date.&lt;/li>
&lt;li>&lt;strong>$R Files&lt;/strong>: These are the actual data files that contain the content of the deleted file. They typically have the same base name as their corresponding $I files.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Finding the Deleted File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>I navigated to the &lt;code>$Recycle.Bin&lt;/code> directory on the disk image, where the deleted files are stored.&lt;/li>
&lt;li>I looked for pairs of $I and $R files to identify potential candidates for recovery. By examining the $R files, I was able to find the one corresponding to the flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Conclusion&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Clicking on the relevant $R file successfully revealed the hidden flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sussy-disk-2/flag.png"
width="667"
height="484"
srcset="https://qiaonpc.github.io/post/sussy-disk-2/flag_hubbfb45ab55668ae4f80f719162a45e79_40721_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sussy-disk-2/flag_hubbfb45ab55668ae4f80f719162a45e79_40721_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Sussy Disk 4</title><link>https://qiaonpc.github.io/post/sussy-disk-4/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/sussy-disk-4/</guid><description>&lt;h1 id="sussy-disk-4-ctf-challenge-writeup">Sussy Disk 4 CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Sussy Disk 4&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 400&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Unzip a password-protected zip file and retrieve the flag.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Challenge Context&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>This challenge is part of the &lt;em>Sussy Disk&lt;/em> series, where the main objective is to recover information from various digital artifacts. The fourth challenge involves unzipping a password-protected zip file found in the user&amp;rsquo;s document folder.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Initial Investigation&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Upon searching for the zip file in the documents folder, I quickly identified it but struggled to locate the password needed for extraction.&lt;/li>
&lt;li>I spent considerable time looking for hints throughout the disk image without success.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reading the Challenge Description&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>After several hours, I finally took a closer look at the challenge description, which mentioned that the user frequently utilized PowerShell. This was a critical hint that led me to consider that the zip file might have been created using PowerShell&amp;rsquo;s &lt;code>Compress-Archive&lt;/code> cmdlet, which sometimes uses passwords that could be referenced in the PowerShell command history.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Finding the Password&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>I accessed the PowerShell console history and searched through it to find any commands that could contain the password for the zip file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After a thorough search, I successfully located the password used to create the zip file.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sussy-disk-4/found%20password.png"
width="1002"
height="448"
srcset="https://qiaonpc.github.io/post/sussy-disk-4/found%20password_hu52cb0a255e2ed935dbc2846493b414b3_21580_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sussy-disk-4/found%20password_hu52cb0a255e2ed935dbc2846493b414b3_21580_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="found password"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="536px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extracting the Zip File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>With the password in hand, I used it to unzip the protected zip file.&lt;/li>
&lt;li>Inside the extracted contents, I found a base64 encoded message.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decoding the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>I decoded the base64 message using a decoding tool to retrieve the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sussy-disk-4/flag.png"
width="824"
height="614"
srcset="https://qiaonpc.github.io/post/sussy-disk-4/flag_hu560bd339caa34d61db59a0253409d59b_13898_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sussy-disk-4/flag_hu560bd339caa34d61db59a0253409d59b_13898_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="flag"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Sussy Disk 5</title><link>https://qiaonpc.github.io/post/sussy-disk-5/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/sussy-disk-5/</guid><description>&lt;h1 id="sussy-disk-5-ctf-challenge-writeup">Sussy Disk 5 CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Sussy Disk 5&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 590&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Find the flag through various hidden artifacts across the disk.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Challenge Context&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>This challenge is the final part of the &lt;em>Sussy Disk&lt;/em> series. It involves locating a flag that is split into three parts, each hidden in different locations or formats.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Finding Part 1&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The first part of the flag is located in a file named &lt;code>trojan.ps1&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I opened this PowerShell script and found an encrypted text.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After decoding the encrypted text, I successfully revealed the first part of the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sussy-disk-5/part1.png"
width="1019"
height="319"
srcset="https://qiaonpc.github.io/post/sussy-disk-5/part1_hu6b40abc17421fcd7eebbbf394c3fe30a_27595_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sussy-disk-5/part1_hu6b40abc17421fcd7eebbbf394c3fe30a_27595_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Part 1"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="766px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Finding Part 2&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The second part of the flag was hidden in the &lt;code>Pictures&lt;/code> folder.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In this folder, I discovered a PowerShell script responsible for encrypting an image file named &lt;code>part2.png&lt;/code> by using an XOR operation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To retrieve the second part of the flag, I had to reverse the XOR process. I XORed the encrypted image with the same key to decrypt it, revealing the second part of the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sussy-disk-5/part2.png"
width="1545"
height="754"
srcset="https://qiaonpc.github.io/post/sussy-disk-5/part2_hu16a29eaf5ca3e8c38383f43136857e5c_197276_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sussy-disk-5/part2_hu16a29eaf5ca3e8c38383f43136857e5c_197276_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Part 2"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Finding Part 3&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The third part of the flag was located in a text file at &lt;code>warlocksmurf\AppData\Local\Temp\brainrot.txt&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I navigated to the specified path and opened the &lt;code>brainrot.txt&lt;/code> file to find the last part of the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sussy-disk-5/part3.png"
width="290"
height="607"
srcset="https://qiaonpc.github.io/post/sussy-disk-5/part3_hu88d340c7dfad865043a3649439305139_7708_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sussy-disk-5/part3_hu88d340c7dfad865043a3649439305139_7708_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Part 3"
class="gallery-image"
data-flex-grow="47"
data-flex-basis="114px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Zelda Phishing Pond</title><link>https://qiaonpc.github.io/post/zelda-phishing-pond/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/zelda-phishing-pond/</guid><description>&lt;h1 id="zelda-phishing-pond-ctf-challenge-writeup">Zelda Phishing Pond CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Zelda Phishing Pond&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 200&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze a phishing email and extract the flag from encoded contents.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The challenge began with an email that contained encoded contents, which I needed to decode.&lt;/li>
&lt;li>Normally, files that are sent through email are encoded in base64 format&lt;/li>
&lt;li>Identify where the files are and decode the files using base64&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decoding Base64&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Upon decoding the first chunk of Base64, I found that it revealed an HTML page. However, this did not provide any useful information related to the flag.&lt;/li>
&lt;li>I then moved on to the second chunk of Base64, which resulted in a ZIP file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Unzipping the File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>After unzipping the ZIP file, I discovered a &lt;code>.lnk&lt;/code> file (a Windows shortcut). To extract useful information from this file, I used the &lt;code>lnkinfo&lt;/code> tool.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extracting Data from the LNK File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Running &lt;code>lnkinfo&lt;/code> on the &lt;code>.lnk&lt;/code> file revealed that there were Base64 encoded messages contained within it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I proceeded to decode this Base64 encoded message, which revealed a PowerShell script.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/zelda-phishing-pond/lnkinfo.png"
width="1355"
height="288"
srcset="https://qiaonpc.github.io/post/zelda-phishing-pond/lnkinfo_hu8d9dd9a546e76e9a42d2aef4d58e7c67_164441_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/zelda-phishing-pond/lnkinfo_hu8d9dd9a546e76e9a42d2aef4d58e7c67_164441_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="LNK Info"
class="gallery-image"
data-flex-grow="470"
data-flex-basis="1129px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Final Decoding&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Inside the PowerShell script, there was another Base64 encoded message. I decoded this final message to uncover the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/zelda-phishing-pond/powershell.png"
width="866"
height="569"
srcset="https://qiaonpc.github.io/post/zelda-phishing-pond/powershell_hu381ada1184305e2259a34f6022fcb621_147516_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/zelda-phishing-pond/powershell_hu381ada1184305e2259a34f6022fcb621_147516_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Powershell"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/zelda-phishing-pond/flag.png"
width="815"
height="495"
srcset="https://qiaonpc.github.io/post/zelda-phishing-pond/flag_hu7acc1f49e47bb829163868b7fa8cb3a2_35197_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/zelda-phishing-pond/flag_hu7acc1f49e47bb829163868b7fa8cb3a2_35197_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Apache Logs</title><link>https://qiaonpc.github.io/post/apache-logs/</link><pubDate>Sun, 08 Sep 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/apache-logs/</guid><description>&lt;h1 id="forensics-ctf-challenge-writeup">Forensics CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Apache Logs&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 1&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze the Apache log file to uncover and decode suspicious data.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Log Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The provided Apache log file is relatively short.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Upon reviewing the logs, identify a URL with &lt;strong>URL-encoded&lt;/strong> suspicious data.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/apache-logs/found%20url%20encoded.png"
width="1433"
height="286"
srcset="https://qiaonpc.github.io/post/apache-logs/found%20url%20encoded_hud36002e879f66875a9519217911e17fa_40464_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/apache-logs/found%20url%20encoded_hud36002e879f66875a9519217911e17fa_40464_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Found URL Encoding"
class="gallery-image"
data-flex-grow="501"
data-flex-basis="1202px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>URL Decoding&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Decode the URL using standard URL decoding techniques to reveal an ASCII representation of letters.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/apache-logs/decode%20url%20encoding.png"
width="1405"
height="737"
srcset="https://qiaonpc.github.io/post/apache-logs/decode%20url%20encoding_hu880b7d47b08b0f2b1dbef2c706a387b1_112955_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/apache-logs/decode%20url%20encoding_hu880b7d47b08b0f2b1dbef2c706a387b1_112955_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Decode URL Encoding"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Conversion&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Convert the ASCII representation into readable text, which reveals the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/apache-logs/flag.png"
width="809"
height="289"
srcset="https://qiaonpc.github.io/post/apache-logs/flag_hucae165c9f7bab897570a7cb81e66df86_7120_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/apache-logs/flag_hucae165c9f7bab897570a7cb81e66df86_7120_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="279"
data-flex-basis="671px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>FSIIECTF{XXXXXXXXXX}&lt;/p></description></item><item><title>Auth Log</title><link>https://qiaonpc.github.io/post/auth-log/</link><pubDate>Sun, 08 Sep 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/auth-log/</guid><description>&lt;h1 id="forensics-ctf-challenge-writeup">Forensics CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Auth Log&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 1&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Answer five questions based on the provided authentication logs.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Attack Type&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>By analyzing the logs, it becomes evident that there are multiple failed login attempts, indicating a &lt;strong>brute force attack&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/auth-log/brute%20force%20login.png"
width="931"
height="390"
srcset="https://qiaonpc.github.io/post/auth-log/brute%20force%20login_huc39495ac7917608915afde1cb9b7bb16_67642_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/auth-log/brute%20force%20login_huc39495ac7917608915afde1cb9b7bb16_67642_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Brute Force Attack"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="572px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Protocol&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The protocol used in the attack is &lt;strong>SSH&lt;/strong>, as seen in the logs.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Vulnerability Used&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The attack involved privilege escalation, specifically related to &lt;strong>sudo&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/auth-log/sudo.png"
width="1377"
height="212"
srcset="https://qiaonpc.github.io/post/auth-log/sudo_hue7795272f71a5027516fa988db9c1f7a_36333_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/auth-log/sudo_hue7795272f71a5027516fa988db9c1f7a_36333_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sudo"
class="gallery-image"
data-flex-grow="649"
data-flex-basis="1558px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Vulnerable Binary&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>There are command logs mentioning &lt;strong>openvpn&lt;/strong>, which is the vulnerable binary.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>MITRE Sub Technique ID&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A search identified the relevant MITRE ID for this attack: &lt;strong>T1136.001&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/auth-log/persistence.png"
width="1375"
height="337"
srcset="https://qiaonpc.github.io/post/auth-log/persistence_hua59122f5c56fe0749f09213e17087c98_58189_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/auth-log/persistence_hua59122f5c56fe0749f09213e17087c98_58189_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Persistence"
class="gallery-image"
data-flex-grow="408"
data-flex-basis="979px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>FSIIECTF{bruteforce_ssh_sudo_openvpn_T1136.001}&lt;/p></description></item><item><title>USBChall</title><link>https://qiaonpc.github.io/post/usbchall/</link><pubDate>Sun, 08 Sep 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/usbchall/</guid><description>&lt;h1 id="forensics-ctf-challenge-writeup">Forensics CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: USBChall&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 1&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>I started by running the &lt;strong>file&lt;/strong> command on the given mysterious file.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It identified the file as a &lt;strong>Linux file system&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/usbchall/enumeration.png"
width="1227"
height="73"
srcset="https://qiaonpc.github.io/post/usbchall/enumeration_hue58b4f90ce3568ae27d66ba60c5df8a5_4257_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/usbchall/enumeration_hue58b4f90ce3568ae27d66ba60c5df8a5_4257_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Enumeration"
class="gallery-image"
data-flex-grow="1680"
data-flex-basis="4033px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>I used &lt;strong>foremost&lt;/strong> to extract the files from the system.&lt;/p>
&lt;ul>
&lt;li>Only two files were extracted: a &lt;strong>docx&lt;/strong> file and an &lt;strong>image&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>The contents of both the &lt;strong>docx&lt;/strong> and the &lt;strong>image&lt;/strong> seemed empty and provided no useful information.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I then used &lt;strong>exiftool&lt;/strong> on the image, and this revealed the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/usbchall/flag.png"
width="957"
height="200"
srcset="https://qiaonpc.github.io/post/usbchall/flag_hu67478114379dc6e9feddeb5166650748_9396_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/usbchall/flag_hu67478114379dc6e9feddeb5166650748_9396_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="478"
data-flex-basis="1148px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>FSIIECTF{XXXXXXXXXX}&lt;/p></description></item><item><title>Lock?</title><link>https://qiaonpc.github.io/post/lock/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/lock/</guid><description>&lt;h1 id="lock-ctf-challenge-writeup">Lock? CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Lock?&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 500&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: DFIR (Digital Forensics and Incident Response)&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Recover the flag from a BitLocker-encrypted disk image by analyzing logs and decrypting the image.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lock/challenge.png"
width="653"
height="948"
srcset="https://qiaonpc.github.io/post/lock/challenge_hu120854b6ac4413d85b0f0cf2e5c86454_116125_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lock/challenge_hu120854b6ac4413d85b0f0cf2e5c86454_116125_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Challenge"
class="gallery-image"
data-flex-grow="68"
data-flex-basis="165px"
>&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;Lock?&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>We are provided with multiple files, including various event logs.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analyzing Event Logs&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Use Hayabusa to analyze the &lt;code>.evtx&lt;/code> files.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Although Hayabusa didn’t provide extensive results, it revealed a password useful for decrypting the BitLocker image.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lock/hayabusa%20output.png"
width="1233"
height="488"
srcset="https://qiaonpc.github.io/post/lock/hayabusa%20output_huc2abd5c305811c56c5999d3a553bb96e_29756_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lock/hayabusa%20output_huc2abd5c305811c56c5999d3a553bb96e_29756_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Bitlocker Output"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="606px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Handling the Disk Image&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &lt;code>.img&lt;/code> file is identified as a DOS file based on the &lt;code>file&lt;/code> command output.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Attempt to mount the image using Autopsy, but encounter an error indicating that it is a BitLocker-encrypted volume.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lock/file%20output.png"
width="1317"
height="187"
srcset="https://qiaonpc.github.io/post/lock/file%20output_huf0d32ca2c86369b329adf1ad9fe9d748_49628_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lock/file%20output_huf0d32ca2c86369b329adf1ad9fe9d748_49628_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="File Output"
class="gallery-image"
data-flex-grow="704"
data-flex-basis="1690px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lock/autopsy.png"
width="1365"
height="708"
srcset="https://qiaonpc.github.io/post/lock/autopsy_hucded28c6ec367bdf12ac5bff531db922_83457_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lock/autopsy_hucded28c6ec367bdf12ac5bff531db922_83457_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Autopsy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Mounting the Disk Image&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Research shows that double-clicking the &lt;code>.img&lt;/code> file on Linux can automatically mount the disk.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enter the password obtained from the logs to unlock and mount the encrypted disk image.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lock/mount.png"
width="1367"
height="748"
srcset="https://qiaonpc.github.io/post/lock/mount_hufdebe59e3807e09518bb92b68edbb941_513724_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lock/mount_hufdebe59e3807e09518bb92b68edbb941_513724_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Mount"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="438px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extracting the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Once the disk is mounted, navigate through the filesystem to locate the flag.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Retrieve the flag from the accessible filesystem.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lock/flag.png"
width="1023"
height="417"
srcset="https://qiaonpc.github.io/post/lock/flag_hu908995cec0deb171addd5820ef1c0817_44029_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lock/flag_hu908995cec0deb171addd5820ef1c0817_44029_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="588px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag&lt;/strong>: &amp;ldquo;ihack24{6f6450f1695e405557486a2be402dc27}&amp;rdquo;&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Memory</title><link>https://qiaonpc.github.io/post/memory/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/memory/</guid><description>&lt;h1 id="memory-ctf-challenge-writeup">Memory CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Memory&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 500&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: DFIR (Digital Forensics and Incident Response)&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Identify the user that was created based on a memory dump from a Windows system.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/memory/challenge.png"
width="680"
height="899"
srcset="https://qiaonpc.github.io/post/memory/challenge_hu8d943007e1db52133e46709e65b3b886_140588_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/memory/challenge_hu8d943007e1db52133e46709e65b3b886_140588_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Challenge"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="181px"
>&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;Memory&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Setup&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>We are tasked with finding the user created on a Windows system based on a memory dump.&lt;/li>
&lt;li>Given the filename suggests a Windows environment, use &lt;code>memprocfs&lt;/code> to streamline the analysis of the memory dump, avoiding manual extraction with tools like Volatility.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analyzing Powershell Commands&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Navigate to &lt;code>/sys/proc/proc-v.txt&lt;/code> within &lt;code>memprocfs&lt;/code> to locate and review PowerShell commands executed during the memory capture.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Search for commands that involve executing base64 encoded strings.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/memory/powershell.png"
width="1654"
height="857"
srcset="https://qiaonpc.github.io/post/memory/powershell_hue65ed31818b4dd708707f0361788db9c_127081_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/memory/powershell_hue65ed31818b4dd708707f0361788db9c_127081_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Powershell"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="463px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decoding Base64 Commands&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Identify and extract the base64 encoded strings from the PowerShell commands.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Decode the base64 strings to reveal the underlying PowerShell commands.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/memory/decoded%20base64.png"
width="961"
height="655"
srcset="https://qiaonpc.github.io/post/memory/decoded%20base64_hu1bdccd6f67bbc62de5df5f17f71ece72_78051_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/memory/decoded%20base64_hu1bdccd6f67bbc62de5df5f17f71ece72_78051_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Decoded Base64"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Executing and Reversing PowerShell Commands&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Run the decoded PowerShell commands to reveal their functionality.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Analyze the output to determine which user was created.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/memory/powrshell%20executed.png"
width="1905"
height="786"
srcset="https://qiaonpc.github.io/post/memory/powrshell%20executed_hue222b5147006b13eb2d294ecc62a763b_89320_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/memory/powrshell%20executed_hue222b5147006b13eb2d294ecc62a763b_89320_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Powershell Executed"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Finding the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>With the user information identified from the PowerShell commands, make the flag&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/memory/flalg.png"
width="446"
height="620"
srcset="https://qiaonpc.github.io/post/memory/flalg_huc76f719ed256e5c2a64a1faeb5f83f53_11865_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/memory/flalg_huc76f719ed256e5c2a64a1faeb5f83f53_11865_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="71"
data-flex-basis="172px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag&lt;/strong>: &lt;strong>ihack24{sysadmin_SYSAdmin}&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Mystery File</title><link>https://qiaonpc.github.io/post/mystery-file/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/mystery-file/</guid><description>&lt;h1 id="mystery-file-ctf-challenge-writeup">Mystery File CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Mystery File&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 500&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: DFIR (Digital Forensics and Incident Response)&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Deobfuscate a script within a ZIP file to uncover a domain and retrieve the flag from the associated webpage.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mystery-file/challenge.png"
width="658"
height="949"
srcset="https://qiaonpc.github.io/post/mystery-file/challenge_hu0d2feb64800025e2a7752003c4e43b04_107338_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mystery-file/challenge_hu0d2feb64800025e2a7752003c4e43b04_107338_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Challenge"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="166px"
>&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;Mystery File&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>We are given a file named &lt;code>program.bin&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the &lt;code>file&lt;/code> command to identify the nature of the file, which reveals it is a ZIP archive.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mystery-file/found%20zip%20file.png"
width="1124"
height="119"
srcset="https://qiaonpc.github.io/post/mystery-file/found%20zip%20file_hu0c975e5c8d5da052906b6db9206065cf_26423_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mystery-file/found%20zip%20file_hu0c975e5c8d5da052906b6db9206065cf_26423_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Zip File"
class="gallery-image"
data-flex-grow="944"
data-flex-basis="2266px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extracting the ZIP File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Unzip &lt;code>program.bin&lt;/code> to obtain its contents, which include a large, obfuscated Bash script.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mystery-file/obfsucataed%201.png"
width="1532"
height="755"
srcset="https://qiaonpc.github.io/post/mystery-file/obfsucataed%201_huc85426c768a5dd35125b4f561d3ca1d8_299139_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mystery-file/obfsucataed%201_huc85426c768a5dd35125b4f561d3ca1d8_299139_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Obfuscated"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Running the Script&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>To handle the obfuscation, use an online Bash interpreter such as &lt;a class="link" href="https://tio.run/#bash" target="_blank" rel="noopener"
>TIO.run&lt;/a> to execute the script.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The initial execution of the script shows no useful output.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mystery-file/nothing%20to%20see%20here.png"
width="800"
height="200"
srcset="https://qiaonpc.github.io/post/mystery-file/nothing%20to%20see%20here_hue8d2dd89dd546cb49f8d59182eb2339e_11969_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mystery-file/nothing%20to%20see%20here_hue8d2dd89dd546cb49f8d59182eb2339e_11969_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Nothing to see"
class="gallery-image"
data-flex-grow="400"
data-flex-basis="960px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Deobfuscating the Script&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Modify the script to replace &lt;code>eval&lt;/code> with &lt;code>echo&lt;/code>. This allows you to see the script&amp;rsquo;s output, revealing a new, similarly obfuscated Bash script.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Repeat the process of replacing &lt;code>eval&lt;/code> with &lt;code>echo&lt;/code> to progressively reveal less obfuscated versions of the script.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mystery-file/less%20obfuscated.png"
width="1565"
height="556"
srcset="https://qiaonpc.github.io/post/mystery-file/less%20obfuscated_hud96892a3ef132c5bc0f45259f4868424_97552_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mystery-file/less%20obfuscated_hud96892a3ef132c5bc0f45259f4868424_97552_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Less Obfuscated"
class="gallery-image"
data-flex-grow="281"
data-flex-basis="675px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Uncovering the Domain and Flag Location&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>After several iterations, the script becomes sufficiently deobfuscated to understand its content.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The script contains two base64 encoded strings. Decode the first string to reveal a domain name.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Decode the second string to find the URL where the flag can be obtained.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mystery-file/beef.png"
width="1900"
height="751"
srcset="https://qiaonpc.github.io/post/mystery-file/beef_hu9dc06f89b3f9b884981a5a9876a7b6fa_131978_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mystery-file/beef_hu9dc06f89b3f9b884981a5a9876a7b6fa_131978_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Beef"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="607px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mystery-file/flag%20link.png"
width="980"
height="792"
srcset="https://qiaonpc.github.io/post/mystery-file/flag%20link_hu5413b8efa87feb0ad89dd91e45ddf6cc_59774_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mystery-file/flag%20link_hu5413b8efa87feb0ad89dd91e45ddf6cc_59774_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Link"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="296px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Retrieving the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Visit the webpage indicated by the decoded domain to locate and extract the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mystery-file/flag.png"
width="1436"
height="412"
srcset="https://qiaonpc.github.io/post/mystery-file/flag_hu0eaebece33cc29eb0fe6df467c3b5562_22785_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mystery-file/flag_hu0eaebece33cc29eb0fe6df467c3b5562_22785_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="348"
data-flex-basis="836px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag&lt;/strong>: &lt;strong>ihack24{0bfusc4t3d_thr34t3}&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>SSH Compromised</title><link>https://qiaonpc.github.io/post/ssh-compromised/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/ssh-compromised/</guid><description>&lt;h1 id="ssh-compromised-ctf-challenge-writeup">SSH Compromised CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: SSH Compromised&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 500&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Incident Handling&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze a large log file to identify a compromised SSH login.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;SSH Compromised&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Start by examining the large log file provided for clues regarding SSH logins.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Filtering the Log File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Reduce the amount of noise in the log file by removing lines containing common failure and error messages:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Remove lines with&lt;/strong>: &amp;ldquo;fail&amp;rdquo;&lt;/li>
&lt;li>&lt;strong>Remove lines with&lt;/strong>: &amp;ldquo;error&amp;rdquo;&lt;/li>
&lt;li>&lt;strong>Remove lines with&lt;/strong>: &amp;ldquo;invalid&amp;rdquo;&lt;/li>
&lt;li>&lt;strong>Remove lines with&lt;/strong>: &amp;ldquo;unknown&amp;rdquo;&lt;/li>
&lt;li>&lt;strong>Remove lines with&lt;/strong>: &amp;ldquo;closed&amp;rdquo; and &amp;ldquo;disconnect&amp;rdquo;&lt;/li>
&lt;li>&lt;strong>Remove lines with&lt;/strong>: &amp;ldquo;ignoring&amp;rdquo;&lt;/li>
&lt;li>&lt;strong>Remove lines with&lt;/strong>: &amp;ldquo;reset&amp;rdquo; and &amp;ldquo;unable&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/ssh-compromised/removing%20fail.png"
width="1655"
height="492"
srcset="https://qiaonpc.github.io/post/ssh-compromised/removing%20fail_hu086a0563318a2698c8c85c5872b0efec_443907_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/ssh-compromised/removing%20fail_hu086a0563318a2698c8c85c5872b0efec_443907_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Fail Removed"
class="gallery-image"
data-flex-grow="336"
data-flex-basis="807px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/ssh-compromised/removing%20error.png"
width="1653"
height="465"
srcset="https://qiaonpc.github.io/post/ssh-compromised/removing%20error_hu107b2f7b35640c4cad1e86e5ea675a10_420869_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/ssh-compromised/removing%20error_hu107b2f7b35640c4cad1e86e5ea675a10_420869_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Error Removed"
class="gallery-image"
data-flex-grow="355"
data-flex-basis="853px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/ssh-compromised/removed%20almost%20everything.png"
width="1575"
height="720"
srcset="https://qiaonpc.github.io/post/ssh-compromised/removed%20almost%20everything_hu277baf15dff4a3b28f3dedd5dd9ebafb_675357_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/ssh-compromised/removed%20almost%20everything_hu277baf15dff4a3b28f3dedd5dd9ebafb_675357_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Removed Almost Everything"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="525px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identifying Successful Logins&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>After filtering, focus on the remaining lines to identify successful logins.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Search for entries related to the user &lt;code>sysadmin&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/ssh-compromised/foud%20stuff.png"
width="1385"
height="262"
srcset="https://qiaonpc.github.io/post/ssh-compromised/foud%20stuff_huda2b7c3376e573deae58f166edb2372f_231376_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/ssh-compromised/foud%20stuff_huda2b7c3376e573deae58f166edb2372f_231376_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Found Stuff"
class="gallery-image"
data-flex-grow="528"
data-flex-basis="1268px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extracting Relevant Information&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>From the filtered results, find entries showing successful logins for the user &lt;code>sysadmin&lt;/code>.&lt;/li>
&lt;li>Identify the IP address associated with these logins. In this case, the IP address is &lt;code>149.102.244.68&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Finding the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Use the extracted IP address and user information to locate the flag related to the SSH compromise.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/ssh-compromised/flag.png"
width="1643"
height="331"
srcset="https://qiaonpc.github.io/post/ssh-compromised/flag_hudb47794599e6a68ebc99d45af972e165_324345_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/ssh-compromised/flag_hudb47794599e6a68ebc99d45af972e165_324345_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="496"
data-flex-basis="1191px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag&lt;/strong>: &lt;strong>ihack24{149.102.244.68_sysadmin}&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>LastHope</title><link>https://qiaonpc.github.io/post/lasthope/</link><pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/lasthope/</guid><description>&lt;h1 id="lasthope-ctf-challenge-writeup">LastHope CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: LastHope&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 50&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Network&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: The challenge involves cracking a WiFi password using captured WiFi packets.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>Here&amp;rsquo;s a step-by-step solution for the LastHope CTF challenge:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Capturing WiFi Packets&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Loaded the provided file in Wireshark to analyze the network traffic.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Observed a large number of 802.11 packets, indicating WiFi traffic.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lasthope/protocol%20hierachy.png"
width="1395"
height="255"
srcset="https://qiaonpc.github.io/post/lasthope/protocol%20hierachy_hu82ad58b3f730d6069585f2b3db44868f_51407_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lasthope/protocol%20hierachy_hu82ad58b3f730d6069585f2b3db44868f_51407_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Protocol Hierachy"
class="gallery-image"
data-flex-grow="547"
data-flex-basis="1312px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identifying Access Point MAC Address&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Identified the MAC address of the access point, which can be used to crack the WiFi password.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Identified the SSID of the WiFi network as &amp;ldquo;Rawsec Command Centre.&amp;rdquo;&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lasthope/mac%20address.png"
width="1617"
height="147"
srcset="https://qiaonpc.github.io/post/lasthope/mac%20address_hu51b309c2d8624f944de44d225e546455_98599_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lasthope/mac%20address_hu51b309c2d8624f944de44d225e546455_98599_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Mac Address &amp; SSID"
class="gallery-image"
data-flex-grow="1100"
data-flex-basis="2640px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cracking WiFi Password&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Used a tool like Aircrack-ng with the rockyou.txt wordlist to crack the WiFi password associated with the captured packets.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lasthope/aircrack.png"
width="1333"
height="706"
srcset="https://qiaonpc.github.io/post/lasthope/aircrack_hu253836f781200c0690abd60451664c9c_105195_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lasthope/aircrack_hu253836f781200c0690abd60451664c9c_105195_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Aircrack"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Obtaining the Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The cracked WiFi password is the flag for this challenge.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/lasthope/flag.png"
width="1345"
height="704"
srcset="https://qiaonpc.github.io/post/lasthope/flag_hu07f59e773c7e8a57ac3de7e578ee5b9a_123782_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/lasthope/flag_hu07f59e773c7e8a57ac3de7e578ee5b9a_123782_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>The LastHope challenge required participants to crack a WiFi password using captured network packets. By analyzing the packets in Wireshark and using tools like Aircrack-ng with wordlists, participants could obtain the flag associated with the cracked WiFi password.&lt;/p></description></item><item><title>Mobile</title><link>https://qiaonpc.github.io/post/mobile/</link><pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/mobile/</guid><description>&lt;h1 id="mobile-ctf-challenge-writeup">Mobile CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Mobile&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 290&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: DFIR (Digital Forensics and Incident Response)&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: The challenge involves extracting information from a PDF document related to mobile forensics.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>Here&amp;rsquo;s a brief overview of the solution for the Mobile CTF challenge:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Approach&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Started by examining the 3000-page PDF document provided for any visible clues or patterns.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Noticed that certain pages were scribbled over, indicating potential hidden information.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mobile/scribble.png"
width="747"
height="557"
srcset="https://qiaonpc.github.io/post/mobile/scribble_hubf6dd8a4bb6ed3cf7bd45a784343ae80_46714_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/scribble_hubf6dd8a4bb6ed3cf7bd45a784343ae80_46714_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Scribble"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extraction Attempt&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Used &lt;code>pdfimages&lt;/code> tool to extract images from the PDF, hoping to find hidden messages or flags.&lt;/li>
&lt;li>However, this approach did not yield any relevant information.&lt;/li>
&lt;li>If you are curious, they are confidential information such as IC, BankRakyat Account Information, etc&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identification of Suspicious Content&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Continued to carefully review the PDF document.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Noticed a suspicious SHA-1 hash that was out of place and bolded, hinting at its significance.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mobile/sus%20hash.png"
width="404"
height="211"
srcset="https://qiaonpc.github.io/post/mobile/sus%20hash_huf3d4bb54bcefe2188729b582753f105a_17118_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/sus%20hash_huf3d4bb54bcefe2188729b582753f105a_17118_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sus Hash"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Hint from Social Media&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Recalled a hint from Twitter related to Android hacking and cracking gesture passwords.&lt;/li>
&lt;li>Realized that the SHA-1 hash resembled the format of the hash mentioned in the hint.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decryption Attempt&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Researched tools and methods for decrypting SHA-1 hashes associated with Android gesture passwords.&lt;/li>
&lt;li>Found a Python script on GitHub that seemed promising for this purpose.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Successful Decryption&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Applied the Python script to decrypt the SHA-1 hash found in the PDF.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The decrypted value revealed the flag, solving the challenge.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mobile/flag.png"
width="1338"
height="700"
srcset="https://qiaonpc.github.io/post/mobile/flag_hu7a4bbcc04279aa17a4f78640b4e975b2_95747_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/flag_hu7a4bbcc04279aa17a4f78640b4e975b2_95747_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="458px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>The Mobile CTF challenge involved extracting a hidden flag from a large PDF document related to mobile forensics. Despite initial attempts to extract information from the PDF images, the solution was found in a suspicious SHA-1 hash within the document. By decrypting this hash using a Python script, the flag was successfully obtained, completing the challenge.&lt;/p>
&lt;h2 id="notes-for-this-challenge">Notes for this challenge
&lt;/h2>&lt;p>Despite the gruesome challenge, there were highlights that are worth mentioning. Attached below are my favourite parts of this challenge.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mobile/cat%201.png"
width="744"
height="762"
srcset="https://qiaonpc.github.io/post/mobile/cat%201_hu4424d80b1e7b5cb8fe05420076543371_378686_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/cat%201_hu4424d80b1e7b5cb8fe05420076543371_378686_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Cat"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="234px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mobile/cat%202.png"
width="665"
height="655"
srcset="https://qiaonpc.github.io/post/mobile/cat%202_hue5be9727b7f35c3664110edad699b0e8_386304_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/cat%202_hue5be9727b7f35c3664110edad699b0e8_386304_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Cat"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mobile/cat%203.png"
width="740"
height="718"
srcset="https://qiaonpc.github.io/post/mobile/cat%203_hu600fba7d4f61738c07d5067323a6cf99_325035_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/cat%203_hu600fba7d4f61738c07d5067323a6cf99_325035_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Cat"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="247px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/mobile/cat.png"
width="759"
height="682"
srcset="https://qiaonpc.github.io/post/mobile/cat_hu47f1642a0d2e87e9f950e276360a8f27_506505_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/mobile/cat_hu47f1642a0d2e87e9f950e276360a8f27_506505_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Cat"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p></description></item><item><title>Compromised</title><link>https://qiaonpc.github.io/post/compromised/</link><pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/compromised/</guid><description>&lt;h1 id="compromised---ctf-challenge-writeup">Compromised - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Compromised&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: The objective of the &amp;ldquo;Compromised&amp;rdquo; CTF challenge is to extract a hidden flag embedded within a complex set of files and directories.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully solve the &amp;ldquo;Compromised&amp;rdquo; challenge, I executed the following steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Examination&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Unzipped the provided challenge file, revealing a directory structure reminiscent of a Windows directory.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Identification&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Using the &lt;code>tree&lt;/code> command, I quickly located the flag within the directory structure. However, it was a zip file itself, requiring further steps for extraction.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/compromised/tree%20to%20find%20flag.png"
width="471"
height="262"
srcset="https://qiaonpc.github.io/post/compromised/tree%20to%20find%20flag_hu56c72202b0be96a693adac30d28ac80c_48522_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/tree%20to%20find%20flag_hu56c72202b0be96a693adac30d28ac80c_48522_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Tree to find flag"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/compromised/flag%20zip.png"
width="1091"
height="119"
srcset="https://qiaonpc.github.io/post/compromised/flag%20zip_hu233af82ed692c2c7c834e048aff1323d_57618_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/flag%20zip_hu233af82ed692c2c7c834e048aff1323d_57618_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag is a zip"
class="gallery-image"
data-flex-grow="916"
data-flex-basis="2200px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Brute Forcing the Zip File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Attempted to brute force the password for the zip file. Initially faced permission issues, resolved by changing permissions using &lt;code>chmod&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Used &lt;code>John The Ripper&lt;/code> to crack the zip file password, which proved unsuccessful, prompting a search for the password.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/compromised/john%20failed.png"
width="1295"
height="353"
srcset="https://qiaonpc.github.io/post/compromised/john%20failed_hub44e5245703d27a185866e2d02b5fd8d_213403_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/john%20failed_hub44e5245703d27a185866e2d02b5fd8d_213403_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="John Failed"
class="gallery-image"
data-flex-grow="366"
data-flex-basis="880px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Locating Password&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>After some exploration, identified the crucial file named &lt;code>Cache0000.bin&lt;/code>, which holds significant data for the challenge.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Cache0000.bin&lt;/code> contains data related to Remote Desktop Protocol (RDP) cache.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/compromised/found%20cache.png"
width="490"
height="225"
srcset="https://qiaonpc.github.io/post/compromised/found%20cache_hu2452617720dde5cad47c10fc5979e3bf_50341_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/found%20cache_hu2452617720dde5cad47c10fc5979e3bf_50341_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Cache File Found"
class="gallery-image"
data-flex-grow="217"
data-flex-basis="522px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Extracting Images from Cache File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Employed the tool &lt;code>bmc-tools&lt;/code> (&lt;a class="link" href="https://github.com/ANSSI-FR/bmc-tools" target="_blank" rel="noopener"
>https://github.com/ANSSI-FR/bmc-tools&lt;/a>) to extract pictures from &lt;code>Cache0000.bin&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/compromised/bmc%20tools.png"
width="1265"
height="713"
srcset="https://qiaonpc.github.io/post/compromised/bmc%20tools_hub0467e995eebc7c55c80afca5a188a2f_766412_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/bmc%20tools_hub0467e995eebc7c55c80afca5a188a2f_766412_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="BMC Tool Output"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Revealing Flag within Images&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Extracted over 2000 images, one of which combines all the segments of the flag.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Noticed segments of the flag within the combined image, visible upon zooming in.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/compromised/bmc%20tools%20zoomed.png"
width="965"
height="231"
srcset="https://qiaonpc.github.io/post/compromised/bmc%20tools%20zoomed_hu345ff2b754f4a8aef7066e7ce748a8be_78176_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/bmc%20tools%20zoomed_hu345ff2b754f4a8aef7066e7ce748a8be_78176_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="BMC Tool Flag Segment"
class="gallery-image"
data-flex-grow="417"
data-flex-basis="1002px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Combining Segments into Flag&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Utilized &lt;code>RDPCacheStitcher&lt;/code> (&lt;a class="link" href="https://github.com/BSI-Bund/RdpCacheStitcher/releases/" target="_blank" rel="noopener"
>https://github.com/BSI-Bund/RdpCacheStitcher/releases/&lt;/a>) to assemble the segments as if solving a puzzle.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/compromised/stitcher.png"
width="1459"
height="715"
srcset="https://qiaonpc.github.io/post/compromised/stitcher_hu03fdf24debb36753327432bc02609da7_38614_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/stitcher_hu03fdf24debb36753327432bc02609da7_38614_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Stitcher"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="489px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Obtaining Password&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Discovered the password &lt;code>WGMY_P4ssw0rd_N0t_V3ry_H4rd!!!&lt;/code> while assembling the image segments.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Final Flag Extraction&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Successfully unzipped the flag from the zip file using the obtained password.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/compromised/flag.png"
width="951"
height="271"
srcset="https://qiaonpc.github.io/post/compromised/flag_hu12614d797c54e94c43ac1cb33d0f927d_95998_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/compromised/flag_hu12614d797c54e94c43ac1cb33d0f927d_95998_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="350"
data-flex-basis="842px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is: &lt;code>wgmy{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>This writeup delineates the process of navigating through a directory, extracting images from a cache file, assembling image segments, and obtaining the hidden flag in the &amp;ldquo;Compromised&amp;rdquo; CTF challenge. For any further queries or clarifications, please feel free to ask.&lt;/p></description></item><item><title>FurElise</title><link>https://qiaonpc.github.io/post/furelise/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/furelise/</guid><description>&lt;h1 id="furelise---ctf-challenge-writeup">FurElise - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: FurElise&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: The objective of the &amp;ldquo;FurElise&amp;rdquo; CTF challenge is to decode a hidden flag concealed within a PowerShell script by following a series of deobfuscation and decoding steps.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;FurElise&amp;rdquo; challenge and retrieve the flag, I executed the following steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>File Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Upon inspecting the provided file, it was evident that it is a PowerShell script containing obfuscated code.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/furelise/challenge.png"
width="700"
height="797"
srcset="https://qiaonpc.github.io/post/furelise/challenge_hu52c94fe41ed6b2850a143aab34f47bba_88923_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/challenge_hu52c94fe41ed6b2850a143aab34f47bba_88923_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Challenge"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Deobfuscation&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Drawing inspiration from problem-solving approaches by John Hammond, I initiated the deobfuscation process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The initial step involved removing the &lt;code>&amp;amp;&lt;/code> present throughout the script.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/furelise/removed%20and.png"
width="469"
height="150"
srcset="https://qiaonpc.github.io/post/furelise/removed%20and_hufd6c2d8b792b1e2a51a3dcb160d7ba04_24607_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/removed%20and_hufd6c2d8b792b1e2a51a3dcb160d7ba04_24607_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Removed &amp;"
class="gallery-image"
data-flex-grow="312"
data-flex-basis="750px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Removing Unnecessary Lines&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Further simplification of the script was performed by eliminating redundant lines, notably lines containing &lt;code>''''''FürElise''''''FürElise&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This step helped in revealing clearer, relevant content within the script.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/furelise/removed%20everything.png"
width="866"
height="720"
srcset="https://qiaonpc.github.io/post/furelise/removed%20everything_hue16cb2addcb830c6f1878e65f08fbb39_121978_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/removed%20everything_hue16cb2addcb830c6f1878e65f08fbb39_121978_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Removed Everything"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identifying Clues&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Within the revised script, two links were discovered, which contained crucial elements of the flag.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The first link provided the initial part of the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/furelise/flag%20part%201.png"
width="272"
height="69"
srcset="https://qiaonpc.github.io/post/furelise/flag%20part%201_hu73ac2e76d6cb3e0360beb90ba3cf4664_4379_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/flag%20part%201_hu73ac2e76d6cb3e0360beb90ba3cf4664_4379_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag Part 1"
class="gallery-image"
data-flex-grow="394"
data-flex-basis="946px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analyzing the Second Link&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The second link presented another PowerShell script. However, caution was exercised against executing it directly on a host machine due to safety concerns.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/furelise/1%20powershell.png"
width="1911"
height="946"
srcset="https://qiaonpc.github.io/post/furelise/1%20powershell_hu2ee3e47d86d7275063b3f6a1f17ca00c_708094_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/1%20powershell_hu2ee3e47d86d7275063b3f6a1f17ca00c_708094_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Powershell Part 1"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="484px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decoding Base64&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The second PowerShell script was decoded from Base64, revealing additional script content.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To understand its functionality, portions of the script were cautiously executed one by one, avoiding potential risks and aiming to decode it progressively.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/furelise/decode%20base64.png"
width="1697"
height="867"
srcset="https://qiaonpc.github.io/post/furelise/decode%20base64_hud2c8eaf53f089c2d161c4de5967dc0ff_161759_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/decode%20base64_hud2c8eaf53f089c2d161c4de5967dc0ff_161759_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Decode Base64"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/furelise/2%20powershell.png"
width="1433"
height="578"
srcset="https://qiaonpc.github.io/post/furelise/2%20powershell_hu33729ff4a8293c68e620114a11f43c78_84265_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/2%20powershell_hu33729ff4a8293c68e620114a11f43c78_84265_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Powershell Part 2"
class="gallery-image"
data-flex-grow="247"
data-flex-basis="595px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Locating Hidden Information&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>While decoding the PowerShell script, a link was discovered halfway through the process, leading to the final part of the flag.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/furelise/decoding.png"
width="1677"
height="791"
srcset="https://qiaonpc.github.io/post/furelise/decoding_huff680a42f1afe527ef62a146ceb31062_161855_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/decoding_huff680a42f1afe527ef62a146ceb31062_161855_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Decoding"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="508px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Final Flag Retrieval&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Navigating to the obtained link revealed the last segment of the flag, completing the puzzle.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/furelise/flag%20part%202.png"
width="825"
height="127"
srcset="https://qiaonpc.github.io/post/furelise/flag%20part%202_hu1146f4119bae5f434e11a3f79a1674d0_7850_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/furelise/flag%20part%202_hu1146f4119bae5f434e11a3f79a1674d0_7850_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag Part 2"
class="gallery-image"
data-flex-grow="649"
data-flex-basis="1559px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>The resolution of the &amp;ldquo;FurElise&amp;rdquo; challenge involved systematic deobfuscation, cautious decoding, and progressive script execution to unveil hidden elements and retrieve the flag.&lt;/p>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is: &lt;code>ABOH23{d!ff1cU17_s0Ng_FROm_hEaRtBrE4K}&lt;/code>.&lt;/p>
&lt;p>This writeup serves as a demonstration of decoding techniques used to extract the hidden flag within the &amp;ldquo;FurElise&amp;rdquo; CTF challenge. Should you require further explanation or have additional queries, please feel free to ask.&lt;/p></description></item><item><title>Threat Hunting Challenge 1</title><link>https://qiaonpc.github.io/post/threat-hunting-challenge-1/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/threat-hunting-challenge-1/</guid><description>&lt;h1 id="threat-hunting-challenge-1---ctf-challenge-writeup">Threat Hunting: Challenge 1 - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Threat Hunting: Challenge 1&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: The objective of the &amp;ldquo;Threat Hunting: Challenge 1&amp;rdquo; CTF challenge is to investigate a ransomware-like attack scenario within a provided VM and identify the executable responsible for the encryption.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully complete the &amp;ldquo;Threat Hunting: Challenge 1&amp;rdquo; challenge, I followed these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Challenge Context&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>This challenge is part of a series in the threat hunting category and involves a provided VM named BOH_TH_2023. The VM needs to be extracted and loaded onto a virtualization platform like VMware or Oracle VirtualBox.&lt;/li>
&lt;li>It is recommended to solve this challenge before looking into Challenge 2 and Challenge 3&lt;/li>
&lt;li>However, you can solve Challenge 2 and Challenge 3 in any order&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Initial VM Inspection&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Upon loading the VM, it became apparent that the files were encrypted, resembling a ransomware attack scenario. The challenge also directed us to identify the executable responsible for the encryption.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Therefore, it is safe to assumed that the ransomware executable has already been executed.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/threat-hunting-challenge-1/ransomware%20attack.png"
width="960"
height="603"
srcset="https://qiaonpc.github.io/post/threat-hunting-challenge-1/ransomware%20attack_huf2d4846ab62b7c55cc4f29abe0a68af8_51975_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-1/ransomware%20attack_huf2d4846ab62b7c55cc4f29abe0a68af8_51975_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Ransomware"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Utilizing Amcache and Shimcache&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Amcache and Shimcache are artifacts used in Windows systems to record executed executables.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Amcache is a registry hive that records metadata and information about applications and programs executed on a Windows system. It provides a wealth of information about executed executables.&lt;/p>
&lt;ul>
&lt;li>Amcache is typically located in &lt;code>C:\Windows\appcompat\Programs\Amcache.hve&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Shimcache, another Windows artifact, also records information about executed programs but in a different format. However, in this challenge, the Shimcache files are intentionally corrupted.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcache.png"
width="1046"
height="190"
srcset="https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcache_hu9ab704e260e68e51a80cd99f4a2ab227_11591_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcache_hu9ab704e260e68e51a80cd99f4a2ab227_11591_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Amcache"
class="gallery-image"
data-flex-grow="550"
data-flex-basis="1321px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Amcache Parsing&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>To extract and process Amcache data, I utilized the AmcacheParser tool available at &lt;a class="link" href="https://ericzimmerman.github.io/#!index.md" target="_blank" rel="noopener"
>Eric Zimmerman&amp;rsquo;s website&lt;/a>.&lt;/li>
&lt;li>The Amcache data is typically stored in &lt;code>C:\Windows\appcompat\Programs\Amcache.hve&lt;/code>. I searched for this file and utilized AmcacheParser to process it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Processing Amcache Data&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Running AmcacheParser generated multiple CSV files, which I exported for easier analysis. These files can be explored using applications like Timeline Explorer or by downloading them from &lt;a class="link" href="https://ericzimmerman.github.io/#!index.md" target="_blank" rel="noopener"
>Eric Zimmerman&amp;rsquo;s website&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcacheparser.png"
width="1500"
height="806"
srcset="https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcacheparser_hubf85dfcffaee4596696d5efb4f0aef14_143237_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-1/amcacheparser_hubf85dfcffaee4596696d5efb4f0aef14_143237_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="AmcacheParser"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="446px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Finding Suspicious Activity&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>By examining the generated CSV files, I eventually identified something suspicious among the data, indicating the executable responsible for the encryption.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/threat-hunting-challenge-1/sus.png"
width="810"
height="152"
srcset="https://qiaonpc.github.io/post/threat-hunting-challenge-1/sus_hu825c2b5bc3321b00e7ad01e7abf7c299_48577_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-1/sus_hu825c2b5bc3321b00e7ad01e7abf7c299_48577_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Suspicious"
class="gallery-image"
data-flex-grow="532"
data-flex-basis="1278px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The identified executable responsible for the encryption is: &lt;code>ABOH{Mcqqic24UJyU40JKdja0A.exe}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>The resolution of the &amp;ldquo;Threat Hunting: Challenge 1&amp;rdquo; involved extracting Amcache data from the provided VM, utilizing AmcacheParser to process the data, and investigating the executables to identify the suspicious file responsible for the encryption.&lt;/p>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is: &lt;code>ABOH{Mcqqic24UJyU40JKdja0A.exe}&lt;/code>.&lt;/p>
&lt;p>This writeup demonstrates the process of investigating a ransomware-like attack scenario using Amcache parsing techniques in the &amp;ldquo;Threat Hunting: Challenge 1&amp;rdquo; CTF challenge. For further queries or clarifications, feel free to inquire.&lt;/p></description></item><item><title>Threat Hunting Challenge 2</title><link>https://qiaonpc.github.io/post/threat-hunting-challenge-2/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/threat-hunting-challenge-2/</guid><description>&lt;h1 id="threat-hunting-challenge-2---ctf-challenge-writeup">Threat Hunting: Challenge 2 - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Threat Hunting: Challenge 2&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: The objective of the &amp;ldquo;Threat Hunting: Challenge 2&amp;rdquo; CTF challenge is to identify the SHA256 hash value of the executable responsible for exfiltrating data within a given context.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully tackle the &amp;ldquo;Threat Hunting: Challenge 2&amp;rdquo; challenge, I followed these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Challenge Context&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>This challenge is part of a series in the threat hunting category and requires identifying the SHA256 hash value of the executable responsible for data exfiltration.&lt;/li>
&lt;li>It is recommended to solve Challenge 1 before looking into Challenge 2 and Challenge 3&lt;/li>
&lt;li>However, you can solve Challenge 2 and Challenge 3 in any order&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identifying Suspicious Executables&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>On further inspection from the first challenge, I discovered a total three suspicious files including the one from the first challenge.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I dumped the two executables onto VirusTotal and HybridAnalysis, whilst analysed the powershell script myself.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The powershell script showed symptoms of reading files and encrypting it and I am suspecting that this is the file they are looking for, but not 100% certain.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/threat-hunting-challenge-2/three%20executable.png"
width="774"
height="214"
srcset="https://qiaonpc.github.io/post/threat-hunting-challenge-2/three%20executable_hua8e7bf6b9f574b0427628f2dd97b8fd1_76975_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-2/three%20executable_hua8e7bf6b9f574b0427628f2dd97b8fd1_76975_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Executables"
class="gallery-image"
data-flex-grow="361"
data-flex-basis="868px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/threat-hunting-challenge-2/powershell%20script.png"
width="1674"
height="768"
srcset="https://qiaonpc.github.io/post/threat-hunting-challenge-2/powershell%20script_hu6d9613f4c54035822c78fbacb4d15890_51033_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-2/powershell%20script_hu6d9613f4c54035822c78fbacb4d15890_51033_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Powershell Script"
class="gallery-image"
data-flex-grow="217"
data-flex-basis="523px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Approach to Finding SHA256 Hash&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>A common misconception might lead one to use &lt;code>Get-FileHash&lt;/code> to find the hash value. However, in challenges like these, this method may not yield the expected results.&lt;/li>
&lt;li>This difference in hash values can be due to various factors and is further explained in this &lt;a class="link" href="https://stackoverflow.com/questions/29946221/hash-value-md5-and-sha256-of-file-is-coming-different-when-file-is-from-system32" target="_blank" rel="noopener"
>Stack Overflow thread&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Using Hasher Tool&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>To accurately acquire the SHA256 hash value of the suspicious files, I utilized the Hasher tool available at &lt;a class="link" href="https://ericzimmerman.github.io/#!index.md" target="_blank" rel="noopener"
>Eric Zimmerman&amp;rsquo;s website&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Determining Executable&amp;rsquo;s SHA256 Hash&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Since there were only three suspicious files discovered, and I am not so sure about my discovery, I will be calculating the SHA256 hash value for each of them using the Hasher tool and submitting as a flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Final Flag Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Among the calculated SHA256 hash values, one matched the expected format of the flag: &lt;code>ABOH{hash_value}&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>At the time of writing this writeup, I have forgotten which one was the flag. Im sorry.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/threat-hunting-challenge-2/sha256%20value.png"
width="1165"
height="235"
srcset="https://qiaonpc.github.io/post/threat-hunting-challenge-2/sha256%20value_hufc30c8e24cba1206f3fb8da856b7e08e_82116_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-2/sha256%20value_hufc30c8e24cba1206f3fb8da856b7e08e_82116_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Hash Value"
class="gallery-image"
data-flex-grow="495"
data-flex-basis="1189px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>The resolution of the &amp;ldquo;Threat Hunting: Challenge 2&amp;rdquo; involved identifying potentially malicious executables and determining their SHA256 hash values using the Hasher tool to extract the flag.&lt;/p>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is: &lt;code>ABOH{hash_value}&lt;/code>.&lt;/p>
&lt;p>This writeup illustrates the process of identifying the SHA256 hash value of a potentially malicious executable in the &amp;ldquo;Threat Hunting: Challenge 2&amp;rdquo; CTF challenge. For further inquiries or clarifications, feel free to ask.&lt;/p></description></item><item><title>Threat Hunting Challenge 3</title><link>https://qiaonpc.github.io/post/threat-hunting-challenge-3/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/threat-hunting-challenge-3/</guid><description>&lt;h1 id="threat-hunting-challenge-3---ctf-challenge-writeup">Threat Hunting: Challenge 3 - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Threat Hunting: Challenge 3&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: The objective of the &amp;ldquo;Threat Hunting: Challenge 3&amp;rdquo; CTF challenge is to identify the significant indicator related to a potentially malicious executable based on its behavior observed through external connections.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully solve the &amp;ldquo;Threat Hunting: Challenge 3&amp;rdquo; challenge, I proceeded with the following steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Context from Previous Challenge&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Continuing from the previous challenge, I conducted further analysis on the executables by uploading them to security analysis platforms like VirusTotal and HybridAnalysis for comprehensive analysis.&lt;/li>
&lt;li>It is recommended to solve Challenge 1 before looking into Challenge 3 and Challenge 3&lt;/li>
&lt;li>However, you can solve Challenge 3 and Challenge 3 in any order&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analysis Results&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Upon reviewing the analysis results from the previous challenge (VirusTotal and HybridAnalysis), I observed that both executables made external connections to IP addresses. However, one particular connection stood out among the rest.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/threat-hunting-challenge-3/not%20sus.png"
width="790"
height="238"
srcset="https://qiaonpc.github.io/post/threat-hunting-challenge-3/not%20sus_hu2d234b8a00b92d1ae34d4d4e3a7ca2cf_35013_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-3/not%20sus_hu2d234b8a00b92d1ae34d4d4e3a7ca2cf_35013_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Not Sus"
class="gallery-image"
data-flex-grow="331"
data-flex-basis="796px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/threat-hunting-challenge-3/sus.png"
width="683"
height="273"
srcset="https://qiaonpc.github.io/post/threat-hunting-challenge-3/sus_hu3ceebf911f963a2061961d59ed7e16ab_26679_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/threat-hunting-challenge-3/sus_hu3ceebf911f963a2061961d59ed7e16ab_26679_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sus"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Identification&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>After careful observation and analysis, I identified the standout indicator related to a potentially malicious executable, which is the URL or IP address:
&lt;ul>
&lt;li>&lt;code>ABOH{http://146.190.89.115:8080/YPAPJDoGD3aIQlFix11ZA.php}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>The resolution of the &amp;ldquo;Threat Hunting: Challenge 3&amp;rdquo; involved analyzing the behavior of potentially malicious executables and identifying the significant external connection, aiding in the discovery of the flag.&lt;/p>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is: &lt;code>ABOH{http://146.190.89.115:8080/YPAPJDoGD3aIQlFix11ZA.php}&lt;/code>.&lt;/p>
&lt;p>This writeup demonstrates the process of analyzing executable behavior to identify significant indicators of potential malicious activity in the &amp;ldquo;Threat Hunting: Challenge 3&amp;rdquo; CTF challenge. For any further queries or clarifications, please feel free to inquire.&lt;/p></description></item><item><title>Intruding the Hidden Society</title><link>https://qiaonpc.github.io/post/intruding-the-hidden-society/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/intruding-the-hidden-society/</guid><description>&lt;h1 id="intruding-the-hidden-society---ctf-challenge-writeup">Intruding the Hidden Society - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: Intruding the Hidden Society&lt;br>
Points: 200&lt;br>
Category: Forensics&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of the &amp;ldquo;Intruding the Hidden Society&amp;rdquo; challenge is to extract hidden information from the provided pcap file and uncover the flag.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;Intruding the Hidden Society&amp;rdquo; challenge, I followed these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Identified Patterns in DNS Packets&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Upon analyzing the pcap file, I noticed that a significant portion of the packets were DNS (Domain Name System) packets.&lt;/li>
&lt;li>I started by filtering and analyzing these DNS packets.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pattern Identification&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Pay attention to the DNS packets with base64-like encodings.&lt;/li>
&lt;li>These packets had accompanying numbers, indicating an order for reconstruction.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Packet Extraction&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The goal was to extract and reconstruct the base64-like encoded data. However, with more than 10,000 packets, manual extraction would be impractical.&lt;/li>
&lt;li>I used the &amp;ldquo;tshark&amp;rdquo; command-line tool to extract relevant packets. The following query is an example of how I extracted packets related to the challenge:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tshark -nr hiddensociety.pcap -Y &amp;#39;(ip.dst == 8.8.8.8) &amp;amp;&amp;amp; (dns.qry.name contains &amp;#34;challange.petronasgraduate.ctfd.io&amp;#34;)&amp;#39; &amp;gt; output.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>The output of the query was saved in the &amp;ldquo;output.txt&amp;rdquo; file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Data Extraction and Reconstruction&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>I created a Python script to process the &amp;ldquo;output.txt&amp;rdquo; file and extract the base64-like encoded data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The extracted data was reconstructed and written into a separate file.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">base64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">base64_reconstructed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;output.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readlines&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">extract_number_and_base64&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.challange.petronasgraduate.ctfd.io&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">extract_base64&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">extract_number_and_base64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">base64_reconstructed&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">extract_base64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;output&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;wb&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">b64decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base64_reconstructed&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identified the Data Type&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Using the &lt;code>file&lt;/code> command to determine the type of data contained in the reconstructed file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Retrieval&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The reconstructed base64 is an image file.&lt;/li>
&lt;li>Open and view the image&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>By following these steps, I was able to successfully uncover the hidden flag within the pcap file and complete the &amp;ldquo;Intruding the Hidden Society&amp;rdquo; challenge.&lt;/p>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In the &amp;ldquo;Intruding the Hidden Society&amp;rdquo; challenge, my goal was to decode and reconstruct base64-like encoded data found in DNS packets within a pcap file and reveal the flag concealed within the data.&lt;/p></description></item><item><title>m3m0irs</title><link>https://qiaonpc.github.io/post/m3m0irs/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/m3m0irs/</guid><description>&lt;h1 id="m3m0irs---ctf-challenge-writeup">m3m0irs - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: m3m0irs&lt;br>
Points: 50&lt;br>
Category: Memory Forensics&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of the m3m0irs challenge is to perform memory forensics on a memory dump file to uncover suspicious activity. Your task is to analyze the memory dump to identify the software that should not be running and reveal the hidden flag.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully complete the m3m0irs challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Memory Dump Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>In any memory forensics challenge, the first step is to determine the architecture of the system. You can achieve this using the &lt;code>volatility&lt;/code> tool with the command: &lt;code>volatility -f &amp;lt;memory dump&amp;gt; imageinfo&lt;/code>.&lt;/li>
&lt;li>The &lt;code>imageinfo&lt;/code> command will provide suggested architectures based on the memory dump&amp;rsquo;s analysis.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Architecture Identification&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Try each of the suggested architectures until you find one that works for your analysis. You can use the following command to specify the architecture: &lt;code>volatility -f &amp;lt;memory dump&amp;gt; --profile=&amp;lt;architecture&amp;gt;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identifying Suspicious Software&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The main objective is to identify software that shouldn&amp;rsquo;t be running. You can often find this information in the process lists of the memory dump.&lt;/li>
&lt;li>There are various ways to find processes in a memory dump, such as &lt;code>pstree&lt;/code>, &lt;code>pslist&lt;/code>, &lt;code>psscan&lt;/code> etc. &lt;code>pstree&lt;/code>&amp;quot; is a favorite among many analysts because it presents processes in a hierarchical manner, allowing you to easily trace parent and child processes.&lt;/li>
&lt;li>You can identify suspicious software based on the processes and their relationships in the tree.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analyzing with &amp;ldquo;pstree&amp;rdquo;&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Use the following command to generate a &lt;code>pstree&lt;/code> analysis and save it to a file for reference: &lt;code>volatility -f &amp;lt;memory dump&amp;gt; --profile=&amp;lt;architecture&amp;gt; pstree &amp;gt; pstree.txt&lt;/code>.&lt;/li>
&lt;li>Saving the output to a file ensures that you can revisit the analysis without repeating the same steps.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>During your analysis, you may find &lt;code>Azureus&lt;/code> to be suspicious as it spawned &lt;code>AzureusTor&lt;/code>. This is the software that shouldn&amp;rsquo;t be running.
&lt;img src="https://qiaonpc.github.io/post/m3m0irs/Sus.png"
width="1428"
height="231"
srcset="https://qiaonpc.github.io/post/m3m0irs/Sus_huea1b4f4ce711ad357bca8481cd25f078_163190_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/m3m0irs/Sus_huea1b4f4ce711ad357bca8481cd25f078_163190_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Azureus &amp; AzureusTor"
class="gallery-image"
data-flex-grow="618"
data-flex-basis="1483px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>By following these steps and conducting memory forensics analysis, you will uncover the suspicious software and reveal the hidden flag.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In the m3m0irs challenge, memory forensics skills are put to the test as you analyze a memory dump to identify the suspicious software that shouldn&amp;rsquo;t be running. Best of luck!&lt;/p></description></item><item><title>Puzzles of An Altered History</title><link>https://qiaonpc.github.io/post/puzzles-of-an-altered-history/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/puzzles-of-an-altered-history/</guid><description>&lt;h1 id="puzzles-of-an-altered-history---ctf-challenge-writeup">Puzzles of An Altered History - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: Puzzles of An Altered History&lt;br>
Points: 150&lt;br>
Category: Wireless Networking&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of the &amp;ldquo;Puzzles of An Altered History&amp;rdquo; challenge is to crack the password for a given wireless network, which is stored in a provided pcap (packet capture) file. You will need to use a tool called &amp;ldquo;aircrack-ng&amp;rdquo; to successfully recover the network&amp;rsquo;s password.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To solve the &amp;ldquo;Puzzles of An Altered History&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Download and Open the pcap File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Begin by downloading the provided pcap file, which contains the network traffic data.&lt;/li>
&lt;li>Open the pcap file using a network analysis tool like Wireshark.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cracking the Password&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Use the &amp;ldquo;aircrack-ng&amp;rdquo; tool to attempt to crack the wireless network&amp;rsquo;s password.&lt;/li>
&lt;li>The basic command structure for &amp;ldquo;aircrack-ng&amp;rdquo; is as follows:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">aircrack-ng &amp;lt;pcap file&amp;gt; -w &amp;lt;wordlist&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>&amp;lt;pcap file&amp;gt;&lt;/code>: Replace this with the name of the pcap file you are analyzing.&lt;/li>
&lt;li>&lt;code>&amp;lt;wordlist&amp;gt;&lt;/code>: Specify the path to a wordlist file that &amp;ldquo;aircrack-ng&amp;rdquo; will use to attempt password combinations.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Wordlist Selection&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>For the wordlist, you can use a common password dictionary like &amp;ldquo;rockyou.txt,&amp;rdquo; which is available in various locations. You should specify the full path to the wordlist file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Run aircrack-ng&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Execute the &amp;ldquo;aircrack-ng&amp;rdquo; command in your terminal, providing the pcap file and wordlist as arguments. For example:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">aircrack-ng ctfwifi.cap -w /usr/share/wordlists/rockyou.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Password Recovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;aircrack-ng&amp;rdquo; will attempt to recover the password by iHack Prelim 2024 combinations from the wordlist.&lt;/li>
&lt;li>When aircrack-ng successfully finds the correct password, it will display the password in the terminal.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Retrieval&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The cracked password will resemble the format specified in the challenge. Retrieve and present it as the flag to complete the challenge.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>By following these steps and using &amp;ldquo;aircrack-ng,&amp;rdquo; you can successfully crack the password for the wireless network captured in the pcap file and obtain the flag.&lt;/p>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In the &amp;ldquo;Puzzles of An Altered History&amp;rdquo; challenge, your goal is to utilize network analysis tools to crack the wireless network&amp;rsquo;s password, revealing the flag upon successful recovery.&lt;/p></description></item><item><title>Temporal Traffic Traces</title><link>https://qiaonpc.github.io/post/temporal-traffic-traces/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/temporal-traffic-traces/</guid><description>&lt;h1 id="temporal-traffic-traces---ctf-challenge-writeup">Temporal Traffic Traces - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: Temporal Traffic Traces&lt;br>
Points: 100&lt;br>
Category: Network Forensics&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of the &amp;ldquo;Temporal Traffic Traces&amp;rdquo; challenge is to analyze a provided pcap file and extract the hidden flag. Your task is to investigate the protocol hierarchy, identify relevant data, and decode the flag.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully complete the &amp;ldquo;Temporal Traffic Traces&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Analyze the PCAP File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>You are given a pcap file, and the first thing to do is to analyze its contents.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Check Protocol Hierarchy&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Examine the protocol hierarchy within the pcap file. Look for any anomalies or unusual combinations of protocols.
&lt;img src="https://qiaonpc.github.io/post/temporal-traffic-traces/protocol.png"
width="1380"
height="759"
srcset="https://qiaonpc.github.io/post/temporal-traffic-traces/protocol_hu859b09cd508ac3295c500a32ffb56cd3_152738_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/temporal-traffic-traces/protocol_hu859b09cd508ac3295c500a32ffb56cd3_152738_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Protocol Hierarchy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Focus on HTTP Traffic&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>In this challenge, it&amp;rsquo;s essential to focus on HTTP traffic. You can identify and extract HTTP packets, which may contain relevant data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Export HTTP Packets as Files&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Using a tool like Wireshark&amp;rsquo;s export functionality, extract HTTP packets as files for closer inspection.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identify Base64 Encoding&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>During your analysis, you may come across a base64 encoded message within the extracted files.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decode the Message&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Decode the base64-encoded message to unveil the hidden flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>As you decode the message, you will discover the flag hidden within the &amp;ldquo;Temporal Traffic Traces.&amp;rdquo; The flag follows the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>By following these steps and investigating the pcap file&amp;rsquo;s network traffic, you will successfully reveal the flag.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In the &amp;ldquo;Temporal Traffic Traces&amp;rdquo; challenge, your task is to analyze network traffic within a pcap file, extract the relevant data, and decode the hidden flag. Best of luck!&lt;/p></description></item><item><title>The Early Quantum Supercomputer I</title><link>https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/</guid><description>&lt;h1 id="the-early-quantum-supercomputer-i---ctf-challenge-writeup">The Early Quantum Supercomputer I - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: The Early Quantum Supercomputer I&lt;br>
Points: 100&lt;br>
Category: Network Forensics, Operational Technology&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of &amp;ldquo;The Early Quantum Supercomputer I&amp;rdquo; challenge is to analyze a provided pcap file and identify an uncommon protocol to uncover the hidden flag. Your task is to investigate the network traffic and pinpoint the unique protocol.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully complete &amp;ldquo;The Early Quantum Supercomputer I&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Analyze the PCAP File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Begin by opening the provided pcap file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Examine Network Traffic&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Scrutinize the network traffic captured within the pcap file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identify Uncommon Protocols&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Pay close attention to the protocols being used. Look for any uncommon or unusual protocols that may stand out.
&lt;img src="https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/protocol.png"
width="1396"
height="795"
srcset="https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/protocol_hubbbebcd40ea30e26874c88fb20df5685_89884_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/the-early-quantum-supercomputer-i/protocol_hubbbebcd40ea30e26874c88fb20df5685_89884_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Protocols"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Identification&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The flag is hidden within the uncommon protocol you identify during your analysis.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>As you identify the unique protocol, you will uncover the hidden flag. The flag is the uncommon protocol.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>By following these steps and investigating the network traffic within the pcap file, you will successfully reveal the flag.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In &amp;ldquo;The Early Quantum Supercomputer I&amp;rdquo; challenge, your task is to analyze network traffic within a pcap file and identify the uncommon protocol that hides the flag. Best of luck!&lt;/p></description></item><item><title>Unearth the Enigmatic Codebreaker's Challenge</title><link>https://qiaonpc.github.io/post/unearth-the-enigmatic-codebreakers-challenge/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/unearth-the-enigmatic-codebreakers-challenge/</guid><description>&lt;h1 id="unearth-the-enigmatic-codebreakers-challenge---ctf-challenge-writeup">Unearth the Enigmatic Codebreaker&amp;rsquo;s Challenge - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: Unearth the Enigmatic Codebreaker&amp;rsquo;s Challenge&lt;br>
Points: 150&lt;br>
Category: Memory Forensics&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of the &amp;ldquo;Unearth the Enigmatic Codebreaker&amp;rsquo;s Challenge&amp;rdquo; is to leverage memory forensics skills to crack Jerry&amp;rsquo;s hashed NTLM password. Your task is to find the hashdump, extract Jerry&amp;rsquo;s hashed password, and use a tool like hashcat to crack it and reveal the hidden flag.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully complete the &amp;ldquo;Unearth the Enigmatic Codebreaker&amp;rsquo;s Challenge,&amp;rdquo; follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Prerequisite - Complete m3m0irs&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>This challenge is the third installment in the memory forensics series. While it is recommended to complete the previous challenges as a prerequisite, it&amp;rsquo;s not necessary to have completed it to proceed, especially since the CTF has ended.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Jerry&amp;rsquo;s Password Hash&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Jerry&amp;rsquo;s password is hashed, and you need to crack it. Hashcat, which didn&amp;rsquo;t work for Dexter&amp;rsquo;s password in the previous challenge, is effective for Jerry&amp;rsquo;s.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Locating the Hashdump&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>To find the hashes to be cracked, you first need to locate the hashdump within the memory dump. You can achieve this using the following command: &lt;code>volatility -f &amp;lt;memory file&amp;gt; --profile=&amp;lt;architecture&amp;gt; hashdump&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cracking Jerry&amp;rsquo;s Hashed Password&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>After extracting Jerry&amp;rsquo;s hashed NTLM password from the hashdump, use a tool like &amp;ldquo;hashcat&amp;rdquo; to crack it. The objective is to reveal the plaintext of Jerry&amp;rsquo;s password.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Once you have successfully cracked Jerry&amp;rsquo;s hashed password, you will discover the flag. It will adhere to the specified format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>By following these steps and employing memory forensics techniques, you will uncover Jerry&amp;rsquo;s password and unveil the hidden flag in the &amp;ldquo;Unearth the Enigmatic Codebreaker&amp;rsquo;s Challenge.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In this memory forensics challenge, you must use your skills to crack Jerry&amp;rsquo;s hashed NTLM password and reveal the hidden flag. Best of luck!&lt;/p></description></item><item><title>Unearth the Long Lost Cipher</title><link>https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/</guid><description>&lt;h1 id="unearth-the-long-lost-cipher---ctf-challenge-writeup">Unearth the Long Lost Cipher - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: Unearth the Long Lost Cipher&lt;br>
Points: 150&lt;br>
Category: Memory Forensics&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of the &amp;ldquo;Unearth the Long Lost Cipher&amp;rdquo; challenge is to conduct memory forensics to find Dexter&amp;rsquo;s password on a computer. Your task is to identify the password and reveal the hidden flag.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully complete the &amp;ldquo;Unearth the Long Lost Cipher&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Prerequisite - Complete m3m0irs&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>This challenge is the second in the memory forensics series and assumes you have completed the &amp;ldquo;m3m0irs&amp;rdquo; challenge. However, since the previous challenge has ended, it&amp;rsquo;s not necessary to have completed it to proceed.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Password Search&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>You are tasked with finding Dexter&amp;rsquo;s password on the computer. Passwords can be located in various ways during memory forensics, such as examining hash dumps or LSA dumps.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Hash Cracking Attempt&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>An initial approach might involve attempting to crack the password hashes, but it didn&amp;rsquo;t yield results in this case.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>File Scan and Grep&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Another approach is to scan the memory for files and grep for references to &amp;ldquo;Dexter.&amp;rdquo; You can perform file scans using the command: &lt;code>volatility -f &amp;lt;memory file&amp;gt; --profile=&amp;lt;architecture&amp;gt; filescan &amp;gt; filescan.txt&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Locate SECRET.txt File&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>During the file scan, you may discover a file named &amp;ldquo;SECRET.txt.&amp;rdquo; Extract this file from the memory dump using the command: &lt;code>volatility -f &amp;lt;memory file&amp;gt; --profile=&amp;lt;architecture&amp;gt; dumpfiles -Q &amp;lt;memory-location&amp;gt; -D &amp;lt;directory-where-you-wish-to-place-the-file&amp;gt;&lt;/code>.
&lt;img src="https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/filescan.png"
width="1709"
height="327"
srcset="https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/filescan_hu4c72d5b5336bf99e71c685fc85914215_142573_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/filescan_hu4c72d5b5336bf99e71c685fc85914215_142573_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="SECRETS.txt"
class="gallery-image"
data-flex-grow="522"
data-flex-basis="1254px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Examine Dexter&amp;rsquo;s Files&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Investigate the contents of Dexter&amp;rsquo;s files to gather information. You may find hints that lead to the password.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Password Clues&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Dexter constructed his password using his favorite animal and a mysterious &amp;ldquo;MMYY.&amp;rdquo; Your task is to determine the animal and decode the password using the provided clues.
&lt;img src="https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/secret.png"
width="1246"
height="213"
srcset="https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/secret_hu0be1dea07636c274986ca5b9dbcd147d_50967_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/secret_hu0be1dea07636c274986ca5b9dbcd147d_50967_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Password Construction"
class="gallery-image"
data-flex-grow="584"
data-flex-basis="1403px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Format&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The flag will be in the format specified, with the animal represented by 7 letters, followed by &amp;ldquo;MM&amp;rdquo; and &amp;ldquo;YY.&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Multiple Panther Instances&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>After examining Dexter&amp;rsquo;s files, you may discover two instances of the word &amp;ldquo;panther.&amp;rdquo; Assume this is his favorite animal and forms the first part of the flag (7 letters).
&lt;img src="https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/panther%20hint.png"
width="1704"
height="551"
srcset="https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/panther%20hint_hu1d1eaf963bfce08fe261c379ad770b55_284213_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/panther%20hint_hu1d1eaf963bfce08fe261c379ad770b55_284213_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="2 Instances of Panther"
class="gallery-image"
data-flex-grow="309"
data-flex-basis="742px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Password Changing Hint&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>SECRET.txt may contain information about password changes. This hints that passwords are updated regularly.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Password Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>To narrow down the possibilities, investigate when the &amp;ldquo;notepad&amp;rdquo; application was used. You may find only two dates in the memory dump, so try both as potential password combinations.
&lt;img src="https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/usage%20of%20notepad.png"
width="1715"
height="128"
srcset="https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/usage%20of%20notepad_hu4aef2cceaf23dfa00194fa62086b5e6c_65668_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/unearth-the-long-lost-cipher/usage%20of%20notepad_hu4aef2cceaf23dfa00194fa62086b5e6c_65668_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Usage of Notepad"
class="gallery-image"
data-flex-grow="1339"
data-flex-basis="3215px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>After following these steps and conducting memory forensics analysis, you will successfully locate Dexter&amp;rsquo;s password and reveal the hidden flag.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In the &amp;ldquo;Unearth the Long Lost Cipher&amp;rdquo; challenge, memory forensics skills are crucial as you explore the computer&amp;rsquo;s memory to discover Dexter&amp;rsquo;s password and unveil the flag. Best of luck!&lt;/p></description></item><item><title>Unlock the Time Traveller's Dilemma</title><link>https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/</guid><description>&lt;h1 id="unlock-the-time-travellers-dilemma---ctf-challenge-writeup">Unlock the Time Traveller&amp;rsquo;s Dilemma - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: Unlock the Time Traveller&amp;rsquo;s Dilemma&lt;br>
Points: 200&lt;br>
Category: Memory Forensics&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of the &amp;ldquo;Unlock the Time Traveller&amp;rsquo;s Dilemma&amp;rdquo; challenge was to perform advanced memory forensics to find the hidden flag. This challenge was the fourth in the memory forensics series, and while it was recommended to solve the previous three challenges, it wasn&amp;rsquo;t necessary as the CTF had ended.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully complete the &amp;ldquo;Unlock the Time Traveller&amp;rsquo;s Dilemma&amp;rdquo; challenge, I followed these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>File Analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>I explored various aspects of the computer&amp;rsquo;s memory, including examining the MFT (Master File Table) using &lt;code>mftparser&lt;/code> and reviewing the state of the computer using &lt;code>screenshot&lt;/code>. Unfortunately, none of these methods provided the flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Clipboard Examination&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>With my previous methods proving unsuccessful, I turned my attention to &lt;code>clipboard&lt;/code> content. I used the command: &lt;code>volatility -f &amp;lt;memory file&amp;gt; --profile=&amp;lt;architecture&amp;gt; clipboard&lt;/code> to examine the clipboard contents.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Although the clipboard content didn&amp;rsquo;t immediately resemble the flag, but I tried it anyways and solved the challenge.
&lt;img src="https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/clipboard.png"
width="1409"
height="330"
srcset="https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/clipboard_hued0250f4d36f200914d4877dc116f29b_83057_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/unlock-the-time-travellers-dilemma/clipboard_hued0250f4d36f200914d4877dc116f29b_83057_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Clipboard"
class="gallery-image"
data-flex-grow="426"
data-flex-basis="1024px"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>After conducting a comprehensive memory forensics analysis, I successfully found the flag and completed the challenge.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In the &amp;ldquo;Unlock the Time Traveller&amp;rsquo;s Dilemma&amp;rdquo; challenge, my advanced memory forensics skills were put to the test as I explored various aspects of the computer&amp;rsquo;s memory to unveil the hidden flag. It was a rewarding challenge that required careful analysis. Good luck!&lt;/p></description></item><item><title>Witness the Quantum Entanglement</title><link>https://qiaonpc.github.io/post/witness-the-quantum-entanglement/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/witness-the-quantum-entanglement/</guid><description>&lt;h1 id="witness-the-quantum-entanglement---ctf-challenge-writeup">Witness the Quantum Entanglement - CTF Challenge Writeup
&lt;/h1>&lt;p>Challenge: Witness the Quantum Entanglement&lt;br>
Points: 100&lt;br>
Category: Memory Forensics&lt;/p>
&lt;h2 id="objective">Objective
&lt;/h2>&lt;p>The objective of the &amp;ldquo;Witness the Quantum Entanglement&amp;rdquo; challenge is to utilize your memory forensics skills to determine an essential piece of information. Building upon the previous challenges in the series, you are given a hint regarding Dexter&amp;rsquo;s wife, allowing you to focus on finding her birthdate. With this knowledge, you can proceed to solve the challenge.&lt;/p>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;p>To successfully complete the &amp;ldquo;Witness the Quantum Entanglement&amp;rdquo; challenge, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Previous Challenge Hint&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>In the previous challenge, a hint was provided about Dexter&amp;rsquo;s wife. This hint, along with the knowledge that she is celebrating her 42nd birthday, forms the foundation for this challenge.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Dexter&amp;rsquo;s Wife&amp;rsquo;s Birthdate&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Dexter&amp;rsquo;s wife&amp;rsquo;s age is established as 42. Now, the objective is to determine when she was born.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Key Years&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The previous challenges also provided two years: 2023 and 2018. With these years in mind, attempt to calculate Dexter&amp;rsquo;s wife&amp;rsquo;s birthdate using both possibilities.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flag Discovery&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Test both years to find the correct combination of information that results in her birthdate. One of these combinations will lead you to the correct birthdate, allowing you to obtain the flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>By carefully analyzing the provided hints and experimenting with the available information, you will successfully determine Dexter&amp;rsquo;s wife&amp;rsquo;s birthdate and retrieve the flag.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is in the format: &lt;code>petgrad2023{XXXXXXXXXX}&lt;/code>.&lt;/p>
&lt;p>In the &amp;ldquo;Witness the Quantum Entanglement&amp;rdquo; challenge, your memory forensics skills and problem-solving abilities are put to the test as you work to unravel the mystery of Dexter&amp;rsquo;s wife&amp;rsquo;s birthdate. Good luck!&lt;/p></description></item></channel></rss>