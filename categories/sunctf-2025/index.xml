<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SunCTF 2025 on</title><link>https://qiaonpc.github.io/categories/sunctf-2025/</link><description>Recent content in SunCTF 2025 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 31 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://qiaonpc.github.io/categories/sunctf-2025/index.xml" rel="self" type="application/rss+xml"/><item><title>Get Clawed</title><link>https://qiaonpc.github.io/post/get-clawed/</link><pubDate>Sun, 31 Aug 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/get-clawed/</guid><description>&lt;h1 id="get-clawed---ctf-challenge-writeup">Get Clawed - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Get Clawed&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 10&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze a disk image and network traffic capture to uncover hidden data exfiltration techniques, reverse custom encryption mechanisms, and ultimately retrieve the attackerâ€™s payload or flag.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;h3 id="1-initial-recon-ad1-file">1. &lt;strong>Initial Recon: AD1 File&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Given two files:&lt;/p>
&lt;ul>
&lt;li>A forensic disk image (&lt;code>.ad1&lt;/code>)&lt;/li>
&lt;li>A packet capture (&lt;code>.pcap&lt;/code>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Inside the AD image:&lt;/p>
&lt;ul>
&lt;li>Nothing substantial at first glance.&lt;/li>
&lt;li>A few anime images, some decoy files, and a suspicious file named &lt;code>golden-answer.clawed&lt;/code>.&lt;/li>
&lt;li>The &lt;code>.clawed&lt;/code> file appeared to be a &lt;strong>custom encrypted blob&lt;/strong> â€” likely containing the flag.&lt;/li>
&lt;li>&lt;a class="link" href="https://eqctf.com/" target="_blank" rel="noopener"
>EQCTF&lt;/a> is also mentioned ðŸ‘€ in the AD1 image file. For beginners looking to get into CTF, EQCTF is a great starting point. It is created by a team of legendary Malaysian CTF players.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-turning-to-the-network-traffic">2. &lt;strong>Turning to the Network Traffic&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>With the AD1 largely unhelpful, focus shifted to the &lt;code>.pcap&lt;/code> file.&lt;/li>
&lt;li>Suspicious HTTP GET traffic containing &lt;code>?guid=&lt;/code> stood out â€” indicative of possible &lt;strong>C2-style communication&lt;/strong>.&lt;/li>
&lt;li>This assumption stems from the fact that the values appeared &lt;strong>Base64-like&lt;/strong>, but standard decoding failed.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-leveraging-known-resources">3. &lt;strong>Leveraging Known Resources&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>After some digging, I found that my assumption was correct and it is a C2 communication.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/get-clawed/C2%20Image.png"
width="1229"
height="867"
srcset="https://qiaonpc.github.io/post/get-clawed/C2%20Image_hu1b1ff42e256beeae799d82a497a7537e_139957_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/get-clawed/C2%20Image_hu1b1ff42e256beeae799d82a497a7537e_139957_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="TrevorC2"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I then discovered a &lt;strong>writeup from the same challenge author&lt;/strong>: &lt;a class="link" href="https://warlocksmurf.github.io/posts/cyberspacectf2024/" target="_blank" rel="noopener"
>warlocksmurf.github.io - CyberspaceCTF2024&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The author provided a &lt;strong>Python script&lt;/strong> that could be reused for decrypting similarly obfuscated C2 traffic.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using this script, the suspicious traffic was decrypted successfully.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/get-clawed/Use%20Script.png"
width="1760"
height="1006"
srcset="https://qiaonpc.github.io/post/get-clawed/Use%20Script_hu8d2ba595266d4bf5dbd4aed28f0e4b22_575691_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/get-clawed/Use%20Script_hu8d2ba595266d4bf5dbd4aed28f0e4b22_575691_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Decoding C2 Traffic"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="4-c2-traffic-analysis">4. &lt;strong>C2 Traffic Analysis&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>The decrypted content revealed:&lt;/p>
&lt;ul>
&lt;li>A &lt;strong>GitHub Gist link&lt;/strong>&lt;/li>
&lt;li>The Gist contained &lt;strong>Base64-encoded content&lt;/strong>, which when decoded turned out to be another script.&lt;/li>
&lt;li>This script was a &lt;strong>basic XOR cipher&lt;/strong>, meant to encrypt/decrypt data.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/get-clawed/github%20link.png"
width="1905"
height="248"
srcset="https://qiaonpc.github.io/post/get-clawed/github%20link_hu935ecbe779142bf78fbaed8bb2867963_105351_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/get-clawed/github%20link_hu935ecbe779142bf78fbaed8bb2867963_105351_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GIST Link"
class="gallery-image"
data-flex-grow="768"
data-flex-basis="1843px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="5-decrypting-golden-answerclawed">5. &lt;strong>Decrypting golden-answer.clawed&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>With the XOR script in hand, wrote a script to decrypt &lt;code>golden-answer.clawed&lt;/code> using the same XOR logic.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Upon decryption, the file revealed the &lt;strong>flag&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/get-clawed/flag.png"
width="1288"
height="594"
srcset="https://qiaonpc.github.io/post/get-clawed/flag_hu0bb0a00dd2a2ae5e25189d06fe996644_166478_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/get-clawed/flag_hu0bb0a00dd2a2ae5e25189d06fe996644_166478_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="520px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is:&lt;br>
&lt;code>sunctf25{n0t_tr3v0r_fr0m_GTA}&lt;/code>&lt;/p></description></item><item><title>Sustainable Development Goals</title><link>https://qiaonpc.github.io/post/sustainable-development-goals/</link><pubDate>Sun, 31 Aug 2025 00:00:00 +0000</pubDate><guid>https://qiaonpc.github.io/post/sustainable-development-goals/</guid><description>&lt;h1 id="sustainable-development-goals---ctf-challenge-writeup">Sustainable Development Goals - CTF Challenge Writeup
&lt;/h1>&lt;h2 id="challenge-information">Challenge Information
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: Sustainable Development Goals&lt;/li>
&lt;li>&lt;strong>Points&lt;/strong>: 10&lt;/li>
&lt;li>&lt;strong>Category&lt;/strong>: Forensics&lt;/li>
&lt;li>&lt;strong>Objective&lt;/strong>: Analyze a memory dump to identify post-exploitation artifacts, uncover suspicious process behavior, decrypt and execute in-memory payloads, and extract the attackerâ€™s intended shellcode or flag.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="solution">Solution
&lt;/h2>&lt;h3 id="1-choosing-a-tool-memprocfs-vs-volatility">1. &lt;strong>Choosing a Tool: memprocfs vs Volatility&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Given a &lt;strong>memory dump&lt;/strong>, analysed it using memprocfs.&lt;/li>
&lt;li>I chose to begin analysis with &lt;strong>memprocfs&lt;/strong> instead of Volatility due to its speed and usability.
&lt;ul>
&lt;li>&lt;strong>memprocfs&lt;/strong> offers real-time mounting of the memory image as a virtual file system, allowing quick browsing of processes, network connections, files, registry, environment variables, and even PowerShell history.&lt;/li>
&lt;li>&lt;strong>Volatility&lt;/strong> was later used for &lt;strong>more niche plugins&lt;/strong> and &lt;strong>precise data extraction&lt;/strong> (e.g., environment variables).&lt;/li>
&lt;li>&lt;strong>memprocfs&lt;/strong> is fast so I can quickly get an overview on what I should be doing to get flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-suspicious-process-discovery">2. &lt;strong>Suspicious Process Discovery&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>During enumeration of running processes, one stood out:
&lt;ul>
&lt;li>An instance of &lt;code>svchost.exe&lt;/code> executing from an &lt;strong>unusual path&lt;/strong>:&lt;br>
&lt;code>C:\Users\sunwaylobster\Pictures\svchost.exe&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Red flags:
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;code>svchost.exe&lt;/code> is a legitimate Windows binary&lt;/strong>, but typically only runs from &lt;code>System32&lt;/code>, not &lt;code>Pictures&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It was &lt;strong>spawned by &lt;code>explorer.exe&lt;/code>&lt;/strong>, suggesting user-level execution.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tracing the parent chain revealed it &lt;strong>originated from &lt;code>WINWORD.EXE&lt;/code>&lt;/strong> â€” a classic phishing vector (e.g., Word document macro).&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sustainable-development-goals/1.%20sus%20process.png"
width="1766"
height="1005"
srcset="https://qiaonpc.github.io/post/sustainable-development-goals/1.%20sus%20process_hu3be29ca571880c76abe2ab660d486f31_112437_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sustainable-development-goals/1.%20sus%20process_hu3be29ca571880c76abe2ab660d486f31_112437_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sus Process"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-analyzing-the-malicious-svchost">3. &lt;strong>Analyzing the Malicious svchost&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Dumped and inspected the &lt;code>svchost.exe&lt;/code> binary.&lt;/li>
&lt;li>It was &lt;strong>not the real Windows svchost&lt;/strong>, but rather &lt;strong>custom malicious code&lt;/strong>.&lt;/li>
&lt;li>Behavior analysis showed it:
&lt;ul>
&lt;li>Decodes a payload intended for &lt;strong>process injection&lt;/strong>&lt;/li>
&lt;li>Uses &lt;strong>AES encryption&lt;/strong> to protect the shellcode&lt;/li>
&lt;li>Retrieves the &lt;strong>IV and AES key from environment variables&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="4-extracting-environment-variables">4. &lt;strong>Extracting Environment Variables&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Used &lt;strong>Volatility&lt;/strong> to extract the environment variables of the malicious &lt;code>svchost&lt;/code> process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Retrieved the &lt;strong>AES key and IV&lt;/strong>, enabling decryption of the embedded payload.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sustainable-development-goals/2.%20Extracted%20envars.png"
width="1530"
height="860"
srcset="https://qiaonpc.github.io/post/sustainable-development-goals/2.%20Extracted%20envars_hu95a89977d02560db34a334ae672b554e_807277_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sustainable-development-goals/2.%20Extracted%20envars_hu95a89977d02560db34a334ae672b554e_807277_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Extracted Envars"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="5-decrypting-and-executing-the-shellcode">5. &lt;strong>Decrypting and Executing the Shellcode&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Decrypted the encoded payload using the extracted key and IV.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Result: a &lt;strong>valid shellcode blob&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Executed the shellcode in a controlled environment (emulator or debugger) to observe behavior.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Upon execution, the shellcode revealed the &lt;strong>flag&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sustainable-development-goals/3.%20decrypted.png"
width="1384"
height="981"
srcset="https://qiaonpc.github.io/post/sustainable-development-goals/3.%20decrypted_hu7ebd0bc6845c1a01fec8af9e02782426_105156_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sustainable-development-goals/3.%20decrypted_hu7ebd0bc6845c1a01fec8af9e02782426_105156_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Decrypted"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>&lt;/p>
&lt;p>&lt;img src="https://qiaonpc.github.io/post/sustainable-development-goals/4.%20flag.png"
width="1245"
height="688"
srcset="https://qiaonpc.github.io/post/sustainable-development-goals/4.%20flag_hu70cd8129bcd94dc83babdbaf413fbf83_81768_480x0_resize_box_3.png 480w, https://qiaonpc.github.io/post/sustainable-development-goals/4.%20flag_hu70cd8129bcd94dc83babdbaf413fbf83_81768_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="434px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="flag">Flag
&lt;/h2>&lt;p>The flag for this challenge is:&lt;br>
&lt;code>sunctf25{sh3lly_1n_my_b3lly}&lt;/code>&lt;/p></description></item></channel></rss>